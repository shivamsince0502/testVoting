{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/instrumentation/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { ClientRequest } from 'node:http';\nimport type {\n  Context,\n  Span,\n  SpanOptions,\n  Tracer,\n  TracerProvider,\n} from '@opentelemetry/api';\nimport * as api from '@opentelemetry/api';\nimport { ProxyTracerProvider, SpanStatusCode } from '@opentelemetry/api';\nimport { AsyncLocalStorageContextManager } from '@opentelemetry/context-async-hooks';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\nimport {\n  Instrumentation,\n  registerInstrumentations,\n} from '@opentelemetry/instrumentation';\nimport { BunyanInstrumentation } from '@opentelemetry/instrumentation-bunyan';\nimport { HttpInstrumentation } from '@opentelemetry/instrumentation-http';\nimport { Resource } from '@opentelemetry/resources';\nimport {\n  BatchSpanProcessor,\n  ConsoleSpanExporter,\n  SimpleSpanProcessor,\n} from '@opentelemetry/sdk-trace-base';\nimport { NodeTracerProvider } from '@opentelemetry/sdk-trace-node';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { pkg } from '../expose.cjs';\nimport {\n  isTraceDebuggingEnabled,\n  isTraceSendingEnabled,\n  isTracingEnabled,\n} from './utils';\n\nlet instrumentations: Instrumentation[] = [];\n\ninit();\n\nexport function init(): void {\n  if (!isTracingEnabled()) {\n    return;\n  }\n\n  const traceProvider = new NodeTracerProvider({\n    resource: new Resource({\n      // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/README.md#semantic-attributes-with-sdk-provided-default-value\n      [SemanticResourceAttributes.SERVICE_NAME]: 'renovate',\n      [SemanticResourceAttributes.SERVICE_NAMESPACE]: 'renovatebot.com',\n      [SemanticResourceAttributes.SERVICE_VERSION]: pkg.version,\n    }),\n  });\n\n  // add processors\n  if (isTraceDebuggingEnabled()) {\n    traceProvider.addSpanProcessor(\n      new SimpleSpanProcessor(new ConsoleSpanExporter())\n    );\n  }\n\n  // OTEL specification environment variable\n  if (isTraceSendingEnabled()) {\n    const exporter = new OTLPTraceExporter();\n    traceProvider.addSpanProcessor(new BatchSpanProcessor(exporter));\n  }\n\n  const contextManager = new AsyncLocalStorageContextManager();\n  traceProvider.register({\n    contextManager,\n  });\n\n  instrumentations = [\n    new HttpInstrumentation({\n      applyCustomAttributesOnSpan: /* istanbul ignore next */ (\n        span,\n        request,\n        response\n      ) => {\n        // ignore 404 errors when the branch protection of Github could not be found. This is expected if no rules are configured\n        if (\n          request instanceof ClientRequest &&\n          request.host === `api.github.com` &&\n          request.path.endsWith(`/protection`) &&\n          response.statusCode === 404\n        ) {\n          span.setStatus({ code: SpanStatusCode.OK });\n        }\n      },\n    }),\n    new BunyanInstrumentation(),\n  ];\n  registerInstrumentations({\n    instrumentations,\n  });\n}\n\n/* istanbul ignore next */\n\n// https://github.com/open-telemetry/opentelemetry-js-api/issues/34\nexport async function shutdown(): Promise<void> {\n  const traceProvider = getTracerProvider();\n  if (traceProvider instanceof NodeTracerProvider) {\n    await traceProvider.shutdown();\n  } else if (traceProvider instanceof ProxyTracerProvider) {\n    const delegateProvider = traceProvider.getDelegate();\n    if (delegateProvider instanceof NodeTracerProvider) {\n      await delegateProvider.shutdown();\n    }\n  }\n}\n\n/* istanbul ignore next */\nexport function disableInstrumentations(): void {\n  for (const instrumentation of instrumentations) {\n    instrumentation.disable();\n  }\n}\n\nexport function getTracerProvider(): TracerProvider {\n  return api.trace.getTracerProvider();\n}\n\nfunction getTracer(): Tracer {\n  return getTracerProvider().getTracer('renovate');\n}\n\nexport function instrument<F extends (span: Span) => ReturnType<F>>(\n  name: string,\n  fn: F\n): ReturnType<F>;\nexport function instrument<F extends (span: Span) => ReturnType<F>>(\n  name: string,\n  fn: F,\n  options: SpanOptions\n): ReturnType<F>;\nexport function instrument<F extends (span: Span) => ReturnType<F>>(\n  name: string,\n  fn: F,\n  options: SpanOptions = {},\n  context: Context = api.context.active()\n): ReturnType<F> {\n  return getTracer().startActiveSpan(name, options, context, (span: Span) => {\n    try {\n      const ret = fn(span);\n      if (ret instanceof Promise) {\n        return ret\n          .catch((e) => {\n            span.setStatus({\n              code: SpanStatusCode.ERROR,\n              message: e,\n            });\n            throw e;\n          })\n          .finally(() => span.end()) as ReturnType<F>;\n      }\n      span.end();\n      return ret;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e,\n      });\n      span.end();\n      throw e;\n    }\n  });\n}\n"]}