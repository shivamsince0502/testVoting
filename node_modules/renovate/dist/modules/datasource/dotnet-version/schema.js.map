{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/dotnet-version/schema.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AACxB,6DAAwD;AAG3C,QAAA,aAAa,GAAG,OAAC;KAC3B,MAAM,CAAC;IACN,gBAAgB,EAAE,IAAA,yBAAU,EAC1B,OAAC;SACE,MAAM,CAAC;QACN,eAAe,EAAE,OAAC,CAAC,MAAM,EAAE;KAC5B,CAAC;SACD,SAAS,CAAC,CAAC,EAAE,eAAe,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,WAAW,CAAC,CAChE,CAAC,KAAK,CAAC,EAAE,CAAC;CACZ,CAAC;KACD,SAAS,CAAC,CAAC,EAAE,gBAAgB,EAAE,aAAa,EAAE,EAAE,EAAE,CAAC,aAAa,CAAC,CAAC;AAErE,MAAM,WAAW,GAAG,OAAC,CAAC,MAAM,CAAC;IAC3B,cAAc,EAAE,OAAC,CAAC,MAAM,EAAE;IAC1B,eAAe,EAAE,OAAC,CAAC,MAAM,EAAE;CAC5B,CAAC,CAAC;AACH,MAAM,cAAc,GAAG,OAAC,CAAC,MAAM,CAAC;IAC9B,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE;CACpB,CAAC,CAAC;AAEU,QAAA,iBAAiB,GAAG,OAAC;KAC/B,MAAM,CAAC;IACN,QAAQ,EAAE,IAAA,yBAAU,EAClB,WAAW,CAAC,MAAM,CAAC;QACjB,GAAG,EAAE,cAAc;KACpB,CAAC,CACH,CAAC,KAAK,CAAC,EAAE,CAAC;CACZ,CAAC;KACD,SAAS,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAa,EAAE,CACrC,QAAQ,CAAC,GAAG,CACV,CAAC,EACC,GAAG,EAAE,EAAE,OAAO,EAAE,EAChB,cAAc,EAAE,gBAAgB,EAChC,eAAe,EAAE,YAAY,GAC9B,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,YAAY,EAAE,CAAC,CACpD,CACF,CAAC;AAES,QAAA,qBAAqB,GAAG,OAAC;KACnC,MAAM,CAAC;IACN,QAAQ,EAAE,IAAA,yBAAU,EAClB,WAAW,CAAC,MAAM,CAAC;QACjB,OAAO,EAAE,cAAc;KACxB,CAAC,CACH,CAAC,KAAK,CAAC,EAAE,CAAC;CACZ,CAAC;KACD,SAAS,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAa,EAAE,CACrC,QAAQ,CAAC,GAAG,CACV,CAAC,EACC,OAAO,EAAE,EAAE,OAAO,EAAE,EACpB,cAAc,EAAE,gBAAgB,EAChC,eAAe,EAAE,YAAY,GAC9B,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,YAAY,EAAE,CAAC,CACpD,CACF,CAAC","sourcesContent":["import { z } from 'zod';\nimport { LooseArray } from '../../../util/schema-utils';\nimport type { Release } from '../types';\n\nexport const ReleasesIndex = z\n  .object({\n    'releases-index': LooseArray(\n      z\n        .object({\n          'releases.json': z.string(),\n        })\n        .transform(({ 'releases.json': releasesUrl }) => releasesUrl)\n    ).catch([]),\n  })\n  .transform(({ 'releases-index': releasesIndex }) => releasesIndex);\n\nconst ReleaseBase = z.object({\n  'release-date': z.string(),\n  'release-notes': z.string(),\n});\nconst ReleaseDetails = z.object({\n  version: z.string(),\n});\n\nexport const DotnetSdkReleases = z\n  .object({\n    releases: LooseArray(\n      ReleaseBase.extend({\n        sdk: ReleaseDetails,\n      })\n    ).catch([]),\n  })\n  .transform(({ releases }): Release[] =>\n    releases.map(\n      ({\n        sdk: { version },\n        'release-date': releaseTimestamp,\n        'release-notes': changelogUrl,\n      }) => ({ version, releaseTimestamp, changelogUrl })\n    )\n  );\n\nexport const DotnetRuntimeReleases = z\n  .object({\n    releases: LooseArray(\n      ReleaseBase.extend({\n        runtime: ReleaseDetails,\n      })\n    ).catch([]),\n  })\n  .transform(({ releases }): Release[] =>\n    releases.map(\n      ({\n        runtime: { version },\n        'release-date': releaseTimestamp,\n        'release-notes': changelogUrl,\n      }) => ({ version, releaseTimestamp, changelogUrl })\n    )\n  );\n"]}