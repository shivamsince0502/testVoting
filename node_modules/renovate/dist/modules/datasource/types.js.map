{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../lib/modules/datasource/types.ts"],"names":[],"mappings":"","sourcesContent":["import type {\n  ConstraintsFilter,\n  CustomDatasourceConfig,\n} from '../../config/types';\nimport type { ModuleApi } from '../../types';\n\nexport interface GetDigestInputConfig {\n  datasource: string;\n  packageName: string;\n  defaultRegistryUrls?: string[];\n  registryUrls?: string[] | null;\n  additionalRegistryUrls?: string[];\n  currentValue?: string;\n  currentDigest?: string;\n  replacementName?: string;\n}\n\nexport interface DigestConfig {\n  packageName: string;\n  registryUrl?: string;\n  currentValue?: string;\n  currentDigest?: string;\n}\n\nexport interface GetReleasesConfig {\n  customDatasources?: Record<string, CustomDatasourceConfig>;\n  datasource?: string;\n  packageName: string;\n  registryUrl?: string;\n}\n\nexport interface GetPkgReleasesConfig {\n  customDatasources?: Record<string, CustomDatasourceConfig>;\n  npmrc?: string;\n  defaultRegistryUrls?: string[];\n  registryUrls?: string[] | null;\n  additionalRegistryUrls?: string[];\n  datasource: string;\n  packageName: string;\n  versioning?: string;\n  extractVersion?: string;\n  constraints?: Record<string, string>;\n  replacementName?: string;\n  replacementVersion?: string;\n  constraintsFiltering?: ConstraintsFilter;\n}\n\nexport interface Release {\n  changelogUrl?: string;\n  checksumUrl?: string;\n  downloadUrl?: string;\n  gitRef?: string;\n  isDeprecated?: boolean;\n  isStable?: boolean;\n  releaseTimestamp?: string | null;\n  version: string;\n  newDigest?: string | undefined;\n  constraints?: Record<string, string[]>;\n  dependencies?: Record<string, string>;\n  devDependencies?: Record<string, string>;\n  registryUrl?: string;\n  sourceUrl?: string | undefined;\n  sourceDirectory?: string;\n}\n\nexport interface ReleaseResult {\n  deprecationMessage?: string;\n  isPrivate?: boolean;\n  releases: Release[];\n  tags?: Record<string, string> | undefined;\n  // URL metadata\n  changelogUrl?: string;\n  dependencyUrl?: string;\n  homepage?: string | undefined;\n  gitRef?: string;\n  sourceUrl?: string | null;\n  sourceDirectory?: string;\n  registryUrl?: string;\n  replacementName?: string;\n  replacementVersion?: string;\n}\n\nexport type RegistryStrategy = 'first' | 'hunt' | 'merge';\n\nexport interface DatasourceApi extends ModuleApi {\n  id: string;\n  getDigest?(config: DigestConfig, newValue?: string): Promise<string | null>;\n  getReleases(config: GetReleasesConfig): Promise<ReleaseResult | null>;\n  defaultRegistryUrls?: string[] | (() => string[]);\n  defaultVersioning?: string | undefined;\n  defaultConfig?: Record<string, unknown> | undefined;\n\n  /**\n   * Strategy to use when multiple registryUrls are available to the datasource.\n   * first: only the first registryUrl will be tried and others ignored\n   * hunt: registryUrls will be tried in order until one returns a result\n   * merge: all registryUrls will be tried and the results merged if more than one returns a result\n   */\n  registryStrategy?: RegistryStrategy | undefined;\n\n  /**\n   * Whether custom registryUrls are allowed.\n   */\n  customRegistrySupport: boolean;\n\n  /**\n   * Whether to perform caching in the datasource index/wrapper or not.\n   * true: datasoure index wrapper should cache all results (based on registryUrl/packageName)\n   * false: caching is not performed, or performed within the datasource implementation\n   */\n  caching?: boolean | undefined;\n}\n"]}