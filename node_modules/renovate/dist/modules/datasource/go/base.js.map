{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/go/base.ts"],"names":[],"mappings":";;;;AAAA,sBAAsB;AACtB,qEAAqE;AACrE,gEAA2B;AAC3B,4CAAyC;AACzC,iDAAsD;AACtD,4EAAsD;AACtD,6CAA0C;AAC1C,+CAA4C;AAC5C,2CAAwE;AACxE,sDAA4D;AAC5D,0CAAgD;AAChD,gDAAsD;AACtD,gDAAsD;AAGtD,4CAA4C;AAC5C,MAAa,gBAAgB;IACnB,MAAM,CAAU,iBAAiB,GAAG,IAAA,aAAK,EAC/C,2FAA2F,CAC5F,CAAC;IACM,MAAM,CAAU,YAAY,GAAG,IAAA,aAAK,EAC1C,kEAAkE,CACnE,CAAC;IACM,MAAM,CAAU,YAAY,GAAG,IAAA,aAAK,EAC1C,wCAAwC,CACzC,CAAC;IAEM,MAAM,CAAU,EAAE,GAAG,IAAI,CAAC;IAC1B,MAAM,CAAU,IAAI,GAAG,IAAI,WAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;IAE7D,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,QAAgB;QACzC,IAAI,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;YACpC,MAAM,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC3D,MAAM,WAAW,GAAG,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;YACjE,OAAO;gBACL,UAAU,EAAE,kCAAoB,CAAC,EAAE;gBACnC,WAAW;gBACX,WAAW,EAAE,oBAAoB;aAClC,CAAC;SACH;QAED,IAAI,QAAQ,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;YACtC,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9C,OAAO;gBACL,UAAU,EAAE,kCAAoB,CAAC,EAAE;gBACnC,WAAW;gBACX,WAAW,EAAE,oBAAoB;aAClC,CAAC;SACH;QAED,IAAI,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE;YACzC,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9C,OAAO;gBACL,UAAU,EAAE,wCAAuB,CAAC,EAAE;gBACtC,WAAW;gBACX,WAAW,EAAE,uBAAuB;aACrC,CAAC;SACH;QAED,OAAO,MAAM,gBAAgB,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;IAC1D,CAAC;IAEO,MAAM,CAAC,KAAK,CAAC,eAAe,CAClC,QAAgB;QAEhB,MAAM,MAAM,GAAG,WAAW,QAAQ,WAAW,CAAC;QAC9C,kDAAkD;QAClD,MAAM,GAAG,GAAG,CAAC,MAAM,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;QAC3D,OAAO,CACL,gBAAgB,CAAC,cAAc,CAAC,GAAG,EAAE,QAAQ,CAAC;YAC9C,gBAAgB,CAAC,cAAc,CAAC,GAAG,EAAE,QAAQ,CAAC,CAC/C,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,cAAc,CAC3B,GAAW,EACX,QAAgB;QAEhB,MAAM,WAAW,GAAG,IAAA,aAAK,EACvB,gEAAgE,CACjE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACZ,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,IAAI,CAAC;SACb;QACD,MAAM,CAAC,EAAE,MAAM,EAAE,WAAW,CAAC,GAAG,WAAW,CAAC;QAC5C,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YAChC,eAAM,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,EAAE,mCAAmC,CAAC,CAAC;YAChE,OAAO,IAAI,CAAC;SACb;QACD,eAAM,CAAC,KAAK,CAAC,wBAAwB,WAAW,eAAe,QAAQ,EAAE,CAAC,CAAC;QAC3E,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IACtD,CAAC;IAEO,MAAM,CAAC,gBAAgB,CAC7B,WAAmB,EACnB,QAAgB;QAEhB,IAAI,WAAW,EAAE,UAAU,CAAC,qBAAqB,CAAC,EAAE;YAClD,OAAO;gBACL,UAAU,EAAE,kCAAoB,CAAC,EAAE;gBACnC,WAAW,EAAE,WAAW;qBACrB,OAAO,CAAC,qBAAqB,EAAE,EAAE,CAAC;qBAClC,OAAO,CAAC,IAAA,aAAK,EAAC,KAAK,CAAC,EAAE,EAAE,CAAC;gBAC5B,WAAW,EAAE,oBAAoB;aAClC,CAAC;SACH;QACD,MAAM,SAAS,GACb,gBAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,MAAM;YAC1D,EAAE,cAAc,CAAC;QACrB,MAAM,aAAa,GACjB,gBAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,MAAM;YAC1D,EAAE,eAAe,CAAC;QACtB,MAAM,gBAAgB,GACpB,gBAAgB,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC;QACnE,IAAI,SAAS,IAAI,aAAa,EAAE;YAC9B,IAAI,gBAAgB,EAAE,UAAU,CAAC,aAAa,CAAC,EAAE;gBAC/C,MAAM,kBAAkB,GAAG,gBAAgB,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACxE,IAAI,kBAAkB,EAAE,MAAM,EAAE,MAAM,EAAE;oBACtC,OAAO;wBACL,UAAU,EAAE,kCAAoB,CAAC,EAAE;wBACnC,WAAW,EAAE,SAAS;wBACtB,WAAW,EAAE,kBAAkB,CAAC,MAAM,EAAE,MAAM;qBAC/C,CAAC;iBACH;gBACD,OAAO;oBACL,UAAU,EAAE,kCAAoB,CAAC,EAAE;oBACnC,WAAW,EAAE,SAAS;oBACtB,WAAW,EAAE,gBAAgB;iBAC9B,CAAC;aACH;YAED,OAAO;gBACL,UAAU,EAAE,kCAAoB,CAAC,EAAE;gBACnC,WAAW,EAAE,SAAS;gBACtB,WAAW,EAAE,aAAa;aAC3B,CAAC;SACH;QAED,IAAI,SAAS,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC,KAAK,QAAQ,EAAE;YACzD,sCAAsC;YACtC,MAAM,SAAS,GAAG,kBAAG,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YAEzC,8CAA8C;YAC9C,MAAM,WAAW,GAAG,IAAA,sBAAgB,EAAC,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;YAE9D,MAAM,WAAW,GAAG,GAAG,SAAS,CAAC,QAAQ,KAAK,SAAS,CAAC,IAAI,EAAE,CAAC;YAE/D,2GAA2G;YAC3G,MAAM,kBAAkB,GAAG,gBAAgB,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxE,IAAI,kBAAkB,EAAE,MAAM,EAAE,MAAM,EAAE;gBACtC,OAAO;oBACL,UAAU,EAAE,kCAAoB,CAAC,EAAE;oBACnC,WAAW;oBACX,WAAW,EAAE,kBAAkB,CAAC,MAAM,EAAE,MAAM;iBAC/C,CAAC;aACH;YAED,OAAO;gBACL,UAAU,EAAE,kCAAoB,CAAC,EAAE;gBACnC,WAAW;gBACX,WAAW;aACZ,CAAC;SACH;QACD,0BAA0B;QAC1B,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,MAAM,CAAC,cAAc,CAC3B,GAAW,EACX,QAAgB;QAEhB,MAAM,WAAW,GAAG,IAAA,aAAK,EACvB,uFAAuF,CACxF,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEZ,IAAI,CAAC,WAAW,EAAE;YAChB,eAAM,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,EAAE,wCAAwC,CAAC,CAAC;YACrE,OAAO,IAAI,CAAC;SACb;QAED,MAAM,CAAC,EAAE,MAAM,EAAE,AAAD,EAAG,WAAW,CAAC,GAAG,WAAW,CAAC;QAC9C,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YAChC,eAAM,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,EAAE,mCAAmC,CAAC,CAAC;YAChE,OAAO,IAAI,CAAC;SACb;QAED,eAAM,CAAC,KAAK,CAAC,cAAc,QAAQ,sBAAsB,WAAW,EAAE,CAAC,CAAC;QACxE,sCAAsC;QACtC,MAAM,SAAS,GAAG,kBAAG,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAEzC,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CACtC,WAAW,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,EACxC,QAAQ,CACT,CAAC;QACF,IAAI,UAAU,KAAK,IAAI,EAAE;YACvB,OAAO,UAAU,CAAC;SACnB;QACD,uDAAuD;QAEvD,QAAQ,IAAA,uBAAc,EAAC,WAAW,CAAC,EAAE;YACnC,KAAK,QAAQ,CAAC,CAAC;gBACb,gEAAgE;gBAChE,8CAA8C;gBAC9C,MAAM,WAAW,GAAG,IAAA,uBAAiB,EAAC,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;qBAC3D,OAAO,CAAC,IAAA,aAAK,EAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;qBAC5B,KAAK,CAAC,GAAG,CAAC;qBACV,KAAK,CAAC,CAAC,CAAC,CAAC;qBACT,IAAI,CAAC,GAAG,CAAC,CAAC;gBAEb,OAAO;oBACL,UAAU,EAAE,kCAAoB,CAAC,EAAE;oBACnC,WAAW,EAAE,GAAG,SAAS,CAAC,QAAQ,KAAK,SAAS,CAAC,IAAI,EAAE;oBACvD,WAAW;iBACZ,CAAC;aACH;YACD,KAAK,OAAO,CAAC,CAAC;gBACZ,OAAO;oBACL,UAAU,EAAE,4BAAiB,CAAC,EAAE;oBAChC,WAAW,EAAE,WAAW,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;iBACtD,CAAC;aACH;YACD,OAAO,CAAC,CAAC;gBACP,OAAO;oBACL,UAAU,EAAE,4BAAiB,CAAC,EAAE;oBAChC,WAAW,EAAE,WAAW;iBACzB,CAAC;aACH;SACF;IACH,CAAC;;AAtNH,4CAuNC","sourcesContent":["// TODO: types (#7154)\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\nimport URL from 'node:url';\nimport { logger } from '../../../logger';\nimport { detectPlatform } from '../../../util/common';\nimport * as hostRules from '../../../util/host-rules';\nimport { Http } from '../../../util/http';\nimport { regEx } from '../../../util/regex';\nimport { trimLeadingSlash, trimTrailingSlash } from '../../../util/url';\nimport { BitbucketTagsDatasource } from '../bitbucket-tags';\nimport { GitTagsDatasource } from '../git-tags';\nimport { GithubTagsDatasource } from '../github-tags';\nimport { GitlabTagsDatasource } from '../gitlab-tags';\nimport type { DataSource } from './types';\n\n// TODO: figure out class hierarchy (#10532)\nexport class BaseGoDatasource {\n  private static readonly gitlabHttpsRegExp = regEx(\n    /^(?<httpsRegExpUrl>https:\\/\\/[^/]*gitlab\\.[^/]*)\\/(?<httpsRegExpName>.+?)(?:\\/v\\d+)?[/]?$/\n  );\n  private static readonly gitlabRegExp = regEx(\n    /^(?<regExpUrl>gitlab\\.[^/]*)\\/(?<regExpPath>.+?)(?:\\/v\\d+)?[/]?$/\n  );\n  private static readonly gitVcsRegexp = regEx(\n    /^(?:[^/]+)\\/(?<module>.*)\\.git(?:$|\\/)/\n  );\n\n  private static readonly id = 'go';\n  private static readonly http = new Http(BaseGoDatasource.id);\n\n  static async getDatasource(goModule: string): Promise<DataSource | null> {\n    if (goModule.startsWith('gopkg.in/')) {\n      const [pkg] = goModule.replace('gopkg.in/', '').split('.');\n      const packageName = pkg.includes('/') ? pkg : `go-${pkg}/${pkg}`;\n      return {\n        datasource: GithubTagsDatasource.id,\n        packageName,\n        registryUrl: 'https://github.com',\n      };\n    }\n\n    if (goModule.startsWith('github.com/')) {\n      const split = goModule.split('/');\n      const packageName = split[1] + '/' + split[2];\n      return {\n        datasource: GithubTagsDatasource.id,\n        packageName,\n        registryUrl: 'https://github.com',\n      };\n    }\n\n    if (goModule.startsWith('bitbucket.org/')) {\n      const split = goModule.split('/');\n      const packageName = split[1] + '/' + split[2];\n      return {\n        datasource: BitbucketTagsDatasource.id,\n        packageName,\n        registryUrl: 'https://bitbucket.org',\n      };\n    }\n\n    return await BaseGoDatasource.goGetDatasource(goModule);\n  }\n\n  private static async goGetDatasource(\n    goModule: string\n  ): Promise<DataSource | null> {\n    const pkgUrl = `https://${goModule}?go-get=1`;\n    // GitHub Enterprise only returns a go-import meta\n    const res = (await BaseGoDatasource.http.get(pkgUrl)).body;\n    return (\n      BaseGoDatasource.goSourceHeader(res, goModule) ??\n      BaseGoDatasource.goImportHeader(res, goModule)\n    );\n  }\n\n  private static goSourceHeader(\n    res: string,\n    goModule: string\n  ): DataSource | null {\n    const sourceMatch = regEx(\n      `<meta\\\\s+name=\"?go-source\"?\\\\s+content=\"([^\\\\s]+)\\\\s+([^\\\\s]+)`\n    ).exec(res);\n    if (!sourceMatch) {\n      return null;\n    }\n    const [, prefix, goSourceUrl] = sourceMatch;\n    if (!goModule.startsWith(prefix)) {\n      logger.trace({ goModule }, 'go-source header prefix not match');\n      return null;\n    }\n    logger.debug(`Go lookup source url ${goSourceUrl} for module ${goModule}`);\n    return this.detectDatasource(goSourceUrl, goModule);\n  }\n\n  private static detectDatasource(\n    goSourceUrl: string,\n    goModule: string\n  ): DataSource | null {\n    if (goSourceUrl?.startsWith('https://github.com/')) {\n      return {\n        datasource: GithubTagsDatasource.id,\n        packageName: goSourceUrl\n          .replace('https://github.com/', '')\n          .replace(regEx(/\\/$/), ''),\n        registryUrl: 'https://github.com',\n      };\n    }\n    const gitlabUrl =\n      BaseGoDatasource.gitlabHttpsRegExp.exec(goSourceUrl)?.groups\n        ?.httpsRegExpUrl;\n    const gitlabUrlName =\n      BaseGoDatasource.gitlabHttpsRegExp.exec(goSourceUrl)?.groups\n        ?.httpsRegExpName;\n    const gitlabModuleName =\n      BaseGoDatasource.gitlabRegExp.exec(goModule)?.groups?.regExpPath;\n    if (gitlabUrl && gitlabUrlName) {\n      if (gitlabModuleName?.startsWith(gitlabUrlName)) {\n        const vcsIndicatedModule = BaseGoDatasource.gitVcsRegexp.exec(goModule);\n        if (vcsIndicatedModule?.groups?.module) {\n          return {\n            datasource: GitlabTagsDatasource.id,\n            registryUrl: gitlabUrl,\n            packageName: vcsIndicatedModule.groups?.module,\n          };\n        }\n        return {\n          datasource: GitlabTagsDatasource.id,\n          registryUrl: gitlabUrl,\n          packageName: gitlabModuleName,\n        };\n      }\n\n      return {\n        datasource: GitlabTagsDatasource.id,\n        registryUrl: gitlabUrl,\n        packageName: gitlabUrlName,\n      };\n    }\n\n    if (hostRules.hostType({ url: goSourceUrl }) === 'gitlab') {\n      // get server base url from import url\n      const parsedUrl = URL.parse(goSourceUrl);\n\n      // TODO: `parsedUrl.pathname` can be undefined\n      const packageName = trimLeadingSlash(`${parsedUrl.pathname}`);\n\n      const registryUrl = `${parsedUrl.protocol}//${parsedUrl.host}`;\n\n      // a .git path indicates a concrete git repository, which can be different from metadata returned by gitlab\n      const vcsIndicatedModule = BaseGoDatasource.gitVcsRegexp.exec(goModule);\n      if (vcsIndicatedModule?.groups?.module) {\n        return {\n          datasource: GitlabTagsDatasource.id,\n          registryUrl,\n          packageName: vcsIndicatedModule.groups?.module,\n        };\n      }\n\n      return {\n        datasource: GitlabTagsDatasource.id,\n        registryUrl,\n        packageName,\n      };\n    }\n    /* istanbul ignore next */\n    return null;\n  }\n\n  private static goImportHeader(\n    res: string,\n    goModule: string\n  ): DataSource | null {\n    const importMatch = regEx(\n      `<meta\\\\s+name=\"?go-import\"?\\\\s+content=\"([^\\\\s]+)\\\\s+([^\\\\s]+)\\\\s+([^\\\\s]+)\"\\\\s*\\\\/?>`\n    ).exec(res);\n\n    if (!importMatch) {\n      logger.trace({ goModule }, 'No go-source or go-import header found');\n      return null;\n    }\n\n    const [, prefix, , goImportURL] = importMatch;\n    if (!goModule.startsWith(prefix)) {\n      logger.trace({ goModule }, 'go-import header prefix not match');\n      return null;\n    }\n\n    logger.debug(`Go module: ${goModule} lookup import url ${goImportURL}`);\n    // get server base url from import url\n    const parsedUrl = URL.parse(goImportURL);\n\n    const datasource = this.detectDatasource(\n      goImportURL.replace(regEx(/\\.git$/), ''),\n      goModule\n    );\n    if (datasource !== null) {\n      return datasource;\n    }\n    // fall back to old behaviour if detection did not work\n\n    switch (detectPlatform(goImportURL)) {\n      case 'github': {\n        // split the go module from the URL: host/go/module -> go/module\n        // TODO: `parsedUrl.pathname` can be undefined\n        const packageName = trimTrailingSlash(`${parsedUrl.pathname}`)\n          .replace(regEx(/\\.git$/), '')\n          .split('/')\n          .slice(-2)\n          .join('/');\n\n        return {\n          datasource: GithubTagsDatasource.id,\n          registryUrl: `${parsedUrl.protocol}//${parsedUrl.host}`,\n          packageName,\n        };\n      }\n      case 'azure': {\n        return {\n          datasource: GitTagsDatasource.id,\n          packageName: goImportURL.replace(regEx(/\\.git$/), ''),\n        };\n      }\n      default: {\n        return {\n          datasource: GitTagsDatasource.id,\n          packageName: goImportURL,\n        };\n      }\n    }\n  }\n}\n"]}