{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/go/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { regEx } from '../../../util/regex';\nimport { addSecretForSanitizing } from '../../../util/sanitize';\nimport { parseUrl } from '../../../util/url';\nimport { id as semverId } from '../../versioning/semver';\nimport { BitbucketTagsDatasource } from '../bitbucket-tags';\nimport { Datasource } from '../datasource';\nimport { GitTagsDatasource } from '../git-tags';\nimport { GithubTagsDatasource } from '../github-tags';\nimport { GitlabTagsDatasource } from '../gitlab-tags';\nimport type { DigestConfig, GetReleasesConfig, ReleaseResult } from '../types';\nimport { BaseGoDatasource } from './base';\nimport { GoDirectDatasource } from './releases-direct';\nimport { GoProxyDatasource } from './releases-goproxy';\n\nexport class GoDatasource extends Datasource {\n  static readonly id = 'go';\n\n  override readonly defaultVersioning = semverId;\n\n  constructor() {\n    super(GoDatasource.id);\n  }\n\n  override readonly defaultConfig = {\n    commitMessageTopic: 'module {{depName}}',\n  };\n\n  override readonly customRegistrySupport = false;\n\n  readonly goproxy = new GoProxyDatasource();\n  readonly direct = new GoDirectDatasource();\n\n  // Pseudo versions https://go.dev/ref/mod#pseudo-versions\n  static readonly pversionRegexp = regEx(\n    /v\\d+\\.\\d+\\.\\d+-(?:\\w+\\.)?(?:0\\.)?\\d{14}-(?<digest>[a-f0-9]{12})/\n  );\n  @cache({\n    namespace: `datasource-${GoDatasource.id}`,\n    // TODO: types (#7154)\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    key: ({ packageName }: Partial<DigestConfig>) => `${packageName}-digest`,\n  })\n  getReleases(config: GetReleasesConfig): Promise<ReleaseResult | null> {\n    return this.goproxy.getReleases(config);\n  }\n\n  /**\n   * go.getDigest\n   *\n   * This datasource resolves a go module URL into its source repository\n   *  and then fetches the digest it if it is on GitHub.\n   *\n   * This function will:\n   *  - Determine the source URL for the module\n   *  - Call the respective getDigest in github to retrieve the commit hash\n   */\n  @cache({\n    namespace: GoDatasource.id,\n    key: ({ packageName }: DigestConfig) => `${packageName}-digest`,\n  })\n  override async getDigest(\n    { packageName }: DigestConfig,\n    value?: string | null\n  ): Promise<string | null> {\n    const source = await BaseGoDatasource.getDatasource(packageName);\n    if (!source) {\n      return null;\n    }\n\n    // ignore vX.Y.Z-(0.)? pseudo versions that are used Go Modules - look up default branch instead\n    // ignore v0.0.0 versions to fetch the digest of default branch, not the commit of non-existing tag `v0.0.0`\n    const tag =\n      value && !GoDatasource.pversionRegexp.test(value) && value !== 'v0.0.0'\n        ? value\n        : undefined;\n\n    switch (source.datasource) {\n      case GitTagsDatasource.id: {\n        return this.direct.git.getDigest?.(source, tag) ?? null;\n      }\n      case GithubTagsDatasource.id: {\n        return this.direct.github.getDigest(source, tag);\n      }\n      case BitbucketTagsDatasource.id: {\n        return this.direct.bitbucket.getDigest?.(source, tag) ?? null;\n      }\n      case GitlabTagsDatasource.id: {\n        return this.direct.gitlab.getDigest?.(source, tag) ?? null;\n      }\n      /* istanbul ignore next: can never happen, makes lint happy */\n      default: {\n        return null;\n      }\n    }\n  }\n}\n\n// istanbul ignore if\nif (is.string(process.env.GOPROXY)) {\n  const uri = parseUrl(process.env.GOPROXY);\n  if (uri?.password) {\n    addSecretForSanitizing(uri.password, 'global');\n  } else if (uri?.username) {\n    addSecretForSanitizing(uri.username, 'global');\n  }\n}\n"]}