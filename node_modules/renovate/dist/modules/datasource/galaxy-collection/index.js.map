{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/galaxy-collection/index.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,4CAAyC;AACzC,qEAA8D;AAE9D,kEAA4C;AAC5C,kFAA4D;AAC5D,8CAA2C;AAQ3C,MAAa,0BAA2B,SAAQ,uBAAU;IACxD,MAAM,CAAU,EAAE,GAAG,mBAAmB,CAAC;IAEzC;QACE,KAAK,CAAC,0BAA0B,CAAC,EAAE,CAAC,CAAC;IACvC,CAAC;IAEiB,qBAAqB,GAAG,KAAK,CAAC;IAE9B,mBAAmB,GAAG,CAAC,6BAA6B,CAAC,CAAC;IAEtD,iBAAiB,GAAG,gBAAgB,CAAC,EAAE,CAAC;IAMpD,AAAN,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,GACO;QAClB,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAExD,sBAAsB;QACtB,4EAA4E;QAC5E,MAAM,OAAO,GAAG,GAAG,WAAW,sBAAsB,SAAS,IAAI,WAAW,GAAG,CAAC;QAEhF,IAAI,eAAgD,CAAC;QACrD,IAAI;YACF,eAAe,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAoB,OAAO,CAAC,CAAC;SACvE;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;SAC/B;QAED,IAAI,CAAC,eAAe,EAAE,IAAI,EAAE;YAC1B,eAAM,CAAC,IAAI,CACT,EAAE,UAAU,EAAE,WAAW,EAAE,EAC3B,8BAA8B,OAAO,EAAE,CACxC,CAAC;YACF,OAAO,IAAI,CAAC;SACb;QAED,MAAM,WAAW,GAAG,eAAe,CAAC,IAAI,CAAC;QAEzC,MAAM,WAAW,GAAG,GAAG,OAAO,WAAW,CAAC;QAE1C,IAAI,mBAAwD,CAAC;QAC7D,IAAI;YACF,mBAAmB,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAC3C,WAAW,CACZ,CAAC;SACH;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;SAC/B;QAED,MAAM,eAAe,GAAG,mBAAmB,CAAC,IAAI,CAAC;QAEjD,MAAM,QAAQ,GAAc,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YAChE,MAAM,OAAO,GAAY;gBACvB,OAAO,EAAE,KAAK,CAAC,OAAO;gBACtB,YAAY,EAAE,WAAW,CAAC,UAAU;aACrC,CAAC;YACF,OAAO,OAAO,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,IAAI,oBAAsD,CAAC;QAC3D,qCAAqC;QACrC,MAAM,gBAAgB,GAAuB,MAAM,CAAC,CAAC,GAAG,CACtD,QAAQ,EACR,CAAC,YAAY,EAAE,EAAE,CACf,IAAI,CAAC,IAAI;aACN,OAAO,CACN,GAAG,WAAW,GAAG,YAAY,CAAC,OAAO,GAAG,CACzC;aACA,IAAI,CACH,CAAC,2BAA2B,EAAE,EAAE,CAAC,2BAA2B,CAAC,IAAI,CAClE;aACA,IAAI,CAAC,CAAC,cAAc,EAAE,EAAE;YACvB,IAAI;gBACF,MAAM,OAAO,GAAY;oBACvB,OAAO,EAAE,YAAY,CAAC,OAAO;oBAC7B,YAAY,EAAE,CAAC,CAAC,YAAY,CAAC,YAAY;oBACzC,WAAW,EAAE,cAAc,CAAC,YAAY;oBACxC,SAAS,EAAE,cAAc,CAAC,QAAQ,CAAC,MAAM;oBACzC,YAAY,EAAE,cAAc,CAAC,QAAQ,CAAC,YAAY;iBACnD,CAAC;gBAEF,yEAAyE;gBACzE,IAAI,YAAY,CAAC,OAAO,KAAK,WAAW,CAAC,cAAc,CAAC,OAAO,EAAE;oBAC/D,oBAAoB,GAAG,cAAc,CAAC;iBACvC;gBACD,OAAO,OAAO,CAAC;aAChB;YAAC,OAAO,GAAG,EAAE;gBACZ,eAAM,CAAC,IAAI,CACT,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,EAAE,EAChC,8BAA8B,WAAW,GAAG,YAAY,CAAC,OAAO,GAAG,CACpE,CAAC;gBACF,OAAO,IAAI,CAAC;aACb;QACH,CAAC,CAAC,CACP,CAAC;QACF,yBAAyB;QACzB,MAAM,gBAAgB,GAAG,gBAAgB,CAAC,MAAM,CAAC,YAAE,CAAC,MAAM,CAAC,CAAC;QAC5D,0FAA0F;QAC1F,MAAM,MAAM,GAAkB;YAC5B,QAAQ,EAAE,gBAAgB;YAC1B,SAAS,EAAE,oBAAoB,EAAE,QAAQ,CAAC,UAAU,IAAI,IAAI;YAC5D,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,CAAC,QAAQ;YACjD,IAAI,EAAE,oBAAoB,EAAE,QAAQ,CAAC,IAAI;SAC1C,CAAC;QACF,OAAO,MAAM,CAAC;IAChB,CAAC;;AA/GH,gEAgHC;AA/FO;IAJL,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,0BAA0B,CAAC,EAAE,EAAE;QACxD,GAAG,EAAE,CAAC,EAAE,WAAW,EAAqB,EAAE,EAAE,CAAC,WAAW;KACzD,CAAC;6DA+FD","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport type { HttpResponse } from '../../../util/http/types';\nimport * as p from '../../../util/promises';\nimport * as pep440Versioning from '../../versioning/pep440';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport type {\n  BaseProjectResult,\n  VersionsDetailResult,\n  VersionsProjectResult,\n} from './types';\n\nexport class GalaxyCollectionDatasource extends Datasource {\n  static readonly id = 'galaxy-collection';\n\n  constructor() {\n    super(GalaxyCollectionDatasource.id);\n  }\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultRegistryUrls = ['https://galaxy.ansible.com/'];\n\n  override readonly defaultVersioning = pep440Versioning.id;\n\n  @cache({\n    namespace: `datasource-${GalaxyCollectionDatasource.id}`,\n    key: ({ packageName }: GetReleasesConfig) => packageName,\n  })\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const [namespace, projectName] = packageName.split('.');\n\n    // TODO: types (#7154)\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    const baseUrl = `${registryUrl}api/v2/collections/${namespace}/${projectName}/`;\n\n    let baseUrlResponse: HttpResponse<BaseProjectResult>;\n    try {\n      baseUrlResponse = await this.http.getJson<BaseProjectResult>(baseUrl);\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n\n    if (!baseUrlResponse?.body) {\n      logger.warn(\n        { dependency: packageName },\n        `Received invalid data from ${baseUrl}`\n      );\n      return null;\n    }\n\n    const baseProject = baseUrlResponse.body;\n\n    const versionsUrl = `${baseUrl}versions/`;\n\n    let versionsUrlResponse: HttpResponse<VersionsProjectResult>;\n    try {\n      versionsUrlResponse = await this.http.getJson<VersionsProjectResult>(\n        versionsUrl\n      );\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n\n    const versionsProject = versionsUrlResponse.body;\n\n    const releases: Release[] = versionsProject.results.map((value) => {\n      const release: Release = {\n        version: value.version,\n        isDeprecated: baseProject.deprecated,\n      };\n      return release;\n    });\n\n    let newestVersionDetails: VersionsDetailResult | undefined;\n    // asynchronously get release details\n    const enrichedReleases: (Release | null)[] = await p.map(\n      releases,\n      (basicRelease) =>\n        this.http\n          .getJson<VersionsDetailResult>(\n            `${versionsUrl}${basicRelease.version}/`\n          )\n          .then(\n            (versionDetailResultResponse) => versionDetailResultResponse.body\n          )\n          .then((versionDetails) => {\n            try {\n              const release: Release = {\n                version: basicRelease.version,\n                isDeprecated: !!basicRelease.isDeprecated,\n                downloadUrl: versionDetails.download_url,\n                newDigest: versionDetails.artifact.sha256,\n                dependencies: versionDetails.metadata.dependencies,\n              };\n\n              // save details of the newest release for use on the ReleaseResult object\n              if (basicRelease.version === baseProject.latest_version.version) {\n                newestVersionDetails = versionDetails;\n              }\n              return release;\n            } catch (err) {\n              logger.warn(\n                { dependency: packageName, err },\n                `Received invalid data from ${versionsUrl}${basicRelease.version}/`\n              );\n              return null;\n            }\n          })\n    );\n    // filter failed versions\n    const filteredReleases = enrichedReleases.filter(is.truthy);\n    // extract base information which are only provided on the release from the newest release\n    const result: ReleaseResult = {\n      releases: filteredReleases,\n      sourceUrl: newestVersionDetails?.metadata.repository ?? null,\n      homepage: newestVersionDetails?.metadata.homepage,\n      tags: newestVersionDetails?.metadata.tags,\n    };\n    return result;\n  }\n}\n"]}