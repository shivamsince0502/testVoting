{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/hermit/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport type { GithubRestRelease } from '../../../util/github/types';\nimport { getApiBaseUrl } from '../../../util/github/url';\nimport { GithubHttp } from '../../../util/http/github';\nimport { regEx } from '../../../util/regex';\nimport { streamToString } from '../../../util/streams';\nimport { parseUrl } from '../../../util/url';\nimport { id } from '../../versioning/hermit';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport type { HermitSearchResult } from './types';\n\n/**\n * Hermit Datasource searches a given package from the specified `hermit-packages`\n * repository. It expects the search manifest to come from an asset `index.json` from\n * a release named index.\n */\nexport class HermitDatasource extends Datasource {\n  static readonly id = 'hermit';\n\n  override readonly customRegistrySupport = true;\n\n  override readonly registryStrategy = 'first';\n\n  override readonly defaultVersioning = id;\n\n  override readonly defaultRegistryUrls = [\n    'https://github.com/cashapp/hermit-packages',\n  ];\n\n  pathRegex: RegExp;\n\n  constructor() {\n    super(HermitDatasource.id);\n    this.http = new GithubHttp(id);\n    this.pathRegex = regEx('^/(?<owner>[^/]+)/(?<repo>[^/]+)$');\n  }\n\n  @cache({\n    namespace: `datasource-hermit-package`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      `${registryUrl ?? ''}-${packageName}`,\n  })\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    logger.trace(`HermitDataSource.getReleases()`);\n\n    if (!registryUrl) {\n      logger.error('registryUrl must be supplied');\n      return null;\n    }\n\n    const parsedUrl = parseUrl(registryUrl);\n    if (parsedUrl === null) {\n      logger.warn({ registryUrl }, 'invalid registryUrl given');\n      return null;\n    }\n\n    if (!registryUrl.startsWith('https://github.com/')) {\n      logger.warn({ registryUrl }, 'Only Github registryUrl is supported');\n      return null;\n    }\n\n    const items = await this.getHermitSearchManifest(parsedUrl);\n\n    if (items === null) {\n      return null;\n    }\n\n    const res = items.find((i) => i.Name === packageName);\n\n    if (!res) {\n      logger.debug(\n        `Could not find hermit package ${packageName} at URL ${registryUrl}`\n      );\n      return null;\n    }\n\n    const sourceUrl = res.Repository;\n\n    return {\n      sourceUrl,\n      releases: [\n        ...res.Versions.map((v) => ({\n          version: v,\n          sourceUrl,\n        })),\n        ...res.Channels.map((v) => ({\n          version: v,\n          sourceUrl,\n        })),\n      ],\n    };\n  }\n\n  /**\n   * getHermitSearchManifest fetch the index.json from release\n   * named index, parses it and returned the parsed JSON result\n   */\n  @cache({\n    namespace: `datasource-hermit-search-manifest`,\n    key: (u) => u.toString(),\n  })\n  async getHermitSearchManifest(u: URL): Promise<HermitSearchResult[] | null> {\n    const registryUrl = u.toString();\n    const host = u.host ?? '';\n    const groups = this.pathRegex.exec(u.pathname ?? '')?.groups;\n    if (!groups) {\n      logger.warn(\n        { registryUrl },\n        'failed to get owner and repo from given url'\n      );\n      return null;\n    }\n\n    const { owner, repo } = groups;\n\n    const apiBaseUrl = getApiBaseUrl(`https://${host}`);\n\n    const indexRelease = await this.http.getJson<GithubRestRelease>(\n      `${apiBaseUrl}repos/${owner}/${repo}/releases/tags/index`\n    );\n\n    // finds asset with name index.json\n    const asset = indexRelease.body.assets.find(\n      (asset) => asset.name === 'index.json'\n    );\n\n    if (!asset) {\n      logger.warn(\n        { registryUrl },\n        `can't find asset index.json in the given registryUrl`\n      );\n      return null;\n    }\n\n    // stream down the content of index.json\n    // Note: need to use stream here with\n    // the accept header as octet-stream to\n    // download asset from private github repository\n    // see GithubDoc:\n    // https://docs.github.com/en/rest/releases/assets#get-a-release-asset\n    const indexContent = await streamToString(\n      this.http.stream(asset.url, {\n        headers: {\n          accept: 'application/octet-stream',\n        },\n      })\n    );\n\n    try {\n      return JSON.parse(indexContent) as HermitSearchResult[];\n    } catch (e) {\n      logger.warn('error parsing hermit search manifest from remote respond');\n    }\n\n    return null;\n  }\n}\n"]}