{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/custom/utils.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAElC,4CAAyC;AACzC,yEAAmD;AAGnD,SAAgB,6BAA6B,CAC3C,oBAA4B,EAC5B,EACE,iBAAiB,EACjB,WAAW,EACX,WAAW,EAAE,kBAAkB,GACb;IAEpB,MAAM,gBAAgB,GAAG,iBAAiB,EAAE,CAAC,oBAAoB,CAAC,CAAC;IACnE,IAAI,YAAE,CAAC,eAAe,CAAC,gBAAgB,CAAC,EAAE;QACxC,eAAM,CAAC,KAAK,CACV,8CAA8C,WAAW,qBAAqB,CAC/E,CAAC;QACF,OAAO,IAAI,CAAC;KACb;IACD,MAAM,aAAa,GAAG,EAAE,WAAW,EAAE,CAAC;IAEtC,MAAM,mBAAmB,GACvB,kBAAkB,IAAI,gBAAgB,CAAC,0BAA0B,CAAC;IACpE,IAAI,YAAE,CAAC,eAAe,CAAC,mBAAmB,CAAC,EAAE;QAC3C,eAAM,CAAC,KAAK,CACV,qEAAqE,CACtE,CAAC;QACF,OAAO,IAAI,CAAC;KACb;IACD,MAAM,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC;IAEzE,MAAM,kBAAkB,GAAG,gBAAgB,CAAC,kBAAkB,IAAI,EAAE,CAAC;IACrE,MAAM,SAAS,GAAa,EAAE,CAAC;IAC/B,KAAK,MAAM,iBAAiB,IAAI,kBAAkB,EAAE;QAClD,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC;QACrE,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAC3B;IAED,OAAO;QACL,MAAM,EAAE,gBAAgB,CAAC,MAAM,IAAI,MAAM;QACzC,0BAA0B,EAAE,WAAW;QACvC,kBAAkB,EAAE,SAAS;KAC9B,CAAC;AACJ,CAAC;AAvCD,sEAuCC","sourcesContent":["import is from '@sindresorhus/is';\nimport type { CustomDatasourceConfig } from '../../../config/types';\nimport { logger } from '../../../logger';\nimport * as template from '../../../util/template';\nimport type { GetReleasesConfig } from '../types';\n\nexport function massageCustomDatasourceConfig(\n  customDatasourceName: string,\n  {\n    customDatasources,\n    packageName,\n    registryUrl: defaultRegistryUrl,\n  }: GetReleasesConfig\n): Required<CustomDatasourceConfig> | null {\n  const customDatasource = customDatasources?.[customDatasourceName];\n  if (is.nullOrUndefined(customDatasource)) {\n    logger.debug(\n      `No custom datasource config provided while ${packageName} has been requested`\n    );\n    return null;\n  }\n  const templateInput = { packageName };\n\n  const registryUrlTemplate =\n    defaultRegistryUrl ?? customDatasource.defaultRegistryUrlTemplate;\n  if (is.nullOrUndefined(registryUrlTemplate)) {\n    logger.debug(\n      'No registry url provided by extraction nor datasource configuration'\n    );\n    return null;\n  }\n  const registryUrl = template.compile(registryUrlTemplate, templateInput);\n\n  const transformTemplates = customDatasource.transformTemplates ?? [];\n  const transform: string[] = [];\n  for (const transformTemplate of transformTemplates) {\n    const templated = template.compile(transformTemplate, templateInput);\n    transform.push(templated);\n  }\n\n  return {\n    format: customDatasource.format ?? 'json',\n    defaultRegistryUrlTemplate: registryUrl,\n    transformTemplates: transform,\n  };\n}\n"]}