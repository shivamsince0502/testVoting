{"version":3,"file":"ecr.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/docker/ecr.ts"],"names":[],"mappings":";;;AAAA,oDAA2D;AAC3D,4CAAyC;AAIzC,+CAA4C;AAC5C,qDAAgE;AAEnD,QAAA,QAAQ,GAAG,IAAA,aAAK,EAAC,6CAA6C,CAAC,CAAC;AAChE,QAAA,cAAc,GAAG,IAAA,aAAK,EAAC,kBAAkB,CAAC,CAAC;AAEjD,KAAK,UAAU,eAAe,CACnC,MAAc,EACd,IAAc;IAEd,MAAM,MAAM,GAAoB,EAAE,MAAM,EAAE,CAAC;IAC3C,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE;QAClC,MAAM,CAAC,WAAW,GAAG;YACnB,WAAW,EAAE,IAAI,CAAC,QAAQ;YAC1B,eAAe,EAAE,IAAI,CAAC,QAAQ;YAC9B,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;SAChD,CAAC;KACH;IAED,MAAM,GAAG,GAAG,IAAI,gBAAG,CAAC,MAAM,CAAC,CAAC;IAC5B,IAAI;QACF,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;QACjD,MAAM,kBAAkB,GAAG,IAAI,EAAE,iBAAiB,EAAE,CAAC,CAAC,CAAC,EAAE,kBAAkB,CAAC;QAC5E,IAAI,kBAAkB,EAAE;YACtB,iBAAiB;YACjB,IAAA,iCAAsB,EAAC,kBAAkB,CAAC,CAAC;YAC3C,OAAO,kBAAkB,CAAC;SAC3B;QACD,eAAM,CAAC,IAAI,CACT,8EAA8E,CAC/E,CAAC;KACH;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;QAC7B,eAAM,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;KACjD;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AA9BD,0CA8BC;AAED,SAAgB,oBAAoB,CAAC,GAAc;IACjD,MAAM,IAAI,GAAG,GAAG,CAAC,QAAyC,CAAC;IAC3D,OAAO,CAAC,CAAC,CACP,IAAI,EAAE,UAAU,KAAK,GAAG;QACxB,IAAI,CAAC,OAAO,EAAE,CAAC,iCAAiC,CAAC;QACjD,sIAAsI;QACtI,IAAI,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,QAAQ,CAC3C,mDAAmD,CACpD,CACF,CAAC;AACJ,CAAC;AAVD,oDAUC","sourcesContent":["import { ECR, ECRClientConfig } from '@aws-sdk/client-ecr';\nimport { logger } from '../../../logger';\nimport type { HostRule } from '../../../types';\nimport type { HttpError } from '../../../util/http';\nimport type { HttpResponse } from '../../../util/http/types';\nimport { regEx } from '../../../util/regex';\nimport { addSecretForSanitizing } from '../../../util/sanitize';\n\nexport const ecrRegex = regEx(/\\d+\\.dkr\\.ecr\\.([-a-z0-9]+)\\.amazonaws\\.com/);\nexport const ecrPublicRegex = regEx(/public\\.ecr\\.aws/);\n\nexport async function getECRAuthToken(\n  region: string,\n  opts: HostRule\n): Promise<string | null> {\n  const config: ECRClientConfig = { region };\n  if (opts.username && opts.password) {\n    config.credentials = {\n      accessKeyId: opts.username,\n      secretAccessKey: opts.password,\n      ...(opts.token && { sessionToken: opts.token }),\n    };\n  }\n\n  const ecr = new ECR(config);\n  try {\n    const data = await ecr.getAuthorizationToken({});\n    const authorizationToken = data?.authorizationData?.[0]?.authorizationToken;\n    if (authorizationToken) {\n      // sanitize token\n      addSecretForSanitizing(authorizationToken);\n      return authorizationToken;\n    }\n    logger.warn(\n      'Could not extract authorizationToken from ECR getAuthorizationToken response'\n    );\n  } catch (err) {\n    logger.trace({ err }, 'err');\n    logger.debug('ECR getAuthorizationToken error');\n  }\n  return null;\n}\n\nexport function isECRMaxResultsError(err: HttpError): boolean {\n  const resp = err.response as HttpResponse<any> | undefined;\n  return !!(\n    resp?.statusCode === 405 &&\n    resp.headers?.['docker-distribution-api-version'] &&\n    // https://docs.aws.amazon.com/AmazonECR/latest/APIReference/API_DescribeRepositories.html#ECR-DescribeRepositories-request-maxResults\n    resp.body?.['errors']?.[0]?.message?.includes(\n      'Member must have value less than or equal to 1000'\n    )\n  );\n}\n"]}