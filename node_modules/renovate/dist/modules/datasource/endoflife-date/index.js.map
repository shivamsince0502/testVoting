{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/endoflife-date/index.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,4CAAyC;AACzC,qEAA8D;AAC9D,2CAAiD;AACjD,8CAA2C;AAE3C,qCAAmD;AACnD,qCAAiD;AAEjD,MAAa,0BAA2B,SAAQ,uBAAU;IACxD,MAAM,CAAU,EAAE,GAAG,mBAAU,CAAC;IAEd,mBAAmB,GAAG,CAAC,oBAAW,CAAC,CAAC;IACpC,OAAO,GAAG,IAAI,CAAC;IACf,iBAAiB,GAAG,OAAO,CAAC;IAE9C;QACE,KAAK,CAAC,0BAA0B,CAAC,EAAE,CAAC,CAAC;IACvC,CAAC;IAQK,AAAN,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,GACO;QAClB,IAAI,CAAC,YAAE,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;YACnC,OAAO,IAAI,CAAC;SACb;QAED,eAAM,CAAC,KAAK,CAAC,GAAG,mBAAU,gBAAgB,WAAW,KAAK,WAAW,GAAG,CAAC,CAAC;QAE1E,MAAM,MAAM,GAAkB;YAC5B,QAAQ,EAAE,EAAE;SACb,CAAC;QAEF,MAAM,GAAG,GAAG,IAAA,kBAAY,EAAC,WAAW,EAAE,GAAG,WAAW,OAAO,CAAC,CAAC;QAE7D,IAAI;YACF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,8BAAqB,CAAC,CAAC;YAErE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;YAEvC,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;SAC/C;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;SAC/B;IACH,CAAC;;AA1CH,gEA2CC;AA1BO;IANL,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,mBAAU,EAAE;QACrC,GAAG,EAAE,CAAC,EAAE,WAAW,EAAE,WAAW,EAAqB,EAAE,EAAE;QACvD,sBAAsB;QACtB,GAAG,WAAY,IAAI,WAAW,EAAE;KACnC,CAAC;6DA0BD","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { joinUrlParts } from '../../../util/url';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { datasource, registryUrl } from './common';\nimport { EndoflifeDateVersions } from './schema';\n\nexport class EndoflifeDatePackagesource extends Datasource {\n  static readonly id = datasource;\n\n  override readonly defaultRegistryUrls = [registryUrl];\n  override readonly caching = true;\n  override readonly defaultVersioning = 'loose';\n\n  constructor() {\n    super(EndoflifeDatePackagesource.id);\n  }\n\n  @cache({\n    namespace: `datasource-${datasource}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      // TODO: types (#7154)\n      `${registryUrl!}:${packageName}`,\n  })\n  async getReleases({\n    registryUrl,\n    packageName,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    if (!is.nonEmptyString(registryUrl)) {\n      return null;\n    }\n\n    logger.trace(`${datasource}.getReleases(${registryUrl}, ${packageName})`);\n\n    const result: ReleaseResult = {\n      releases: [],\n    };\n\n    const url = joinUrlParts(registryUrl, `${packageName}.json`);\n\n    try {\n      const response = await this.http.getJson(url, EndoflifeDateVersions);\n\n      result.releases.push(...response.body);\n\n      return result.releases.length ? result : null;\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n  }\n}\n"]}