{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/conan/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { load } from 'js-yaml';\nimport { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { GithubHttp } from '../../../util/http/github';\nimport { ensureTrailingSlash, joinUrlParts } from '../../../util/url';\nimport * as allVersioning from '../../versioning';\nimport { isArtifactoryServer } from '../common';\nimport { Datasource } from '../datasource';\nimport type {\n  DigestConfig,\n  GetReleasesConfig,\n  Release,\n  ReleaseResult,\n} from '../types';\nimport {\n  conanDatasourceRegex,\n  datasource,\n  defaultRegistryUrl,\n  getConanPackage,\n} from './common';\nimport type {\n  ConanJSON,\n  ConanProperties,\n  ConanRevisionJSON,\n  ConanRevisionsJSON,\n  ConanYAML,\n} from './types';\n\nexport class ConanDatasource extends Datasource {\n  static readonly id = datasource;\n\n  override readonly defaultRegistryUrls = [defaultRegistryUrl];\n\n  override readonly caching = true;\n\n  override readonly registryStrategy = 'merge';\n\n  githubHttp: GithubHttp;\n\n  constructor(id = ConanDatasource.id) {\n    super(id);\n    this.githubHttp = new GithubHttp(id);\n  }\n\n  async getConanCenterReleases(\n    conanName: string,\n    userAndChannel: string\n  ): Promise<ReleaseResult | null> {\n    if (userAndChannel && userAndChannel !== '@_/_') {\n      logger.debug(\n        { conanName, userAndChannel },\n        'User/channel not supported for Conan Center lookups'\n      );\n      return null;\n    }\n    const url = `https://api.github.com/repos/conan-io/conan-center-index/contents/recipes/${conanName}/config.yml`;\n    const res = await this.githubHttp.get(url, {\n      headers: { accept: 'application/vnd.github.v3.raw' },\n    });\n    const doc = load(res.body, {\n      json: true,\n    }) as ConanYAML;\n    return {\n      releases: Object.keys(doc?.versions ?? {}).map((version) => ({\n        version,\n      })),\n    };\n  }\n\n  @cache({\n    namespace: `datasource-${datasource}-revisions`,\n    key: ({ registryUrl, packageName }: DigestConfig, newValue?: string) =>\n      // TODO: types (#7154)\n      `${registryUrl!}:${packageName}:${newValue!}`,\n  })\n  override async getDigest(\n    { registryUrl, packageName }: DigestConfig,\n    newValue?: string\n  ): Promise<string | null> {\n    if (is.undefined(newValue) || is.undefined(registryUrl)) {\n      return null;\n    }\n    const url = ensureTrailingSlash(registryUrl);\n    const conanPackage = getConanPackage(packageName);\n    const revisionLookUp = joinUrlParts(\n      url,\n      'v2/conans/',\n      conanPackage.conanName,\n      newValue,\n      conanPackage.userAndChannel,\n      '/revisions'\n    );\n    const revisionRep = await this.http.getJson<ConanRevisionsJSON>(\n      revisionLookUp\n    );\n    const revisions = revisionRep?.body.revisions;\n    return revisions?.[0].revision ?? null;\n  }\n\n  @cache({\n    namespace: `datasource-${datasource}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      // TODO: types (#7154)\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      `${registryUrl}:${packageName}`,\n  })\n  async getReleases({\n    registryUrl,\n    packageName,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const conanPackage = getConanPackage(packageName);\n    const userAndChannel = '@' + conanPackage.userAndChannel;\n    if (\n      is.string(registryUrl) &&\n      ensureTrailingSlash(registryUrl) === defaultRegistryUrl\n    ) {\n      return this.getConanCenterReleases(\n        conanPackage.conanName,\n        userAndChannel\n      );\n    }\n\n    logger.trace(\n      { packageName, registryUrl },\n      'Looking up conan api dependency'\n    );\n\n    if (registryUrl) {\n      const url = ensureTrailingSlash(registryUrl);\n      const lookupUrl = joinUrlParts(\n        url,\n        `v2/conans/search?q=${conanPackage.conanName}`\n      );\n\n      try {\n        const rep = await this.http.getJson<ConanJSON>(lookupUrl);\n        const versions = rep?.body;\n        if (versions) {\n          logger.trace({ lookupUrl }, 'Got conan api result');\n          const dep: ReleaseResult = { releases: [] };\n\n          for (const resultString of Object.values(versions.results ?? {})) {\n            const fromMatch = conanDatasourceRegex.exec(resultString);\n            if (fromMatch?.groups?.version && fromMatch?.groups?.userChannel) {\n              const version = fromMatch.groups.version;\n              if (fromMatch.groups.userChannel === userAndChannel) {\n                const result: Release = {\n                  version,\n                };\n                dep.releases.push(result);\n              }\n            }\n          }\n\n          if (isArtifactoryServer(rep)) {\n            const conanApiRegexp =\n              /(?<host>.*)\\/artifactory\\/api\\/conan\\/(?<repo>[^/]+)/;\n            const groups = url.match(conanApiRegexp)?.groups;\n            if (!groups) {\n              return dep;\n            }\n            const semver = allVersioning.get('semver');\n\n            const sortedReleases = dep.releases\n              .filter((release) => semver.isVersion(release.version))\n              .sort((a, b) => semver.sortVersions(a.version, b.version));\n\n            const latestVersion = sortedReleases.at(-1)?.version;\n\n            if (!latestVersion) {\n              return dep;\n            }\n            logger.debug(\n              `Conan package ${packageName} has latest version ${latestVersion}`\n            );\n\n            const latestRevisionUrl = joinUrlParts(\n              url,\n              `v2/conans/${conanPackage.conanName}/${latestVersion}/${conanPackage.userAndChannel}/latest`\n            );\n            const revResp = await this.http.getJson<ConanRevisionJSON>(\n              latestRevisionUrl\n            );\n            const packageRev = revResp.body.revision;\n\n            const [user, channel] = conanPackage.userAndChannel.split('/');\n            const packageUrl = joinUrlParts(\n              `${groups.host}/artifactory/api/storage/${groups.repo}`,\n              `${user}/${conanPackage.conanName}/${latestVersion}/${channel}/${packageRev}/export/conanfile.py?properties=conan.package.url`\n            );\n            const packageUrlResp = await this.http.getJson<ConanProperties>(\n              packageUrl\n            );\n            const conanPackageUrl =\n              packageUrlResp.body.properties['conan.package.url'][0];\n            dep.sourceUrl = conanPackageUrl;\n          }\n          return dep;\n        }\n      } catch (err) {\n        this.handleGenericErrors(err);\n      }\n    }\n\n    return null;\n  }\n}\n"]}