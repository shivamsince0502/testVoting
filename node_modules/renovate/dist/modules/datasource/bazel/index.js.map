{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/bazel/index.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,mFAA8E;AAC9E,qEAA8D;AAC9D,6CAA+C;AAC/C,2CAAiD;AACjD,iFAA6E;AAC7E,8CAA2C;AAE3C,qCAA+C;AAE/C,MAAa,eAAgB,SAAQ,uBAAU;IAC7C,MAAM,CAAU,EAAE,GAAG,OAAO,CAAC;IAE7B,MAAM,CAAU,mBAAmB,GACjC,0EAA0E,CAAC;IAE3D,mBAAmB,GAAG,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC;IAC5D,qBAAqB,GAAG,IAAI,CAAC;IAC7B,OAAO,GAAG,IAAI,CAAC;IAEjC,MAAM,CAAC,mBAAmB,CAAC,WAAmB;QAC5C,OAAO,YAAY,WAAW,gBAAgB,CAAC;IACjD,CAAC;IAED;QACE,KAAK,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;IAC5B,CAAC;IAOK,AAAN,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,GACO;QAClB,MAAM,IAAI,GAAG,eAAe,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;QAC9D,MAAM,GAAG,GAAG,IAAA,kBAAY,EAAC,WAAY,EAAE,IAAI,CAAC,CAAC;QAE7C,MAAM,MAAM,GAAkB,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;QAC/C,IAAI;YACF,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAChD,GAAG,EACH,4BAAmB,CACpB,CAAC;YACF,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ;iBAChC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,8BAAa,CAAC,CAAC,CAAC,CAAC;iBAChC,IAAI,CAAC,8BAAa,CAAC,cAAc,CAAC;iBAClC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE;gBACV,MAAM,OAAO,GAAY,EAAE,OAAO,EAAE,EAAE,CAAC,QAAQ,EAAE,CAAC;gBAClD,IAAI,YAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE;oBACpD,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC;iBAC7B;gBACD,OAAO,OAAO,CAAC;YACjB,CAAC,CAAC,CAAC;SACN;QAAC,OAAO,GAAG,EAAE;YACZ,+CAA+C;YAC/C,IAAI,GAAG,YAAY,gBAAS,EAAE;gBAC5B,IAAI,GAAG,CAAC,QAAQ,EAAE,UAAU,KAAK,GAAG,EAAE;oBACpC,OAAO,IAAI,CAAC;iBACb;gBACD,MAAM,IAAI,uCAAiB,CAAC,GAAG,CAAC,CAAC;aAClC;YACD,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;SAC/B;QAED,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;IAChD,CAAC;;AA1DH,0CA2DC;AApCO;IALL,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,eAAe,CAAC,EAAE,EAAE;QAC7C,GAAG,EAAE,CAAC,EAAE,WAAW,EAAE,WAAW,EAAqB,EAAE,EAAE,CACvD,GAAG,WAAY,IAAI,WAAW,EAAE;KACnC,CAAC;kDAoCD","sourcesContent":["import is from '@sindresorhus/is';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { HttpError } from '../../../util/http';\nimport { joinUrlParts } from '../../../util/url';\nimport { BzlmodVersion } from '../../versioning/bazel-module/bzlmod-version';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport { BazelModuleMetadata } from './schema';\n\nexport class BazelDatasource extends Datasource {\n  static readonly id = 'bazel';\n\n  static readonly bazelCentralRepoUrl =\n    'https://raw.githubusercontent.com/bazelbuild/bazel-central-registry/main';\n\n  override readonly defaultRegistryUrls = [BazelDatasource.bazelCentralRepoUrl];\n  override readonly customRegistrySupport = true;\n  override readonly caching = true;\n\n  static packageMetadataPath(packageName: string): string {\n    return `/modules/${packageName}/metadata.json`;\n  }\n\n  constructor() {\n    super(BazelDatasource.id);\n  }\n\n  @cache({\n    namespace: `datasource-${BazelDatasource.id}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      `${registryUrl!}:${packageName}`,\n  })\n  async getReleases({\n    registryUrl,\n    packageName,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const path = BazelDatasource.packageMetadataPath(packageName);\n    const url = joinUrlParts(registryUrl!, path);\n\n    const result: ReleaseResult = { releases: [] };\n    try {\n      const { body: metadata } = await this.http.getJson(\n        url,\n        BazelModuleMetadata\n      );\n      result.releases = metadata.versions\n        .map((v) => new BzlmodVersion(v))\n        .sort(BzlmodVersion.defaultCompare)\n        .map((bv) => {\n          const release: Release = { version: bv.original };\n          if (is.truthy(metadata.yanked_versions[bv.original])) {\n            release.isDeprecated = true;\n          }\n          return release;\n        });\n    } catch (err) {\n      // istanbul ignore else: not testable with nock\n      if (err instanceof HttpError) {\n        if (err.response?.statusCode === 404) {\n          return null;\n        }\n        throw new ExternalHostError(err);\n      }\n      this.handleGenericErrors(err);\n    }\n\n    return result.releases.length ? result : null;\n  }\n}\n"]}