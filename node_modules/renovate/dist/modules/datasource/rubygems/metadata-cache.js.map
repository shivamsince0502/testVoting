{"version":3,"file":"metadata-cache.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/rubygems/metadata-cache.ts"],"names":[],"mappings":";;;;AAAA,0DAA0B;AAC1B,4CAAyC;AACzC,kFAA4D;AAE5D,2CAA2D;AAE3D,qCAAoD;AAOpD,MAAa,aAAa;IACK;IAA7B,YAA6B,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;IAAG,CAAC;IAE3C,KAAK,CAAC,UAAU,CACd,WAAmB,EACnB,WAAmB,EACnB,QAAkB;QAElB,MAAM,IAAI,GAAG,IAAA,eAAK,EAAC,QAAQ,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC;QACtD,MAAM,OAAO,GAAG,qBAAqB,CAAC;QACtC,MAAM,QAAQ,GAAG,kBAAkB,WAAW,IAAI,WAAW,EAAE,CAAC;QAChE,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,GAAG,CAAc,OAAO,EAAE,QAAQ,CAAC,CAAC;QACxE,IAAI,QAAQ,EAAE,IAAI,KAAK,IAAI,EAAE;YAC3B,OAAO,QAAQ,CAAC,IAAI,CAAC;SACtB;QAED,IAAI;YACF,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAChD,IAAA,kBAAY,EAAC,WAAW,EAAE,kBAAkB,EAAE,GAAG,WAAW,OAAO,CAAC,EACpE,oBAAW,CACZ,CAAC;YAEF,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAChD,IAAA,kBAAY,EAAC,WAAW,EAAE,cAAc,EAAE,GAAG,WAAW,OAAO,CAAC,EAChE,oBAAW,CACZ,CAAC;YAEF,MAAM,IAAI,GAAkB,EAAE,QAAQ,EAAE,CAAC;YAEzC,IAAI,QAAQ,CAAC,YAAY,EAAE;gBACzB,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;aAC3C;YAED,IAAI,QAAQ,CAAC,SAAS,EAAE;gBACtB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;aACrC;YAED,IAAI,QAAQ,CAAC,QAAQ,EAAE;gBACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;aACnC;YAED,MAAM,gBAAgB,GAAG,IAAA,cAAQ,EAAC,WAAW,CAAC,EAAE,QAAQ,CAAC;YACzD,IAAI,gBAAgB,KAAK,cAAc,EAAE;gBACvC,MAAM,QAAQ,GAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;gBAC7C,MAAM,UAAU,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,CAAC;gBACjC,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;gBAChE,MAAM,YAAY,CAAC,GAAG,CACpB,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,UAAU,GAAG,cAAc,CAC5B,CAAC;aACH;YAED,OAAO,IAAI,CAAC;SACb;QAAC,OAAO,GAAG,EAAE;YACZ,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,oCAAoC,CAAC,CAAC;YAC5D,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YAC1D,OAAO,EAAE,QAAQ,EAAE,CAAC;SACrB;IACH,CAAC;CACF;AA7DD,sCA6DC","sourcesContent":["import hasha from 'hasha';\nimport { logger } from '../../../logger';\nimport * as packageCache from '../../../util/cache/package';\nimport type { Http } from '../../../util/http';\nimport { joinUrlParts, parseUrl } from '../../../util/url';\nimport type { ReleaseResult } from '../types';\nimport { GemMetadata, GemVersions } from './schema';\n\ninterface CacheRecord {\n  hash: string;\n  data: ReleaseResult;\n}\n\nexport class MetadataCache {\n  constructor(private readonly http: Http) {}\n\n  async getRelease(\n    registryUrl: string,\n    packageName: string,\n    versions: string[]\n  ): Promise<ReleaseResult> {\n    const hash = hasha(versions, { algorithm: 'sha256' });\n    const cacheNs = `datasource-rubygems`;\n    const cacheKey = `metadata-cache:${registryUrl}:${packageName}`;\n    const oldCache = await packageCache.get<CacheRecord>(cacheNs, cacheKey);\n    if (oldCache?.hash === hash) {\n      return oldCache.data;\n    }\n\n    try {\n      const { body: releases } = await this.http.getJson(\n        joinUrlParts(registryUrl, '/api/v1/versions', `${packageName}.json`),\n        GemVersions\n      );\n\n      const { body: metadata } = await this.http.getJson(\n        joinUrlParts(registryUrl, '/api/v1/gems', `${packageName}.json`),\n        GemMetadata\n      );\n\n      const data: ReleaseResult = { releases };\n\n      if (metadata.changelogUrl) {\n        data.changelogUrl = metadata.changelogUrl;\n      }\n\n      if (metadata.sourceUrl) {\n        data.sourceUrl = metadata.sourceUrl;\n      }\n\n      if (metadata.homepage) {\n        data.homepage = metadata.homepage;\n      }\n\n      const registryHostname = parseUrl(registryUrl)?.hostname;\n      if (registryHostname === 'rubygems.org') {\n        const newCache: CacheRecord = { hash, data };\n        const ttlMinutes = 100 * 24 * 60;\n        const ttlRandomDelta = Math.floor(Math.random() * 10 * 24 * 60);\n        await packageCache.set(\n          cacheNs,\n          cacheKey,\n          newCache,\n          ttlMinutes + ttlRandomDelta\n        );\n      }\n\n      return data;\n    } catch (err) {\n      logger.debug({ err }, 'Rubygems: failed to fetch metadata');\n      const releases = versions.map((version) => ({ version }));\n      return { releases };\n    }\n  }\n}\n"]}