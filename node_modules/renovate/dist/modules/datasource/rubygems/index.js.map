{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/rubygems/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Marshal } from '@qnighy/marshal';\nimport { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { HttpError } from '../../../util/http';\nimport { getQueryString, joinUrlParts, parseUrl } from '../../../util/url';\nimport * as rubyVersioning from '../../versioning/ruby';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport { RubygemsHttp } from './http';\nimport { MetadataCache } from './metadata-cache';\nimport { GemMetadata, GemVersions, MarshalledVersionInfo } from './schema';\nimport { VersionsEndpointCache } from './versions-endpoint-cache';\n\nexport class RubyGemsDatasource extends Datasource {\n  static readonly id = 'rubygems';\n\n  private metadataCache: MetadataCache;\n\n  constructor() {\n    super(RubyGemsDatasource.id);\n    this.http = new RubygemsHttp(RubyGemsDatasource.id);\n    this.versionsEndpointCache = new VersionsEndpointCache(this.http);\n    this.metadataCache = new MetadataCache(this.http);\n  }\n\n  override readonly defaultRegistryUrls = ['https://rubygems.org'];\n\n  override readonly defaultVersioning = rubyVersioning.id;\n\n  override readonly registryStrategy = 'hunt';\n\n  private readonly versionsEndpointCache: VersionsEndpointCache;\n\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    // istanbul ignore if\n    if (!registryUrl) {\n      return null;\n    }\n\n    try {\n      const { res: versionsResult } =\n        await this.versionsEndpointCache.getVersions(registryUrl, packageName);\n\n      if (versionsResult.success) {\n        const { value: versions } = versionsResult;\n        const result = await this.metadataCache.getRelease(\n          registryUrl,\n          packageName,\n          versions\n        );\n        return result;\n      }\n\n      const registryHostname = parseUrl(registryUrl)?.hostname;\n      if (\n        versionsResult.error === 'unsupported-api' &&\n        registryHostname !== 'rubygems.org'\n      ) {\n        if (\n          registryHostname === 'rubygems.pkg.github.com' ||\n          registryHostname === 'gitlab.com'\n        ) {\n          return await this.getReleasesViaFallbackAPI(registryUrl, packageName);\n        }\n\n        const gemMetadata = await this.fetchGemMetadata(\n          registryUrl,\n          packageName\n        );\n        if (!gemMetadata) {\n          return await this.getReleasesViaFallbackAPI(registryUrl, packageName);\n        }\n\n        return await this.getReleasesViaAPI(\n          registryUrl,\n          packageName,\n          gemMetadata\n        );\n      }\n\n      return null;\n    } catch (error) {\n      this.handleGenericErrors(error);\n    }\n  }\n\n  @cache({\n    namespace: `datasource-${RubyGemsDatasource.id}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      // TODO: types (#7154)\n      /* eslint-disable @typescript-eslint/restrict-template-expressions */\n      `metadata:${registryUrl}/${packageName}`,\n  })\n  async fetchGemMetadata(\n    registryUrl: string,\n    packageName: string\n  ): Promise<GemMetadata | null> {\n    try {\n      const { body } = await this.http.getJson(\n        joinUrlParts(registryUrl, '/api/v1/gems', `${packageName}.json`),\n        GemMetadata\n      );\n      return body;\n    } catch (err) {\n      // fallback to deps api on 404\n      if (err instanceof HttpError && err.response?.statusCode === 404) {\n        return null;\n      }\n      throw err;\n    }\n  }\n\n  @cache({\n    namespace: `datasource-${RubyGemsDatasource.id}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      // TODO: types (#7154)\n      /* eslint-disable @typescript-eslint/restrict-template-expressions */\n      `versions:${registryUrl}/${packageName}`,\n  })\n  async fetchGemVersions(\n    registryUrl: string,\n    packageName: string\n  ): Promise<GemVersions | null> {\n    try {\n      const { body } = await this.http.getJson(\n        joinUrlParts(registryUrl, '/api/v1/versions', `${packageName}.json`),\n        GemVersions\n      );\n      return body;\n    } catch (err) {\n      if (err.statusCode === 400 || err.statusCode === 404) {\n        logger.debug(\n          { registry: registryUrl },\n          'versions endpoint returns error - falling back to info endpoint'\n        );\n        return null;\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  async getReleasesViaAPI(\n    registryUrl: string,\n    packageName: string,\n    gemMetadata: GemMetadata\n  ): Promise<ReleaseResult | null> {\n    const gemVersions = await this.fetchGemVersions(registryUrl, packageName);\n\n    let releases: Release[] | null = null;\n    if (gemVersions?.length) {\n      releases = gemVersions;\n    } else if (gemMetadata.latestVersion) {\n      releases = [{ version: gemMetadata.latestVersion }];\n    } else {\n      return null;\n    }\n\n    const result: ReleaseResult = { releases };\n\n    if (gemMetadata.changelogUrl) {\n      result.changelogUrl = gemMetadata.changelogUrl;\n    }\n\n    if (gemMetadata.homepage) {\n      result.homepage = gemMetadata.homepage;\n    }\n\n    if (gemMetadata.sourceUrl) {\n      result.sourceUrl = gemMetadata.sourceUrl;\n    }\n\n    return result;\n  }\n\n  @cache({\n    namespace: `datasource-${RubyGemsDatasource.id}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      // TODO: types (#7154)\n      /* eslint-disable @typescript-eslint/restrict-template-expressions */\n      `dependencies:${registryUrl}/${packageName}`,\n  })\n  async getReleasesViaFallbackAPI(\n    registryUrl: string,\n    packageName: string\n  ): Promise<ReleaseResult | null> {\n    const path = joinUrlParts(registryUrl, `/api/v1/dependencies`);\n    const query = getQueryString({ gems: packageName });\n    const url = `${path}?${query}`;\n    const { body: buffer } = await this.http.getBuffer(url);\n    const data = Marshal.parse(buffer);\n    return MarshalledVersionInfo.parse(data);\n  }\n}\n"]}