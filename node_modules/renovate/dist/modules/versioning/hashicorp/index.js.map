{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/hashicorp/index.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AAEzC,gCAAoC;AAEpC,2CAA2D;AAE9C,QAAA,EAAE,GAAG,WAAW,CAAC;AACjB,QAAA,WAAW,GAAG,WAAW,CAAC;AAC1B,QAAA,IAAI,GAAG;IAClB,oGAAoG;CACrG,CAAC;AACW,QAAA,cAAc,GAAG,IAAI,CAAC;AACtB,QAAA,wBAAwB,GAAoB;IACvD,MAAM;IACN,OAAO;IACP,KAAK;IACL,SAAS;CACV,CAAC;AAEF,SAAS,eAAe,CAAC,OAAe,EAAE,KAAa;IACrD,OAAO,CAAC,CAAC,SAAG,CAAC,eAAe,EAAE,CAAC,OAAO,EAAE,IAAA,yBAAa,EAAC,KAAK,CAAC,CAAC,CAAC;AAChE,CAAC;AAED,SAAgB,OAAO,CAAC,KAAa;IACnC,IAAI,KAAK,EAAE;QACT,IAAI;YACF,OAAO,SAAG,CAAC,OAAO,CAAC,IAAA,yBAAa,EAAC,KAAK,CAAC,CAAC,CAAC;SAC1C;QAAC,OAAO,GAAG,EAAE;YACZ,eAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,wCAAwC,CAAC,CAAC;YACzE,OAAO,KAAK,CAAC;SACd;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAVD,0BAUC;AAED,SAAS,OAAO,CAAC,OAAe,EAAE,KAAa;IAC7C,OAAO,OAAO,CAAC,KAAK,CAAC,IAAI,SAAG,CAAC,OAAO,CAAC,OAAO,EAAE,IAAA,yBAAa,EAAC,KAAK,CAAC,CAAC,CAAC;AACtE,CAAC;AAED,SAAS,oBAAoB,CAC3B,QAAkB,EAClB,KAAa;IAEb,OAAO,SAAG,CAAC,oBAAoB,CAAC,QAAQ,EAAE,IAAA,yBAAa,EAAC,KAAK,CAAC,CAAC,CAAC;AAClE,CAAC;AAED,SAAS,oBAAoB,CAC3B,QAAkB,EAClB,KAAa;IAEb,OAAO,SAAG,CAAC,oBAAoB,CAAC,QAAQ,EAAE,IAAA,yBAAa,EAAC,KAAK,CAAC,CAAC,CAAC;AAClE,CAAC;AAED,SAAS,WAAW,CAAC,EACnB,YAAY,EACZ,aAAa,EACb,cAAc,EACd,UAAU,GACK;IACf,IAAI,aAAa,GAAG,SAAG,CAAC,WAAW,CAAC;QAClC,YAAY,EAAE,IAAA,yBAAa,EAAC,YAAY,CAAC;QACzC,aAAa;QACb,cAAc;QACd,UAAU;KACX,CAAC,CAAC;IACH,IAAI,aAAa,EAAE;QACjB,aAAa,GAAG,IAAA,yBAAa,EAAC,aAAa,CAAC,CAAC;QAC7C,IAAI,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YAClE,aAAa,GAAG,IAAI,aAAa,EAAE,CAAC;SACrC;KACF;IACD,OAAO,aAAa,CAAC;AACvB,CAAC;AAEY,QAAA,GAAG,GAAkB;IAChC,GAAG,SAAG;IACN,eAAe;IACf,OAAO;IACP,OAAO;IACP,oBAAoB;IACpB,oBAAoB;IACpB,WAAW;CACZ,CAAC;AAEF,6DAA6D;AAC9C,iBAAS,GAAK,WAAG,WAAC;AAEjC,kBAAe,WAAG,CAAC","sourcesContent":["import { logger } from '../../../logger';\nimport type { RangeStrategy } from '../../../types/versioning';\nimport { api as npm } from '../npm';\nimport type { NewValueConfig, VersioningApi } from '../types';\nimport { hashicorp2npm, npm2hashicorp } from './convertor';\n\nexport const id = 'hashicorp';\nexport const displayName = 'Hashicorp';\nexport const urls = [\n  'https://www.terraform.io/docs/configuration/terraform.html#specifying-a-required-terraform-version',\n];\nexport const supportsRanges = true;\nexport const supportedRangeStrategies: RangeStrategy[] = [\n  'bump',\n  'widen',\n  'pin',\n  'replace',\n];\n\nfunction isLessThanRange(version: string, range: string): boolean {\n  return !!npm.isLessThanRange?.(version, hashicorp2npm(range));\n}\n\nexport function isValid(input: string): boolean {\n  if (input) {\n    try {\n      return npm.isValid(hashicorp2npm(input));\n    } catch (err) {\n      logger.trace({ value: input }, 'Unsupported hashicorp versioning value');\n      return false;\n    }\n  }\n  return false;\n}\n\nfunction matches(version: string, range: string): boolean {\n  return isValid(range) && npm.matches(version, hashicorp2npm(range));\n}\n\nfunction getSatisfyingVersion(\n  versions: string[],\n  range: string\n): string | null {\n  return npm.getSatisfyingVersion(versions, hashicorp2npm(range));\n}\n\nfunction minSatisfyingVersion(\n  versions: string[],\n  range: string\n): string | null {\n  return npm.minSatisfyingVersion(versions, hashicorp2npm(range));\n}\n\nfunction getNewValue({\n  currentValue,\n  rangeStrategy,\n  currentVersion,\n  newVersion,\n}: NewValueConfig): string | null {\n  let npmNewVersion = npm.getNewValue({\n    currentValue: hashicorp2npm(currentValue),\n    rangeStrategy,\n    currentVersion,\n    newVersion,\n  });\n  if (npmNewVersion) {\n    npmNewVersion = npm2hashicorp(npmNewVersion);\n    if (currentValue.startsWith('v') && !npmNewVersion.startsWith('v')) {\n      npmNewVersion = `v${npmNewVersion}`;\n    }\n  }\n  return npmNewVersion;\n}\n\nexport const api: VersioningApi = {\n  ...npm,\n  isLessThanRange,\n  isValid,\n  matches,\n  getSatisfyingVersion,\n  minSatisfyingVersion,\n  getNewValue,\n};\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nexport const { isVersion } = api;\n\nexport default api;\n"]}