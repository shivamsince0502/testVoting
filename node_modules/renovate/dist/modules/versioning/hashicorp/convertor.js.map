{"version":3,"file":"convertor.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/hashicorp/convertor.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\n\n/**\n * This can convert most hashicorp ranges to valid npm syntax\n * The `!=` syntax is currently unsupported as there is no direct\n * equivalent in npm and isn't widely used\n * Also prerelease syntax is less well-defined for hashicorp and will\n * cause issues if it is not semvar compatible as no attempts to convert it\n * are made\n */\nexport function hashicorp2npm(input: string): string {\n  if (!input) {\n    return input;\n  }\n  return input\n    .split(',')\n    .map((single) => {\n      const r = single.match(\n        regEx(\n          /^\\s*(|=|!=|>|<|>=|<=|~>)\\s*v?((\\d+)(\\.\\d+){0,2}[\\w-+]*(\\.\\d+)*)\\s*$/\n        )\n      );\n      if (!r) {\n        logger.warn(\n          { constraint: input, element: single },\n          'Invalid hashicorp constraint'\n        );\n        throw new Error('Invalid hashicorp constraint');\n      }\n      if (r[1] === '!=') {\n        logger.warn(\n          { constraint: input, element: single },\n          'Unsupported hashicorp constraint'\n        );\n        throw new Error('Unsupported hashicorp constraint');\n      }\n      return {\n        operator: r[1],\n        version: r[2],\n      };\n    })\n    .map(({ operator, version }) => {\n      switch (operator) {\n        case '=':\n          return version;\n        case '~>':\n          if (version.match(regEx(/^\\d+$/))) {\n            return `>=${version}`;\n          }\n          if (version.match(regEx(/^\\d+\\.\\d+$/))) {\n            return `^${version}`;\n          }\n          return `~${version}`;\n        default:\n          return `${operator}${version}`;\n      }\n    })\n    .join(' ');\n}\n\n/**\n * This can convert a limited set of npm range syntax to hashicorp,\n * it supports all the syntax that hashicorp2npm can output\n * It cannot handle `*`, `1.x.x`, range with `-`, `||`\n */\nexport function npm2hashicorp(input: string): string {\n  if (!input) {\n    return input;\n  }\n  return input\n    .split(' ')\n    .map((single) => {\n      const r = single.match(\n        regEx(/^(|>|<|>=|<=|~|\\^)v?((\\d+)(\\.\\d+){0,2}[\\w-]*(\\.\\d+)*)$/)\n      );\n      if (!r) {\n        throw new Error('invalid npm constraint');\n      }\n      return {\n        operator: r[1],\n        version: r[2],\n      };\n    })\n    .map(({ operator, version }) => {\n      switch (operator) {\n        case '^': {\n          if (version.match(regEx(/^\\d+$/))) {\n            return `~> ${version}.0`;\n          }\n          const withZero = version.match(regEx(/^(\\d+\\.\\d+)\\.0$/));\n          if (withZero) {\n            return `~> ${withZero[1]}`;\n          }\n          const nonZero = version.match(regEx(/^(\\d+\\.\\d+)\\.\\d+$/));\n          if (nonZero) {\n            // not including`>= ${version}`, which makes this less accurate\n            // but makes the results cleaner\n            return `~> ${nonZero[1]}`;\n          }\n          return `~> ${version}`;\n        }\n        case '~':\n          if (version.match(regEx(/^\\d+$/))) {\n            return `~> ${version}.0`;\n          }\n          if (version.match(regEx(/^\\d+\\.\\d+$/))) {\n            return `~> ${version}.0`;\n          }\n          return `~> ${version}`;\n        case '':\n          return `${version}`;\n        default:\n          return `${operator} ${version}`;\n      }\n    })\n    .join(', ');\n}\n"]}