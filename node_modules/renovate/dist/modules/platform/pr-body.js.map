{"version":3,"file":"pr-body.js","sourceRoot":"","sources":["../../../lib/modules/platform/pr-body.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport hasha from 'hasha';\nimport { logger } from '../../logger';\nimport { stripEmojis } from '../../util/emoji';\nimport { regEx } from '../../util/regex';\nimport { fromBase64 } from '../../util/string';\nimport type { PrBodyStruct } from './types';\n\nexport const prDebugDataRe = regEx(\n  /\\n?<!--renovate-debug:(?<payload>.*?)-->\\n?/\n);\n\nconst renovateConfigHashRe = regEx(\n  /\\n?<!--renovate-config-hash:(?<payload>.*?)-->\\n?/\n);\n\nconst prCheckboxRe = regEx(/- (?<checkbox>\\[[\\sx]]) <!-- rebase-check -->/);\n\nfunction noWhitespaceOrHeadings(input: string): string {\n  return input.replace(regEx(/\\r?\\n|\\r|\\s|#/g), '');\n}\n\nconst reviewableRegex = regEx(/\\s*<!-- Reviewable:start -->/);\n\nexport function hashBody(body: string | undefined): string {\n  let result = body?.trim() ?? '';\n  result = result.replace(prDebugDataRe, '');\n  const reviewableIndex = result.search(reviewableRegex);\n  if (reviewableIndex > -1) {\n    result = result.slice(0, reviewableIndex);\n  }\n  result = stripEmojis(result);\n  result = noWhitespaceOrHeadings(result);\n  result = hasha(result, { algorithm: 'sha256' });\n  return result;\n}\n\nfunction isRebaseRequested(body: string): boolean | undefined {\n  const match = prCheckboxRe.exec(body);\n  if (!match) {\n    return undefined;\n  }\n  return match.groups?.checkbox === '[x]';\n}\n\nexport function getRenovateDebugPayload(body: string): string | undefined {\n  const match = prDebugDataRe.exec(body);\n  return match?.groups?.payload;\n}\n\nexport function getRenovateConfigHashPayload(body: string): string | undefined {\n  const match = renovateConfigHashRe.exec(body);\n  return match?.groups?.payload;\n}\n\nexport function getPrBodyStruct(\n  input: string | undefined | null\n): PrBodyStruct {\n  const body = input ?? '';\n  const hash = hashBody(body);\n  const result: PrBodyStruct = { hash };\n\n  const rebaseRequested = isRebaseRequested(body);\n\n  if (!is.undefined(rebaseRequested)) {\n    result.rebaseRequested = rebaseRequested;\n  }\n\n  const rawConfigHash = getRenovateConfigHashPayload(body);\n  if (rawConfigHash) {\n    result.rawConfigHash = rawConfigHash;\n  }\n\n  const debugPayload = getRenovateDebugPayload(body);\n  if (debugPayload) {\n    try {\n      result.debugData = JSON.parse(fromBase64(debugPayload));\n    } catch (e) {\n      logger.warn('Unable to read and parse debugData from the PR');\n    }\n  }\n  return result;\n}\n"]}