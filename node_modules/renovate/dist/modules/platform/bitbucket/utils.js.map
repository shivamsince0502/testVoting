{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../lib/modules/platform/bitbucket/utils.ts"],"names":[],"mappings":";;;AAEA,wCAA6C;AAW7C,SAAgB,mBAAmB,CAAC,YAA0B;IAC5D,OAAO;QACL,MAAM,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM;QAC7B,KAAK,EAAE,YAAY,CAAC,KAAK,CAAC,QAAQ;QAClC,UAAU,EAAE,YAAY,CAAC,UAAU,CAAC,IAAI;QACxC,WAAW,EAAE,OAAO;QACpB,UAAU,EAAE,YAAY,CAAC,UAAU;QACnC,IAAI,EAAE,YAAY,CAAC,IAAI;QACvB,UAAU,EAAE,YAAY,CAAC,UAAU;KACpC,CAAC;AACJ,CAAC;AAVD,kDAUC;AAED,MAAM,wBAAwB,GAC5B,IAAI,GAAG,CAAC;IACN,CAAC,QAAQ,EAAE,QAAQ,CAAC;IACpB,CAAC,cAAc,EAAE,cAAc,CAAC;IAChC,CAAC,cAAc,EAAE,cAAc,CAAC;CACjC,CAAC,CAAC;AAEL,SAAgB,oBAAoB,CAClC,aAAwC;IAExC,MAAM,IAAI,GAAqB;QAC7B,mBAAmB,EAAE,IAAI;KAC1B,CAAC;IAEF,yEAAyE;IACzE,IAAI,aAAa,IAAI,aAAa,KAAK,MAAM,EAAE;QAC7C,IAAI,CAAC,cAAc,GAAG,wBAAwB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;KACnE;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAbD,oDAaC;AAEY,QAAA,QAAQ,GAAG;IACtB,IAAI,EAAE,CAAC,MAAM,CAAC;IACd,OAAO,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,YAAY,CAAC;IAC7C,MAAM,EAAE,CAAC,QAAQ,CAAC;IAClB,MAAM,EAAE,CAAC,UAAU,EAAE,YAAY,CAAC;IAClC,GAAG,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,YAAY,CAAC;CAClD,CAAC;AAEW,QAAA,WAAW,GAA+C;IACrE,KAAK,EAAE,YAAY;IACnB,GAAG,EAAE,QAAQ;IACb,MAAM,EAAE,YAAY;CACrB,CAAC;AAEF,SAAgB,MAAM,CAAC,EAAc;IACnC,OAAO;QACL,MAAM,EAAE,EAAE,CAAC,EAAE;QACb,UAAU,EAAE,IAAA,yBAAe,EAAC,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC;QAC5C,YAAY,EAAE,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI;QACrC,YAAY,EAAE,EAAE,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI;QAC1C,KAAK,EAAE,EAAE,CAAC,KAAK;QACf,KAAK,EAAE,gBAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC;YACxC,CAAC,CAAC,0BAA0B,CAAC,QAAQ;YACrC,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,WAAW,EAAE;QAC3B,SAAS,EAAE,EAAE,CAAC,UAAU;KACzB,CAAC;AACJ,CAAC;AAZD,wBAYC","sourcesContent":["import type { MergeStrategy } from '../../../config/types';\nimport type { BranchStatus } from '../../../types';\nimport { getPrBodyStruct } from '../pr-body';\nimport type { Pr } from '../types';\nimport type {\n  BitbucketBranchState,\n  BitbucketMergeStrategy,\n  MergeRequestBody,\n  PrResponse,\n  RepoInfo,\n  RepoInfoBody,\n} from './types';\n\nexport function repoInfoTransformer(repoInfoBody: RepoInfoBody): RepoInfo {\n  return {\n    isFork: !!repoInfoBody.parent,\n    owner: repoInfoBody.owner.username,\n    mainbranch: repoInfoBody.mainbranch.name,\n    mergeMethod: 'merge',\n    has_issues: repoInfoBody.has_issues,\n    uuid: repoInfoBody.uuid,\n    is_private: repoInfoBody.is_private,\n  };\n}\n\nconst bitbucketMergeStrategies: Map<MergeStrategy, BitbucketMergeStrategy> =\n  new Map([\n    ['squash', 'squash'],\n    ['merge-commit', 'merge_commit'],\n    ['fast-forward', 'fast_forward'],\n  ]);\n\nexport function mergeBodyTransformer(\n  mergeStrategy: MergeStrategy | undefined\n): MergeRequestBody {\n  const body: MergeRequestBody = {\n    close_source_branch: true,\n  };\n\n  // The `auto` strategy will use the strategy configured inside Bitbucket.\n  if (mergeStrategy && mergeStrategy !== 'auto') {\n    body.merge_strategy = bitbucketMergeStrategies.get(mergeStrategy);\n  }\n\n  return body;\n}\n\nexport const prStates = {\n  open: ['OPEN'],\n  notOpen: ['MERGED', 'DECLINED', 'SUPERSEDED'],\n  merged: ['MERGED'],\n  closed: ['DECLINED', 'SUPERSEDED'],\n  all: ['OPEN', 'MERGED', 'DECLINED', 'SUPERSEDED'],\n};\n\nexport const buildStates: Record<BranchStatus, BitbucketBranchState> = {\n  green: 'SUCCESSFUL',\n  red: 'FAILED',\n  yellow: 'INPROGRESS',\n};\n\nexport function prInfo(pr: PrResponse): Pr {\n  return {\n    number: pr.id,\n    bodyStruct: getPrBodyStruct(pr.summary?.raw),\n    sourceBranch: pr.source?.branch?.name,\n    targetBranch: pr.destination?.branch?.name,\n    title: pr.title,\n    state: prStates.closed?.includes(pr.state)\n      ? /* istanbul ignore next */ 'closed'\n      : pr.state?.toLowerCase(),\n    createdAt: pr.created_on,\n  };\n}\n"]}