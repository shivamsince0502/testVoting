{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../../lib/modules/platform/github/common.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,wCAA6C;AAG7C;;GAEG;AACH,SAAgB,YAAY,CAAC,EAAY;IACvC,MAAM,UAAU,GAAG,EAAE,CAAC,UAAU,IAAI,IAAA,yBAAe,EAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IAC7D,MAAM,MAAM,GAAS;QACnB,MAAM,EAAE,EAAE,CAAC,MAAM;QACjB,YAAY,EAAE,EAAE,CAAC,IAAI,EAAE,GAAG;QAC1B,KAAK,EAAE,EAAE,CAAC,KAAK;QACf,KAAK,EACH,EAAE,CAAC,KAAK,KAAK,QAAQ,IAAI,YAAE,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK;QACxE,UAAU;QACV,UAAU,EAAE,EAAE,CAAC,UAAU;QACzB,OAAO,EAAE,EAAE,CAAC,OAAO;KACpB,CAAC;IAEF,IAAI,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE;QAChB,MAAM,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC;KAC1B;IAED,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE;QAC5B,MAAM,CAAC,UAAU,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;KAC5C;IAED,IAAI,EAAE,CAAC,MAAM,EAAE;QACb,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;KACnD;IAED,IAAI,EAAE,CAAC,QAAQ,IAAI,YAAE,CAAC,aAAa,CAAC,EAAE,CAAC,SAAS,CAAC,EAAE;QACjD,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC;KAC5B;IAED,IAAI,EAAE,CAAC,mBAAmB,EAAE;QAC1B,MAAM,CAAC,SAAS,GAAG,EAAE,CAAC,mBAAmB;aACtC,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,CAAC;aACzB,MAAM,CAAC,YAAE,CAAC,cAAc,CAAC,CAAC;KAC9B;IAED,IAAI,EAAE,CAAC,UAAU,EAAE;QACjB,MAAM,CAAC,SAAS,GAAG,EAAE,CAAC,UAAU,CAAC;KAClC;IAED,IAAI,EAAE,CAAC,SAAS,EAAE;QAChB,MAAM,CAAC,QAAQ,GAAG,EAAE,CAAC,SAAS,CAAC;KAChC;IAED,IAAI,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE;QAChB,MAAM,CAAC,YAAY,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC;KACnC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAhDD,oCAgDC","sourcesContent":["import is from '@sindresorhus/is';\nimport { getPrBodyStruct } from '../pr-body';\nimport type { GhPr, GhRestPr } from './types';\n\n/**\n * @see https://docs.github.com/en/rest/reference/pulls#list-pull-requests\n */\nexport function coerceRestPr(pr: GhRestPr): GhPr {\n  const bodyStruct = pr.bodyStruct ?? getPrBodyStruct(pr.body);\n  const result: GhPr = {\n    number: pr.number,\n    sourceBranch: pr.head?.ref,\n    title: pr.title,\n    state:\n      pr.state === 'closed' && is.string(pr.merged_at) ? 'merged' : pr.state,\n    bodyStruct,\n    updated_at: pr.updated_at,\n    node_id: pr.node_id,\n  };\n\n  if (pr.head?.sha) {\n    result.sha = pr.head.sha;\n  }\n\n  if (pr.head?.repo?.full_name) {\n    result.sourceRepo = pr.head.repo.full_name;\n  }\n\n  if (pr.labels) {\n    result.labels = pr.labels.map(({ name }) => name);\n  }\n\n  if (pr.assignee || is.nonEmptyArray(pr.assignees)) {\n    result.hasAssignees = true;\n  }\n\n  if (pr.requested_reviewers) {\n    result.reviewers = pr.requested_reviewers\n      .map(({ login }) => login)\n      .filter(is.nonEmptyString);\n  }\n\n  if (pr.created_at) {\n    result.createdAt = pr.created_at;\n  }\n\n  if (pr.closed_at) {\n    result.closedAt = pr.closed_at;\n  }\n\n  if (pr.base?.ref) {\n    result.targetBranch = pr.base.ref;\n  }\n\n  return result;\n}\n"]}