{"version":3,"file":"azure-helper.js","sourceRoot":"","sources":["../../../../lib/modules/platform/azure/azure-helper.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GitCommit,\n  GitPullRequestMergeStrategy,\n  GitRef,\n} from 'azure-devops-node-api/interfaces/GitInterfaces.js';\nimport { logger } from '../../../logger';\nimport { streamToString } from '../../../util/streams';\nimport { getNewBranchName } from '../util';\nimport * as azureApi from './azure-got-wrapper';\nimport { WrappedExceptionSchema } from './schema';\nimport {\n  getBranchNameWithoutRefsPrefix,\n  getBranchNameWithoutRefsheadsPrefix,\n} from './util';\n\nconst mergePolicyGuid = 'fa4e907d-c16b-4a4c-9dfa-4916e5d171ab'; // Magic GUID for merge strategy policy configurations\n\nexport async function getRefs(\n  repoId: string,\n  branchName?: string\n): Promise<GitRef[]> {\n  logger.debug(`getRefs(${repoId}, ${branchName!})`);\n  const azureApiGit = await azureApi.gitApi();\n  const refs = await azureApiGit.getRefs(\n    repoId,\n    undefined,\n    getBranchNameWithoutRefsPrefix(branchName)\n  );\n  return refs;\n}\n\nexport interface AzureBranchObj {\n  name: string;\n  oldObjectId: string;\n}\n\nexport async function getAzureBranchObj(\n  repoId: string,\n  branchName: string,\n  from?: string\n): Promise<AzureBranchObj> {\n  const fromBranchName = getNewBranchName(from);\n  const refs = await getRefs(repoId, fromBranchName);\n  if (refs.length === 0) {\n    logger.debug(`getAzureBranchObj without a valid from, so initial commit.`);\n    // TODO: fix undefined\n    return {\n      name: getNewBranchName(branchName)!,\n      oldObjectId: '0000000000000000000000000000000000000000',\n    };\n  }\n  return {\n    // TODO: fix undefined (#7154)\n    name: getNewBranchName(branchName)!,\n    oldObjectId: refs[0].objectId!,\n  };\n}\n\n// if no branchName, look globally\nexport async function getFile(\n  repoId: string,\n  filePath: string,\n  branchName: string\n): Promise<string | null> {\n  logger.trace(`getFile(filePath=${filePath}, branchName=${branchName})`);\n  const azureApiGit = await azureApi.gitApi();\n  const item = await azureApiGit.getItemText(\n    repoId,\n    filePath,\n    undefined,\n    undefined,\n    0, // because we look for 1 file\n    false,\n    false,\n    true,\n    {\n      versionType: 0, // branch\n      versionOptions: 0,\n      version: getBranchNameWithoutRefsheadsPrefix(branchName),\n    }\n  );\n\n  if (item?.readable) {\n    const fileContent = await streamToString(item);\n    try {\n      const result = await WrappedExceptionSchema.safeParseAsync(\n        JSON.parse(fileContent)\n      );\n      if (result.success) {\n        if (result.data.typeKey === 'GitItemNotFoundException') {\n          logger.warn(`Unable to find file ${filePath}`);\n          return null;\n        }\n        if (result.data.typeKey === 'GitUnresolvableToCommitException') {\n          logger.warn(`Unable to find branch ${branchName}`);\n          return null;\n        }\n      }\n    } catch (error) {\n      // it 's not a JSON, so I send the content directly with the line under\n    }\n\n    return fileContent;\n  }\n  return null; // no file found\n}\n\nexport async function getCommitDetails(\n  commit: string,\n  repoId: string\n): Promise<GitCommit> {\n  logger.debug(`getCommitDetails(${commit}, ${repoId})`);\n  const azureApiGit = await azureApi.gitApi();\n  const results = await azureApiGit.getCommit(commit, repoId);\n  return results;\n}\n\nexport async function getMergeMethod(\n  repoId: string,\n  project: string,\n  branchRef?: string | null,\n  defaultBranch?: string\n): Promise<GitPullRequestMergeStrategy> {\n  type Scope = {\n    repositoryId: string;\n    refName?: string;\n    matchKind: 'Prefix' | 'Exact' | 'DefaultBranch';\n  };\n  const isRelevantScope = (scope: Scope): boolean => {\n    if (\n      scope.matchKind === 'DefaultBranch' &&\n      // TODO: types (#7154)\n      (!branchRef || branchRef === `refs/heads/${defaultBranch!}`)\n    ) {\n      return true;\n    }\n    if (scope.repositoryId !== repoId) {\n      return false;\n    }\n    if (!branchRef) {\n      return true;\n    }\n    // TODO #7154\n    return scope.matchKind === 'Exact'\n      ? scope.refName === branchRef\n      : branchRef.startsWith(scope.refName!);\n  };\n\n  const policyConfigurations = (\n    await (\n      await azureApi.policyApi()\n    ).getPolicyConfigurations(project, undefined, mergePolicyGuid)\n  )\n    .filter((p) => p.settings.scope.some(isRelevantScope))\n    .map((p) => p.settings)[0];\n\n  logger.trace(\n    // TODO: types (#7154)\n    `getMergeMethod(${repoId}, ${project}, ${branchRef!}) determining mergeMethod from matched policy:\\n${JSON.stringify(\n      policyConfigurations,\n      null,\n      4\n    )}`\n  );\n\n  try {\n    // TODO: fix me, wrong types\n    return Object.keys(policyConfigurations)\n      .map(\n        (p) =>\n          GitPullRequestMergeStrategy[\n            p.slice(5) as never\n          ] as never as GitPullRequestMergeStrategy\n      )\n      .find((p) => p)!;\n  } catch (err) {\n    return GitPullRequestMergeStrategy.NoFastForward;\n  }\n}\n"]}