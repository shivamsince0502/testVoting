{"version":3,"file":"http.js","sourceRoot":"","sources":["../../../../lib/modules/platform/gitlab/http.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AACzC,sDAAuD;AAG1C,QAAA,SAAS,GAAG,IAAI,mBAAU,EAAE,CAAC;AAEnC,KAAK,UAAU,SAAS,CAAC,QAAgB;IAC9C,OAAO,CACL,MAAM,iBAAS,CAAC,OAAO,CAAmB,kBAAkB,QAAQ,EAAE,CAAC,CACxE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AACf,CAAC;AAJD,8BAIC;AAEM,KAAK,UAAU,gBAAgB,CAAC,KAAa;IAClD,MAAM,YAAY,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAC/C,MAAM,OAAO,GAAG,CACd,MAAM,iBAAS,CAAC,OAAO,CAAe,UAAU,YAAY,UAAU,CAAC,CACxE,CAAC,IAAI,CAAC;IACP,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AAClC,CAAC;AAND,4CAMC;AAEM,KAAK,UAAU,UAAU,CAAC,IAAY;IAC3C,IAAI;QACF,MAAM,GAAG,GAAG,UAAU,IAAI,SAAS,CAAC;QACpC,MAAM,UAAU,GAAG,CAAC,MAAM,iBAAS,CAAC,OAAO,CAAmB,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;QACzE,OAAO,UAAU,CAAC,YAAY,KAAK,MAAM,CAAC;KAC3C;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,2BAA2B,CAAC,CAAC;QAClD,OAAO,KAAK,CAAC;KACd;AACH,CAAC;AATD,gCASC","sourcesContent":["import { logger } from '../../../logger';\nimport { GitlabHttp } from '../../../util/http/gitlab';\nimport type { GitLabUser, GitlabUserStatus } from './types';\n\nexport const gitlabApi = new GitlabHttp();\n\nexport async function getUserID(username: string): Promise<number> {\n  return (\n    await gitlabApi.getJson<{ id: number }[]>(`users?username=${username}`)\n  ).body[0].id;\n}\n\nexport async function getMemberUserIDs(group: string): Promise<number[]> {\n  const groupEncoded = encodeURIComponent(group);\n  const members = (\n    await gitlabApi.getJson<GitLabUser[]>(`groups/${groupEncoded}/members`)\n  ).body;\n  return members.map((u) => u.id);\n}\n\nexport async function isUserBusy(user: string): Promise<boolean> {\n  try {\n    const url = `/users/${user}/status`;\n    const userStatus = (await gitlabApi.getJson<GitlabUserStatus>(url)).body;\n    return userStatus.availability === 'busy';\n  } catch (err) {\n    logger.warn({ err }, 'Failed to get user status');\n    return false;\n  }\n}\n"]}