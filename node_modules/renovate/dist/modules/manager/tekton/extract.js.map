{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/tekton/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { loadAll } from 'js-yaml';\nimport { logger } from '../../../logger';\nimport { coerceArray } from '../../../util/array';\nimport { getDep } from '../dockerfile/extract';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport type {\n  TektonBundle,\n  TektonResolverParamsField,\n  TektonResource,\n  TektonResourceSpec,\n} from './types';\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string\n): PackageFileContent | null {\n  logger.trace(`tekton.extractPackageFile(${packageFile})`);\n  const deps: PackageDependency[] = [];\n  let docs: TektonResource[];\n  try {\n    docs = loadAll(content) as TektonResource[];\n  } catch (err) {\n    logger.debug(\n      { err, packageFile },\n      'Failed to parse YAML resource as a Tekton resource'\n    );\n    return null;\n  }\n  for (const doc of docs) {\n    deps.push(...getDeps(doc));\n  }\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n\nfunction getDeps(doc: TektonResource): PackageDependency[] {\n  const deps: PackageDependency[] = [];\n  if (is.falsy(doc)) {\n    return deps;\n  }\n\n  // Handle TaskRun resource\n  addDep(doc.spec?.taskRef, deps);\n  addStepImageSpec(doc.spec?.taskSpec, deps);\n\n  // Handle Task resource\n  addStepImageSpec(doc.spec, deps);\n\n  // Handle PipelineRun resource\n  addDep(doc.spec?.pipelineRef, deps);\n\n  // Handle PipelineRun resource with inline Pipeline definition\n  const pipelineSpec = doc.spec?.pipelineSpec;\n  if (is.truthy(pipelineSpec)) {\n    deps.push(...getDeps({ spec: pipelineSpec }));\n  }\n\n  // Handle regular tasks of Pipeline resource\n  for (const task of [\n    ...coerceArray(doc.spec?.tasks),\n    ...coerceArray(doc.spec?.finally),\n  ]) {\n    addDep(task.taskRef, deps);\n    addStepImageSpec(task.taskSpec, deps);\n  }\n\n  // Handle TriggerTemplate resource\n  for (const resource of coerceArray(doc.spec?.resourcetemplates)) {\n    deps.push(...getDeps(resource));\n  }\n\n  // Handle list of TektonResources\n  for (const item of coerceArray(doc.items)) {\n    deps.push(...getDeps(item));\n  }\n\n  return deps;\n}\n\nfunction addDep(ref: TektonBundle, deps: PackageDependency[]): void {\n  if (is.falsy(ref)) {\n    return;\n  }\n  let imageRef: string | undefined;\n\n  // First, find a bundle reference from the Bundle resolver\n  if (ref.resolver === 'bundles') {\n    imageRef = getBundleValue(ref.params);\n    if (is.nullOrUndefined(imageRef)) {\n      // Fallback to the deprecated Bundle resolver attribute\n      imageRef = getBundleValue(ref.resource);\n    }\n  }\n\n  if (is.nullOrUndefined(imageRef)) {\n    // Fallback to older style bundle reference\n    imageRef = ref.bundle;\n  }\n\n  const dep = getDep(imageRef);\n  dep.depType = 'tekton-bundle';\n  logger.trace(\n    {\n      depName: dep.depName,\n      currentValue: dep.currentValue,\n      currentDigest: dep.currentDigest,\n    },\n    'Tekton bundle dependency found'\n  );\n  deps.push(dep);\n}\n\nfunction addStepImageSpec(\n  spec: TektonResourceSpec | undefined,\n  deps: PackageDependency[]\n): void {\n  if (is.nullOrUndefined(spec)) {\n    return;\n  }\n\n  const steps = [\n    ...coerceArray(spec.steps),\n    ...coerceArray(spec.sidecars),\n    spec.stepTemplate,\n  ];\n  for (const step of steps) {\n    if (is.nullOrUndefined(step?.image)) {\n      continue;\n    }\n    const dep = getDep(step?.image);\n    dep.depType = 'tekton-step-image';\n    logger.trace(\n      {\n        depName: dep.depName,\n        currentValue: dep.currentValue,\n        currentDigest: dep.currentDigest,\n      },\n      'Tekton step image dependency found'\n    );\n    deps.push(dep);\n  }\n}\n\nfunction getBundleValue(\n  fields: TektonResolverParamsField[] | undefined\n): string | undefined {\n  for (const field of coerceArray(fields)) {\n    if (field.name === 'bundle') {\n      return field.value;\n    }\n  }\n  return undefined;\n}\n"]}