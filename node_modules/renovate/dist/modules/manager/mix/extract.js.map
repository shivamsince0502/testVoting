{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/mix/extract.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AACzC,yCAA6E;AAC7E,+CAA0D;AAC1D,wDAA8D;AAC9D,8DAAoE;AACpE,8CAAqD;AAGrD,MAAM,gBAAgB,GAAG,IAAA,aAAK,EAAC,kBAAkB,CAAC,CAAC;AACnD,MAAM,cAAc,GAAG,IAAA,aAAK,EAC1B,2EAA2E,CAC5E,CAAC;AACF,MAAM,SAAS,GAAG,IAAA,aAAK,EAAC,0BAA0B,CAAC,CAAC;AACpD,MAAM,YAAY,GAAG,IAAA,aAAK,EAAC,6BAA6B,CAAC,CAAC;AAC1D,MAAM,SAAS,GAAG,IAAA,aAAK,EAAC,0BAA0B,CAAC,CAAC;AACpD,MAAM,iBAAiB,GAAG,IAAA,aAAK,EAAC,qCAAqC,CAAC,CAAC;AACvE,MAAM,kBAAkB,GAAG,IAAA,aAAK,EAAC,mCAAmC,CAAC,CAAC;AACtE,MAAM,kBAAkB,GAAG,IAAA,aAAK,EAAC,MAAM,CAAC,CAAC;AAElC,KAAK,UAAU,kBAAkB,CACtC,OAAe,EACf,WAAmB;IAEnB,eAAM,CAAC,KAAK,CAAC,0BAA0B,WAAW,GAAG,CAAC,CAAC;IACvD,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,MAAM,UAAU,GAAG,OAAO;SACvB,KAAK,CAAC,oBAAY,CAAC;SACnB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC,CAAC;IACvD,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,UAAU,CAAC,MAAM,EAAE,UAAU,IAAI,CAAC,EAAE;QACxE,IAAI,UAAU,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE;YAClD,IAAI,SAAS,GAAG,EAAE,CAAC;YACnB,GAAG;gBACD,SAAS,IAAI,UAAU,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;gBAC3C,UAAU,IAAI,CAAC,CAAC;aACjB,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YAClD,IAAI,cAAc,GAAG,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,CAAC;YAC5D,OAAO,cAAc,EAAE;gBACrB,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,cAAc,CAAC;gBAClD,MAAM,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC;gBACtD,MAAM,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC;gBAChD,MAAM,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC;gBAChD,MAAM,WAAW,GAAG,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC;gBAChE,MAAM,YAAY,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC;gBAElE,IAAI,GAAsB,CAAC;gBAE3B,IAAI,GAAG,IAAI,MAAM,EAAE;oBACjB,GAAG,GAAG;wBACJ,OAAO,EAAE,GAAG;wBACZ,aAAa,EAAE,GAAG;wBAClB,YAAY,EAAE,WAAW;wBACzB,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC,4BAAiB,CAAC,EAAE,CAAC,CAAC,CAAC,kCAAoB,CAAC,EAAE;wBAChE,WAAW,EAAE,GAAG,IAAI,MAAM;qBAC3B,CAAC;iBACH;qBAAM;oBACL,GAAG,GAAG;wBACJ,OAAO,EAAE,GAAG;wBACZ,YAAY,EAAE,WAAW;wBACzB,UAAU,EAAE,mBAAa,CAAC,EAAE;wBAC5B,WAAW,EAAE,YAAY,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,YAAY,EAAE,CAAC,CAAC,CAAC,GAAG;qBAC3D,CAAC;oBACF,IAAI,WAAW,EAAE,UAAU,CAAC,IAAI,CAAC,EAAE;wBACjC,GAAG,CAAC,cAAc,GAAG,WAAW,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;qBAC/D;iBACF;gBAED,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACf,cAAc,GAAG,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,CAAC;aACzD;SACF;KACF;IACD,MAAM,GAAG,GAAuB,EAAE,IAAI,EAAE,CAAC;IACzC,MAAM,YAAY,GAChB,CAAC,MAAM,IAAA,6BAAwB,EAAC,WAAW,EAAE,UAAU,CAAC,CAAC,IAAI,UAAU,CAAC;IAC1E,qBAAqB;IACrB,IAAI,MAAM,IAAA,oBAAe,EAAC,YAAY,CAAC,EAAE;QACvC,GAAG,CAAC,SAAS,GAAG,CAAC,YAAY,CAAC,CAAC;KAChC;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AA5DD,gDA4DC","sourcesContent":["import { logger } from '../../../logger';\nimport { findLocalSiblingOrParent, localPathExists } from '../../../util/fs';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { GitTagsDatasource } from '../../datasource/git-tags';\nimport { GithubTagsDatasource } from '../../datasource/github-tags';\nimport { HexDatasource } from '../../datasource/hex';\nimport type { PackageDependency, PackageFileContent } from '../types';\n\nconst depSectionRegExp = regEx(/defp\\s+deps.*do/g);\nconst depMatchRegExp = regEx(\n  /{:(?<app>\\w+)(\\s*,\\s*\"(?<requirement>[^\"]+)\")?(\\s*,\\s*(?<opts>[^}]+))?}/gm\n);\nconst gitRegexp = regEx(/git:\\s*\"(?<value>[^\"]+)\"/);\nconst githubRegexp = regEx(/github:\\s*\"(?<value>[^\"]+)\"/);\nconst refRegexp = regEx(/ref:\\s*\"(?<value>[^\"]+)\"/);\nconst branchOrTagRegexp = regEx(/(?:branch|tag):\\s*\"(?<value>[^\"]+)\"/);\nconst organizationRegexp = regEx(/organization:\\s*\"(?<value>[^\"]+)\"/);\nconst commentMatchRegExp = regEx(/#.*$/);\n\nexport async function extractPackageFile(\n  content: string,\n  packageFile: string\n): Promise<PackageFileContent | null> {\n  logger.trace(`mix.extractPackageFile(${packageFile})`);\n  const deps: PackageDependency[] = [];\n  const contentArr = content\n    .split(newlineRegex)\n    .map((line) => line.replace(commentMatchRegExp, ''));\n  for (let lineNumber = 0; lineNumber < contentArr.length; lineNumber += 1) {\n    if (contentArr[lineNumber].match(depSectionRegExp)) {\n      let depBuffer = '';\n      do {\n        depBuffer += contentArr[lineNumber] + '\\n';\n        lineNumber += 1;\n      } while (!contentArr[lineNumber].includes('end'));\n      let depMatchGroups = depMatchRegExp.exec(depBuffer)?.groups;\n      while (depMatchGroups) {\n        const { app, requirement, opts } = depMatchGroups;\n        const github = githubRegexp.exec(opts)?.groups?.value;\n        const git = gitRegexp.exec(opts)?.groups?.value;\n        const ref = refRegexp.exec(opts)?.groups?.value;\n        const branchOrTag = branchOrTagRegexp.exec(opts)?.groups?.value;\n        const organization = organizationRegexp.exec(opts)?.groups?.value;\n\n        let dep: PackageDependency;\n\n        if (git ?? github) {\n          dep = {\n            depName: app,\n            currentDigest: ref,\n            currentValue: branchOrTag,\n            datasource: git ? GitTagsDatasource.id : GithubTagsDatasource.id,\n            packageName: git ?? github,\n          };\n        } else {\n          dep = {\n            depName: app,\n            currentValue: requirement,\n            datasource: HexDatasource.id,\n            packageName: organization ? `${app}:${organization}` : app,\n          };\n          if (requirement?.startsWith('==')) {\n            dep.currentVersion = requirement.replace(regEx(/^==\\s*/), '');\n          }\n        }\n\n        deps.push(dep);\n        depMatchGroups = depMatchRegExp.exec(depBuffer)?.groups;\n      }\n    }\n  }\n  const res: PackageFileContent = { deps };\n  const lockFileName =\n    (await findLocalSiblingOrParent(packageFile, 'mix.lock')) ?? 'mix.lock';\n  // istanbul ignore if\n  if (await localPathExists(lockFileName)) {\n    res.lockFiles = [lockFileName];\n  }\n  return res;\n}\n"]}