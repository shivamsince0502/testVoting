{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/woodpecker/extract.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,qCAA+B;AAC/B,4CAAyC;AACzC,mDAA+C;AAI/C,SAAgB,kBAAkB,CAChC,OAAe,EACf,WAAmB,EACnB,aAA4B;IAE5B,eAAM,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;IAChD,IAAI,MAAwB,CAAC;IAC7B,IAAI;QACF,uBAAuB;QACvB,MAAM,GAAG,IAAA,cAAI,EAAC,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAqB,CAAC;QAC3D,IAAI,CAAC,MAAM,EAAE;YACX,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,EACf,2DAA2D,CAC5D,CAAC;YACF,OAAO,IAAI,CAAC;SACb;QACD,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC9B,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,IAAI,EAAE,OAAO,MAAM,EAAE,EACpC,sDAAsD,CACvD,CAAC;YACF,OAAO,IAAI,CAAC;SACb;KACF;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,GAAG,EAAE,EACpB,oDAAoD,CACrD,CAAC;QACF,OAAO,IAAI,CAAC;KACb;IAED,0EAA0E;IAC1E,sDAAsD;IACtD,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,IAAI,EAAE,CAAC;SAC9C,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,YAAE,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SACxC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAA,gBAAM,EAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,aAAa,CAAC,eAAe,CAAC,CAAC,CAAC;IAE1E,eAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,EAAE,gCAAgC,CAAC,CAAC;IACzD,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AACvC,CAAC;AAxCD,gDAwCC","sourcesContent":["import is from '@sindresorhus/is';\nimport { load } from 'js-yaml';\nimport { logger } from '../../../logger';\nimport { getDep } from '../dockerfile/extract';\nimport type { ExtractConfig, PackageFileContent } from '../types';\nimport type { WoodpeckerConfig } from './types';\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n  extractConfig: ExtractConfig\n): PackageFileContent | null {\n  logger.debug('woodpecker.extractPackageFile()');\n  let config: WoodpeckerConfig;\n  try {\n    // TODO: fix me (#9610)\n    config = load(content, { json: true }) as WoodpeckerConfig;\n    if (!config) {\n      logger.debug(\n        { packageFile },\n        'Null config when parsing Woodpecker Configuration content'\n      );\n      return null;\n    }\n    if (typeof config !== 'object') {\n      logger.debug(\n        { packageFile, type: typeof config },\n        'Unexpected type for Woodpecker Configuration content'\n      );\n      return null;\n    }\n  } catch (err) {\n    logger.debug(\n      { packageFile, err },\n      'Error parsing Woodpecker Configuration config YAML'\n    );\n    return null;\n  }\n\n  // Image name/tags for services are only eligible for update if they don't\n  // use variables and if the image is not built locally\n  const deps = Object.values(config.pipeline ?? {})\n    .filter((step) => is.string(step?.image))\n    .map((step) => getDep(step.image, true, extractConfig.registryAliases));\n\n  logger.trace({ deps }, 'Woodpecker Configuration image');\n  return deps.length ? { deps } : null;\n}\n"]}