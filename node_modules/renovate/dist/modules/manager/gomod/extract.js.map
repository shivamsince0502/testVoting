{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gomod/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import semver from 'semver';\nimport { logger } from '../../../logger';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { GoDatasource } from '../../datasource/go';\nimport { GolangVersionDatasource } from '../../datasource/golang-version';\nimport { isVersion } from '../../versioning/semver';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport type { MultiLineParseResult } from './types';\n\nfunction getDep(\n  lineNumber: number,\n  match: RegExpMatchArray,\n  type: string\n): PackageDependency {\n  const [, , currentValue] = match;\n  let [, depName] = match;\n  depName = depName.replace(regEx(/\"/g), '');\n  const dep: PackageDependency = {\n    managerData: {\n      lineNumber,\n    },\n    depName,\n    depType: type,\n    currentValue,\n  };\n  if (isVersion(currentValue)) {\n    dep.datasource = GoDatasource.id;\n  } else {\n    dep.skipReason = 'unsupported-version';\n  }\n  const digestMatch = regEx(GoDatasource.pversionRegexp).exec(currentValue);\n  if (digestMatch?.groups?.digest) {\n    dep.currentDigest = digestMatch.groups.digest;\n    dep.digestOneAndOnly = true;\n  }\n  return dep;\n}\n\nfunction getGoDep(lineNumber: number, goVer: string): PackageDependency {\n  return {\n    managerData: {\n      lineNumber,\n    },\n    depName: 'go',\n    depType: 'golang',\n    currentValue: goVer,\n    datasource: GolangVersionDatasource.id,\n    versioning: 'go-mod-directive',\n  };\n}\n\nexport function extractPackageFile(\n  content: string,\n  packageFile?: string\n): PackageFileContent | null {\n  logger.trace({ content }, 'gomod.extractPackageFile()');\n  const deps: PackageDependency[] = [];\n  try {\n    const lines = content.split(newlineRegex);\n    for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {\n      const line = lines[lineNumber];\n      const goVer = line.startsWith('go ') ? line.replace('go ', '') : null;\n      if (goVer && semver.validRange(goVer)) {\n        const dep = getGoDep(lineNumber, goVer);\n        deps.push(dep);\n      }\n      const replaceMatch = regEx(\n        /^replace\\s+[^\\s]+[\\s]+[=][>]\\s+([^\\s]+)\\s+([^\\s]+)/\n      ).exec(line);\n      if (replaceMatch) {\n        const dep = getDep(lineNumber, replaceMatch, 'replace');\n        deps.push(dep);\n      }\n      const requireMatch = regEx(/^require\\s+([^\\s]+)\\s+([^\\s]+)/).exec(line);\n      if (requireMatch) {\n        if (line.endsWith('// indirect')) {\n          logger.trace({ lineNumber }, `indirect line: \"${line}\"`);\n          const dep = getDep(lineNumber, requireMatch, 'indirect');\n          dep.enabled = false;\n          deps.push(dep);\n        } else {\n          logger.trace({ lineNumber }, `require line: \"${line}\"`);\n          const dep = getDep(lineNumber, requireMatch, 'require');\n          deps.push(dep);\n        }\n      }\n      if (line.trim() === 'require (') {\n        logger.trace(`Matched multi-line require on line ${lineNumber}`);\n        const matcher = regEx(/^\\s+([^\\s]+)\\s+([^\\s]+)/);\n        const { reachedLine, detectedDeps } = parseMultiLine(\n          lineNumber,\n          lines,\n          matcher,\n          'require'\n        );\n        lineNumber = reachedLine;\n        deps.push(...detectedDeps);\n      } else if (line.trim() === 'replace (') {\n        logger.trace(`Matched multi-line replace on line ${lineNumber}`);\n        const matcher = regEx(/^\\s+[^\\s]+[\\s]+[=][>]\\s+([^\\s]+)\\s+([^\\s]+)/);\n        const { reachedLine, detectedDeps } = parseMultiLine(\n          lineNumber,\n          lines,\n          matcher,\n          'replace'\n        );\n        lineNumber = reachedLine;\n        deps.push(...detectedDeps);\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err, packageFile }, 'Error extracting go modules');\n  }\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n\nfunction parseMultiLine(\n  startingLine: number,\n  lines: string[],\n  matchRegex: RegExp,\n  blockType: 'require' | 'replace'\n): MultiLineParseResult {\n  const deps: PackageDependency[] = [];\n  let lineNumber = startingLine;\n  let line = '';\n  do {\n    lineNumber += 1;\n    line = lines[lineNumber];\n    const multiMatch = matchRegex.exec(line);\n    logger.trace(`${blockType}: \"${line}\"`);\n    if (multiMatch && !line.endsWith('// indirect')) {\n      logger.trace({ lineNumber }, `${blockType} line: \"${line}\"`);\n      const dep = getDep(lineNumber, multiMatch, blockType);\n      dep.managerData!.multiLine = true;\n      deps.push(dep);\n    } else if (multiMatch && line.endsWith('// indirect')) {\n      logger.trace({ lineNumber }, `${blockType} indirect line: \"${line}\"`);\n      const dep = getDep(lineNumber, multiMatch, 'indirect');\n      dep.managerData!.multiLine = true;\n      dep.enabled = false;\n      deps.push(dep);\n    } else if (line.trim() !== ')') {\n      logger.trace(`No multi-line match: ${line}`);\n    }\n  } while (line.trim() !== ')');\n  return { reachedLine: lineNumber, detectedDeps: deps };\n}\n"]}