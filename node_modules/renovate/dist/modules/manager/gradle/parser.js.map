{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gradle/parser.ts"],"names":[],"mappings":"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","sourcesContent":["import { lang, query as q } from 'good-enough-parser';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport type { PackageDependency } from '../types';\nimport { qApplyFrom } from './parser/apply-from';\nimport { qAssignments } from './parser/assignments';\nimport { qDependencies, qLongFormDep } from './parser/dependencies';\nimport { setParseGradleFunc } from './parser/handlers';\nimport { qKotlinMultiObjectVarAssignment } from './parser/objects';\nimport { qPlugins } from './parser/plugins';\nimport { qRegistryUrls } from './parser/registry-urls';\nimport { qVersionCatalogs } from './parser/version-catalogs';\nimport type {\n  Ctx,\n  GradleManagerData,\n  PackageRegistry,\n  PackageVariables,\n  ParseGradleResult,\n} from './types';\nimport { isDependencyString, parseDependencyString } from './utils';\n\nconst groovy = lang.createLang('groovy');\nconst ctx: Ctx = {\n  packageFile: '',\n  fileContents: {},\n  recursionDepth: 0,\n\n  globalVars: {},\n  deps: [],\n  registryUrls: [],\n\n  varTokens: [],\n  tmpNestingDepth: [],\n  tmpTokenStore: {},\n  tokenMap: {},\n};\n\nsetParseGradleFunc(parseGradle);\n\nexport function parseGradle(\n  input: string,\n  initVars: PackageVariables = {},\n  packageFile = '',\n  fileContents: Record<string, string | null> = {},\n  recursionDepth = 0\n): ParseGradleResult {\n  let vars: PackageVariables = { ...initVars };\n  const deps: PackageDependency<GradleManagerData>[] = [];\n  const urls: PackageRegistry[] = [];\n\n  const query = q.tree<Ctx>({\n    type: 'root-tree',\n    maxDepth: 32,\n    search: q.alt<Ctx>(\n      qAssignments,\n      qDependencies,\n      qPlugins,\n      qRegistryUrls,\n      qVersionCatalogs,\n      qLongFormDep,\n      qApplyFrom\n    ),\n  });\n\n  const parsedResult = groovy.query(input, query, {\n    ...ctx,\n    packageFile,\n    fileContents,\n    recursionDepth,\n    globalVars: vars,\n  });\n\n  if (parsedResult) {\n    deps.push(...parsedResult.deps);\n    vars = { ...vars, ...parsedResult.globalVars };\n    urls.push(...parsedResult.registryUrls);\n  }\n\n  return { deps, urls, vars };\n}\n\nexport function parseKotlinSource(\n  input: string,\n  initVars: PackageVariables = {},\n  packageFile = ''\n): { vars: PackageVariables; deps: PackageDependency<GradleManagerData>[] } {\n  let vars: PackageVariables = { ...initVars };\n  const deps: PackageDependency<GradleManagerData>[] = [];\n\n  const query = q.tree<Ctx>({\n    type: 'root-tree',\n    maxDepth: 1,\n    search: qKotlinMultiObjectVarAssignment,\n  });\n\n  const parsedResult = groovy.query(input, query, {\n    ...ctx,\n    packageFile,\n    globalVars: vars,\n  });\n\n  if (parsedResult) {\n    deps.push(...parsedResult.deps);\n    vars = { ...vars, ...parsedResult.globalVars };\n  }\n\n  return { deps, vars };\n}\n\nconst propWord = '[a-zA-Z_][a-zA-Z0-9_]*(?:\\\\.[a-zA-Z_][a-zA-Z0-9_]*)*';\nconst propRegex = regEx(\n  `^(?<leftPart>\\\\s*(?<key>${propWord})\\\\s*[= :]\\\\s*['\"]?)(?<value>[^\\\\s'\"]+)['\"]?\\\\s*$`\n);\n\nexport function parseProps(\n  input: string,\n  packageFile?: string\n): { vars: PackageVariables; deps: PackageDependency<GradleManagerData>[] } {\n  let offset = 0;\n  const vars: PackageVariables = {};\n  const deps: PackageDependency[] = [];\n  for (const line of input.split(newlineRegex)) {\n    const lineMatch = propRegex.exec(line);\n    if (lineMatch?.groups) {\n      const { key, value, leftPart } = lineMatch.groups;\n      if (isDependencyString(value)) {\n        const dep = parseDependencyString(value);\n        if (dep) {\n          deps.push({\n            ...dep,\n            managerData: {\n              fileReplacePosition:\n                offset + leftPart.length + dep.depName!.length + 1,\n              packageFile,\n            },\n          });\n        }\n      } else {\n        vars[key] = {\n          key,\n          value,\n          fileReplacePosition: offset + leftPart.length,\n          packageFile,\n        };\n      }\n    }\n    offset += line.length + 1;\n  }\n  return { vars, deps };\n}\n"]}