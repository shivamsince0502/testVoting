{"version":3,"file":"handlers.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/gradle/parser/handlers.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'node:url';\nimport upath from 'upath';\nimport { logger } from '../../../../logger';\nimport { getSiblingFileName } from '../../../../util/fs';\nimport { regEx } from '../../../../util/regex';\nimport type { PackageDependency } from '../../types';\nimport type { parseGradle as parseGradleCallback } from '../parser';\nimport type { Ctx, GradleManagerData } from '../types';\nimport { parseDependencyString } from '../utils';\nimport {\n  GRADLE_PLUGINS,\n  REGISTRY_URLS,\n  findVariable,\n  interpolateString,\n  loadFromTokenMap,\n} from './common';\n\n// needed to break circular dependency\nlet parseGradle: typeof parseGradleCallback;\nexport function setParseGradleFunc(func: typeof parseGradleCallback): void {\n  parseGradle = func;\n}\n\nexport function handleAssignment(ctx: Ctx): Ctx {\n  const key = loadFromTokenMap(ctx, 'keyToken')[0].value;\n  const valTokens = loadFromTokenMap(ctx, 'valToken');\n\n  if (valTokens.length > 1) {\n    // = template string with multiple variables\n    ctx.tokenMap.templateStringTokens = valTokens;\n    handleDepString(ctx);\n    delete ctx.tokenMap.templateStringTokens;\n  } else if (valTokens[0].type === 'symbol') {\n    // foo = bar || foo = \"${bar}\"\n    const varData = findVariable(valTokens[0].value, ctx);\n    if (varData) {\n      ctx.globalVars[key] = { ...varData };\n    }\n  } else {\n    // = string value\n    const dep = parseDependencyString(valTokens[0].value);\n    if (dep) {\n      dep.groupName = key;\n      dep.managerData = {\n        fileReplacePosition: valTokens[0].offset + dep.depName!.length + 1,\n        packageFile: ctx.packageFile,\n      };\n      ctx.deps.push(dep);\n    }\n\n    ctx.globalVars[key] = {\n      key,\n      value: valTokens[0].value,\n      fileReplacePosition: valTokens[0].offset,\n      packageFile: ctx.packageFile,\n    };\n  }\n\n  return ctx;\n}\n\nexport function handleDepString(ctx: Ctx): Ctx {\n  const stringTokens = loadFromTokenMap(ctx, 'templateStringTokens');\n\n  const templateString = interpolateString(stringTokens, ctx);\n  if (!templateString) {\n    return ctx;\n  }\n\n  const dep = parseDependencyString(templateString);\n  if (!dep) {\n    return ctx;\n  }\n\n  let packageFile: string | undefined;\n  let fileReplacePosition: number | undefined;\n  for (const token of stringTokens) {\n    if (token.type === 'symbol') {\n      const varData = findVariable(token.value, ctx);\n      if (varData) {\n        packageFile = varData.packageFile;\n        fileReplacePosition = varData.fileReplacePosition;\n        if (varData.value === dep.currentValue) {\n          dep.managerData = { fileReplacePosition, packageFile };\n          dep.groupName = varData.key;\n        }\n      }\n    }\n  }\n\n  if (!dep.managerData) {\n    const lastToken = stringTokens[stringTokens.length - 1];\n    if (\n      lastToken?.type === 'string-value' &&\n      dep.currentValue &&\n      lastToken.value.includes(dep.currentValue)\n    ) {\n      packageFile = ctx.packageFile;\n      if (stringTokens.length === 1) {\n        fileReplacePosition = lastToken.offset + dep.depName!.length + 1;\n      } else {\n        fileReplacePosition =\n          lastToken.offset + lastToken.value.lastIndexOf(dep.currentValue);\n      }\n      delete dep.groupName;\n    } else {\n      dep.skipReason = 'contains-variable';\n    }\n    dep.managerData = { fileReplacePosition, packageFile };\n  }\n\n  ctx.deps.push(dep);\n\n  return ctx;\n}\n\nexport function handleKotlinShortNotationDep(ctx: Ctx): Ctx {\n  const moduleNameTokens = loadFromTokenMap(ctx, 'artifactId');\n  const versionTokens = loadFromTokenMap(ctx, 'version');\n\n  const moduleName = interpolateString(moduleNameTokens, ctx);\n  const versionValue = interpolateString(versionTokens, ctx);\n  if (!moduleName || !versionValue) {\n    return ctx;\n  }\n\n  const groupIdArtifactId = `org.jetbrains.kotlin:kotlin-${moduleName}`;\n  const dep = parseDependencyString(`${groupIdArtifactId}:${versionValue}`);\n  if (!dep) {\n    return ctx;\n  }\n\n  dep.depName = moduleName;\n  dep.packageName = groupIdArtifactId;\n  dep.managerData = {\n    fileReplacePosition: versionTokens[0].offset,\n    packageFile: ctx.packageFile,\n  };\n\n  if (versionTokens.length > 1) {\n    // = template string with multiple variables\n    dep.skipReason = 'unspecified-version';\n  } else if (versionTokens[0].type === 'symbol') {\n    const varData = findVariable(versionTokens[0].value, ctx);\n    if (varData) {\n      dep.groupName = varData.key;\n      dep.currentValue = varData.value;\n      dep.managerData = {\n        fileReplacePosition: varData.fileReplacePosition,\n        packageFile: varData.packageFile,\n      };\n    }\n  }\n\n  ctx.deps.push(dep);\n\n  return ctx;\n}\n\nexport function handleLongFormDep(ctx: Ctx): Ctx {\n  const groupIdTokens = loadFromTokenMap(ctx, 'groupId');\n  const artifactIdTokens = loadFromTokenMap(ctx, 'artifactId');\n  const versionTokens = loadFromTokenMap(ctx, 'version');\n\n  const groupId = interpolateString(groupIdTokens, ctx);\n  const artifactId = interpolateString(artifactIdTokens, ctx);\n  const version = interpolateString(versionTokens, ctx);\n  if (!groupId || !artifactId || !version) {\n    return ctx;\n  }\n\n  const dep = parseDependencyString([groupId, artifactId, version].join(':'));\n  if (!dep) {\n    return ctx;\n  }\n\n  const methodName = ctx.tokenMap.methodName ?? null;\n  if (versionTokens.length > 1) {\n    // = template string with multiple variables\n    dep.skipReason = 'unspecified-version';\n  } else if (versionTokens[0].type === 'symbol') {\n    const varData = findVariable(versionTokens[0].value, ctx);\n    if (varData) {\n      dep.groupName = varData.key;\n      dep.managerData = {\n        fileReplacePosition: varData.fileReplacePosition,\n        packageFile: varData.packageFile,\n      };\n    }\n  } else {\n    // = string value\n    if (methodName?.[0]?.value === 'dependencySet') {\n      dep.groupName = `${groupId}:${version}`;\n    }\n    dep.managerData = {\n      fileReplacePosition: versionTokens[0].offset,\n      packageFile: ctx.packageFile,\n    };\n  }\n\n  ctx.deps.push(dep);\n\n  return ctx;\n}\n\nexport function handlePlugin(ctx: Ctx): Ctx {\n  const methodName = loadFromTokenMap(ctx, 'methodName')[0];\n  const pluginName = loadFromTokenMap(ctx, 'pluginName')[0];\n  const pluginVersion = loadFromTokenMap(ctx, 'version');\n\n  const plugin = pluginName.value;\n  const depName =\n    methodName.value === 'kotlin' ? `org.jetbrains.kotlin.${plugin}` : plugin;\n  const packageName = `${depName}:${depName}.gradle.plugin`;\n\n  const dep: PackageDependency<GradleManagerData> = {\n    depType: 'plugin',\n    depName,\n    packageName,\n    commitMessageTopic: `plugin ${depName}`,\n    currentValue: pluginVersion[0].value,\n    managerData: {\n      fileReplacePosition: pluginVersion[0].offset,\n      packageFile: ctx.packageFile,\n    },\n  };\n\n  if (pluginVersion.length > 1) {\n    // = template string with multiple variables\n    dep.skipReason = 'unspecified-version';\n  } else if (pluginVersion[0].type === 'symbol') {\n    const varData = findVariable(pluginVersion[0].value, ctx);\n    if (varData) {\n      dep.groupName = varData.key;\n      dep.currentValue = varData.value;\n      dep.managerData = {\n        fileReplacePosition: varData.fileReplacePosition,\n        packageFile: varData.packageFile,\n      };\n    } else {\n      dep.skipReason = 'unspecified-version';\n    }\n  }\n\n  ctx.deps.push(dep);\n\n  return ctx;\n}\n\nfunction isPluginRegistry(ctx: Ctx): boolean {\n  if (ctx.tokenMap.registryScope) {\n    const registryScope = loadFromTokenMap(ctx, 'registryScope')[0].value;\n    return registryScope === 'pluginManagement';\n  }\n\n  return false;\n}\n\nexport function handlePredefinedRegistryUrl(ctx: Ctx): Ctx {\n  const registryName = loadFromTokenMap(ctx, 'registryUrl')[0].value;\n\n  ctx.registryUrls.push({\n    registryUrl: REGISTRY_URLS[registryName as keyof typeof REGISTRY_URLS],\n    scope: isPluginRegistry(ctx) ? 'plugin' : 'dep',\n  });\n\n  return ctx;\n}\n\nexport function handleCustomRegistryUrl(ctx: Ctx): Ctx {\n  let localVariables = ctx.globalVars;\n\n  if (ctx.tokenMap.name) {\n    const nameTokens = loadFromTokenMap(ctx, 'name');\n    const nameValue = interpolateString(nameTokens, ctx, localVariables);\n    if (nameValue) {\n      localVariables = {\n        ...localVariables,\n        name: {\n          key: 'name',\n          value: nameValue,\n        },\n      };\n    }\n  }\n\n  let registryUrl = interpolateString(\n    loadFromTokenMap(ctx, 'registryUrl'),\n    ctx,\n    localVariables\n  );\n  if (registryUrl) {\n    registryUrl = registryUrl.replace(regEx(/\\\\/g), '');\n    try {\n      const { host, protocol } = URL.parse(registryUrl);\n      if (host && protocol) {\n        ctx.registryUrls.push({\n          registryUrl,\n          scope: isPluginRegistry(ctx) ? 'plugin' : 'dep',\n        });\n      }\n    } catch (e) {\n      // no-op\n    }\n  }\n\n  return ctx;\n}\n\nexport function handleLibraryDep(ctx: Ctx): Ctx {\n  const groupIdTokens = loadFromTokenMap(ctx, 'groupId');\n  const artifactIdTokens = loadFromTokenMap(ctx, 'artifactId');\n\n  const groupId = interpolateString(groupIdTokens, ctx);\n  const artifactId = interpolateString(artifactIdTokens, ctx);\n  if (!groupId || !artifactId) {\n    return ctx;\n  }\n\n  const aliasToken = loadFromTokenMap(ctx, 'alias')[0];\n  const key = `libs.${aliasToken.value.replace(regEx(/[-_]/g), '.')}`;\n\n  ctx.globalVars[key] = {\n    key,\n    value: `${groupId}:${artifactId}`,\n    fileReplacePosition: aliasToken.offset,\n    packageFile: ctx.packageFile,\n  };\n\n  if (ctx.tokenMap.version) {\n    const version = interpolateString(loadFromTokenMap(ctx, 'version'), ctx);\n    if (version) {\n      handleLongFormDep(ctx);\n    }\n  }\n\n  return ctx;\n}\n\nexport function handleApplyFrom(ctx: Ctx): Ctx {\n  let scriptFile = interpolateString(loadFromTokenMap(ctx, 'scriptFile'), ctx);\n  if (!scriptFile) {\n    return ctx;\n  }\n\n  if (ctx.tokenMap.parentPath) {\n    const parentPath = interpolateString(\n      loadFromTokenMap(ctx, 'parentPath'),\n      ctx\n    );\n    if (parentPath && scriptFile) {\n      scriptFile = upath.join(parentPath, scriptFile);\n    }\n  }\n\n  if (ctx.recursionDepth > 2) {\n    logger.debug(`Max recursion depth reached in script file: ${scriptFile}`);\n    return ctx;\n  }\n\n  if (!regEx(/\\.gradle(\\.kts)?$/).test(scriptFile)) {\n    logger.debug({ scriptFile }, `Only Gradle files can be included`);\n    return ctx;\n  }\n\n  const scriptFilePath = getSiblingFileName(ctx.packageFile, scriptFile);\n  if (!ctx.fileContents[scriptFilePath]) {\n    logger.debug(`Failed to process included Gradle file ${scriptFilePath}`);\n    return ctx;\n  }\n\n  const matchResult = parseGradle(\n    // TODO #7154\n    ctx.fileContents[scriptFilePath]!,\n    ctx.globalVars,\n    scriptFilePath,\n    ctx.fileContents,\n    ctx.recursionDepth + 1\n  );\n\n  ctx.deps.push(...matchResult.deps);\n  ctx.globalVars = { ...ctx.globalVars, ...matchResult.vars };\n  ctx.registryUrls.push(...matchResult.urls);\n\n  return ctx;\n}\n\nexport function handleImplicitGradlePlugin(ctx: Ctx): Ctx {\n  const pluginName = loadFromTokenMap(ctx, 'pluginName')[0].value;\n  const versionTokens = loadFromTokenMap(ctx, 'version');\n  const versionValue = interpolateString(versionTokens, ctx);\n  if (!versionValue) {\n    return ctx;\n  }\n\n  const groupIdArtifactId =\n    GRADLE_PLUGINS[pluginName as keyof typeof GRADLE_PLUGINS][1];\n  const dep = parseDependencyString(`${groupIdArtifactId}:${versionValue}`);\n  if (!dep) {\n    return ctx;\n  }\n\n  dep.depName = pluginName;\n  dep.packageName = groupIdArtifactId;\n  dep.managerData = {\n    fileReplacePosition: versionTokens[0].offset,\n    packageFile: ctx.packageFile,\n  };\n\n  if (versionTokens.length > 1) {\n    // = template string with multiple variables\n    dep.skipReason = 'unspecified-version';\n  } else if (versionTokens[0].type === 'symbol') {\n    const varData = findVariable(versionTokens[0].value, ctx);\n    if (varData) {\n      dep.groupName = varData.key;\n      dep.currentValue = varData.value;\n      dep.managerData = {\n        fileReplacePosition: varData.fileReplacePosition,\n        packageFile: varData.packageFile,\n      };\n    }\n  }\n\n  ctx.deps.push(dep);\n\n  return ctx;\n}\n"]}