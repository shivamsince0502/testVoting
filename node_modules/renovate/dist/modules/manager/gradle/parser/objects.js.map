{"version":3,"file":"objects.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/gradle/parser/objects.ts"],"names":[],"mappings":";;;AAAA,2DAAwD;AAExD,+CAA+D;AAC/D,qCAUkB;AAClB,yCAA8C;AAE9C,MAAM,gCAAgC,GAAG,0BAAC,CAAC,GAAG;AAC5C,uDAAuD;AACvD,4CAA8B;AAC9B,8CAA8C;AAC9C,sCAA6B;KAC1B,GAAG,CAAC,0BAAC,CAAC,EAAE,CAAM,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;KACjC,EAAE,CAAC,GAAG,CAAC;KACP,OAAO,CAAC,4BAAmB,CAAC;KAC5B,OAAO,CAAC,yBAAgB,CAAC;KACzB,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAA,wBAAe,EAAC,GAAG,EAAE,UAAU,CAAC,CAAC;KAClD,IAAI,CAAC,sBAAa,CAAC;KACnB,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAA,wBAAe,EAAC,GAAG,EAAE,UAAU,CAAC,CAAC;KAClD,OAAO,CAAC,2BAAgB,CAAC;KACzB,OAAO,CAAC,wBAAe,CAAC,CAC5B,CAAC;AAEF,qBAAqB;AACrB,MAAM,sBAAsB,GAAG,CAC7B,MAAwC,EACN,EAAE,CACpC,0BAAC,CAAC,GAAG,CACH,0BAAC,CAAC,GAAG,CAAM,QAAQ,CAAC,CAAC,GAAG,CAAC,sBAAa,CAAC,CAAC,IAAI,CAAC;IAC3C,IAAI,EAAE,cAAc;IACpB,QAAQ,EAAE,CAAC;IACX,UAAU,EAAE,GAAG;IACf,QAAQ,EAAE,GAAG;IACb,UAAU,EAAE,6BAAoB;IAChC,MAAM;IACN,WAAW,EAAE,2BAAkB;CAChC,CAAC,EACF,gCAAgC,CACjC,CAAC;AAES,QAAA,+BAA+B,GAAG,sBAAsB,CACnE,sBAAsB,CACpB,sBAAsB,CACpB,sBAAsB,CAAC,gCAAgC,CAAC,CACzD,CACF,CACF,CAAC,OAAO,CAAC,wBAAe,CAAC,CAAC","sourcesContent":["import { parser, query as q } from 'good-enough-parser';\nimport type { Ctx } from '../types';\nimport { qKotlinMultiMapOfVarAssignment } from './assignments';\nimport {\n  cleanupTempVars,\n  coalesceVariable,\n  increaseNestingDepth,\n  prependNestingDepth,\n  qValueMatcher,\n  qVariableAssignmentIdentifier,\n  reduceNestingDepth,\n  storeInTokenMap,\n  storeVarToken,\n} from './common';\nimport { handleAssignment } from './handlers';\n\nconst qKotlinSingleObjectVarAssignment = q.alt(\n  // val dep = mapOf(\"qux\" to \"foo:bar:\\${Versions.baz}\")\n  qKotlinMultiMapOfVarAssignment,\n  // val dep: String = \"foo:bar:\" + Versions.baz\n  qVariableAssignmentIdentifier\n    .opt(q.op<Ctx>(':').sym('String'))\n    .op('=')\n    .handler(prependNestingDepth)\n    .handler(coalesceVariable)\n    .handler((ctx) => storeInTokenMap(ctx, 'keyToken'))\n    .join(qValueMatcher)\n    .handler((ctx) => storeInTokenMap(ctx, 'valToken'))\n    .handler(handleAssignment)\n    .handler(cleanupTempVars)\n);\n\n// object foo { ... }\nconst qKotlinMultiObjectExpr = (\n  search: q.QueryBuilder<Ctx, parser.Node>\n): q.QueryBuilder<Ctx, parser.Node> =>\n  q.alt(\n    q.sym<Ctx>('object').sym(storeVarToken).tree({\n      type: 'wrapped-tree',\n      maxDepth: 1,\n      startsWith: '{',\n      endsWith: '}',\n      preHandler: increaseNestingDepth,\n      search,\n      postHandler: reduceNestingDepth,\n    }),\n    qKotlinSingleObjectVarAssignment\n  );\n\nexport const qKotlinMultiObjectVarAssignment = qKotlinMultiObjectExpr(\n  qKotlinMultiObjectExpr(\n    qKotlinMultiObjectExpr(\n      qKotlinMultiObjectExpr(qKotlinSingleObjectVarAssignment)\n    )\n  )\n).handler(cleanupTempVars);\n"]}