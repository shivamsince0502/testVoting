{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gradle/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import upath from 'upath';\nimport { logger } from '../../../logger';\nimport { getLocalFiles } from '../../../util/fs';\nimport { MavenDatasource } from '../../datasource/maven';\nimport type { ExtractConfig, PackageDependency, PackageFile } from '../types';\nimport { parseCatalog } from './extract/catalog';\nimport {\n  isGcvPropsFile,\n  parseGcv,\n  usesGcv,\n} from './extract/consistent-versions-plugin';\nimport { parseGradle, parseKotlinSource, parseProps } from './parser';\nimport { REGISTRY_URLS } from './parser/common';\nimport type {\n  GradleManagerData,\n  PackageRegistry,\n  VariableRegistry,\n} from './types';\nimport {\n  getVars,\n  isGradleScriptFile,\n  isKotlinSourceFile,\n  isPropsFile,\n  isTOMLFile,\n  reorderFiles,\n  toAbsolutePath,\n  updateVars,\n} from './utils';\n\nconst mavenDatasource = MavenDatasource.id;\n\nfunction updatePackageRegistries(\n  packageRegistries: PackageRegistry[],\n  urls: PackageRegistry[]\n): void {\n  for (const url of urls) {\n    const registryAlreadyKnown = packageRegistries.some(\n      (item) => item.registryUrl === url.registryUrl && item.scope === url.scope\n    );\n    if (!registryAlreadyKnown) {\n      packageRegistries.push(url);\n    }\n  }\n}\n\nfunction getRegistryUrlsForDep(\n  packageRegistries: PackageRegistry[],\n  dep: PackageDependency<GradleManagerData>\n): string[] {\n  const scope = dep.depType === 'plugin' ? 'plugin' : 'dep';\n\n  const registryUrls = packageRegistries\n    .filter((item) => item.scope === scope)\n    .map((item) => item.registryUrl);\n\n  if (!registryUrls.length && scope === 'plugin') {\n    registryUrls.push(REGISTRY_URLS.gradlePluginPortal);\n  }\n\n  return [...new Set(registryUrls)];\n}\n\nasync function parsePackageFiles(\n  config: ExtractConfig,\n  packageFiles: string[],\n  extractedDeps: PackageDependency<GradleManagerData>[],\n  packageFilesByName: Record<string, PackageFile>,\n  packageRegistries: PackageRegistry[]\n): Promise<PackageDependency<GradleManagerData>[]> {\n  const varRegistry: VariableRegistry = {};\n  const fileContents = await getLocalFiles(packageFiles);\n\n  for (const packageFile of packageFiles) {\n    packageFilesByName[packageFile] = {\n      packageFile,\n      datasource: mavenDatasource,\n      deps: [],\n    };\n\n    try {\n      // TODO #7154\n      const content = fileContents[packageFile]!;\n      const packageFileDir = upath.dirname(toAbsolutePath(packageFile));\n\n      if (isPropsFile(packageFile)) {\n        const { vars, deps } = parseProps(content, packageFile);\n        updateVars(varRegistry, packageFileDir, vars);\n        extractedDeps.push(...deps);\n      } else if (isTOMLFile(packageFile)) {\n        const deps = parseCatalog(packageFile, content);\n        extractedDeps.push(...deps);\n      } else if (\n        isGcvPropsFile(packageFile) &&\n        usesGcv(packageFile, fileContents)\n      ) {\n        const deps = parseGcv(packageFile, fileContents);\n        extractedDeps.push(...deps);\n      } else if (isKotlinSourceFile(packageFile)) {\n        const vars = getVars(varRegistry, packageFileDir);\n        const { vars: gradleVars, deps } = parseKotlinSource(\n          content,\n          vars,\n          packageFile\n        );\n        updateVars(varRegistry, '/', gradleVars);\n        extractedDeps.push(...deps);\n      } else if (isGradleScriptFile(packageFile)) {\n        const vars = getVars(varRegistry, packageFileDir);\n        const {\n          deps,\n          urls,\n          vars: gradleVars,\n        } = parseGradle(content, vars, packageFile, fileContents);\n        updatePackageRegistries(packageRegistries, urls);\n        updateVars(varRegistry, packageFileDir, gradleVars);\n        extractedDeps.push(...deps);\n      }\n    } catch (err) {\n      logger.debug(\n        { err, config, packageFile },\n        `Failed to process Gradle file`\n      );\n    }\n  }\n\n  return extractedDeps;\n}\n\nexport async function extractAllPackageFiles(\n  config: ExtractConfig,\n  packageFiles: string[]\n): Promise<PackageFile[] | null> {\n  const packageFilesByName: Record<string, PackageFile> = {};\n  const packageRegistries: PackageRegistry[] = [];\n  const extractedDeps: PackageDependency<GradleManagerData>[] = [];\n  const kotlinSourceFiles = packageFiles.filter(isKotlinSourceFile);\n  const gradleFiles = reorderFiles(\n    packageFiles.filter((e) => !kotlinSourceFiles.includes(e))\n  );\n\n  await parsePackageFiles(\n    config,\n    [...kotlinSourceFiles, ...kotlinSourceFiles, ...gradleFiles],\n    extractedDeps,\n    packageFilesByName,\n    packageRegistries\n  );\n\n  if (!extractedDeps.length) {\n    return null;\n  }\n\n  for (const dep of extractedDeps) {\n    dep.fileReplacePosition = dep?.managerData?.fileReplacePosition; // #8224\n\n    const key = dep.managerData?.packageFile;\n    // istanbul ignore else\n    if (key) {\n      let pkgFile: PackageFile = packageFilesByName[key];\n      // istanbul ignore if: won't happen if \"apply from\" processes only initially known files\n      if (!pkgFile) {\n        pkgFile = {\n          packageFile: key,\n          datasource: mavenDatasource,\n          deps: [],\n        };\n      }\n\n      if (!dep.datasource) {\n        dep.datasource = mavenDatasource;\n      }\n\n      if (dep.datasource === mavenDatasource) {\n        dep.registryUrls = getRegistryUrlsForDep(packageRegistries, dep);\n\n        if (!dep.depType) {\n          dep.depType =\n            key.startsWith('buildSrc') && !kotlinSourceFiles.length\n              ? 'devDependencies'\n              : 'dependencies';\n        }\n      }\n\n      const depAlreadyInPkgFile = pkgFile.deps.some(\n        (item) =>\n          item.depName === dep.depName &&\n          item.managerData?.fileReplacePosition ===\n            dep.managerData?.fileReplacePosition\n      );\n      if (!depAlreadyInPkgFile) {\n        pkgFile.deps.push(dep);\n      }\n\n      packageFilesByName[key] = pkgFile;\n    } else {\n      logger.debug({ dep }, `Failed to process Gradle dependency`);\n    }\n  }\n\n  return Object.values(packageFilesByName);\n}\n"]}