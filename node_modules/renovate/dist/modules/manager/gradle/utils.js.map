{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gradle/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import upath from 'upath';\nimport { regEx } from '../../../util/regex';\nimport type { PackageDependency } from '../types';\nimport type {\n  GradleManagerData,\n  PackageVariables,\n  VariableRegistry,\n} from './types';\n\nconst artifactRegex = regEx(\n  '^[a-zA-Z][-_a-zA-Z0-9]*(?:\\\\.[a-zA-Z0-9][-_a-zA-Z0-9]*?)*$'\n);\n\nconst versionLikeRegex = regEx('^(?<version>[-_.\\\\[\\\\](),a-zA-Z0-9+]+)');\n\n// Extracts version-like and range-like strings\n// from the beginning of input\nexport function versionLikeSubstring(\n  input: string | null | undefined\n): string | null {\n  if (!input) {\n    return null;\n  }\n\n  const match = versionLikeRegex.exec(input);\n  const version = match?.groups?.version;\n  if (!version || !regEx(/\\d/).test(version)) {\n    return null;\n  }\n\n  return version;\n}\n\nexport function isDependencyString(input: string): boolean {\n  const split = input?.split(':');\n  if (split?.length !== 3 && split?.length !== 4) {\n    return false;\n  }\n  // eslint-disable-next-line prefer-const\n  let [tempGroupId, tempArtifactId, tempVersionPart, optionalClassifier] =\n    split;\n\n  if (optionalClassifier && !artifactRegex.test(optionalClassifier)) {\n    return false;\n  }\n\n  if (\n    tempVersionPart !== versionLikeSubstring(tempVersionPart) &&\n    tempVersionPart.includes('@')\n  ) {\n    const versionSplit = tempVersionPart?.split('@');\n    if (versionSplit?.length !== 2) {\n      return false;\n    }\n    [tempVersionPart] = versionSplit;\n  }\n  const [groupId, artifactId, versionPart] = [\n    tempGroupId,\n    tempArtifactId,\n    tempVersionPart,\n  ];\n  return !!(\n    groupId &&\n    artifactId &&\n    versionPart &&\n    artifactRegex.test(groupId) &&\n    artifactRegex.test(artifactId) &&\n    versionPart === versionLikeSubstring(versionPart)\n  );\n}\n\nexport function parseDependencyString(\n  input: string\n): PackageDependency<GradleManagerData> | null {\n  if (!isDependencyString(input)) {\n    return null;\n  }\n  const [groupId, artifactId, FullValue] = input.split(':');\n  if (FullValue === versionLikeSubstring(FullValue)) {\n    return {\n      depName: `${groupId}:${artifactId}`,\n      currentValue: FullValue,\n    };\n  }\n  const [currentValue, dataType] = FullValue.split('@');\n  return {\n    depName: `${groupId}:${artifactId}`,\n    currentValue,\n    dataType,\n  };\n}\n\nconst gradleVersionsFileRegex = regEx('^versions\\\\.gradle(?:\\\\.kts)?$', 'i');\nconst gradleBuildFileRegex = regEx('^build\\\\.gradle(?:\\\\.kts)?$', 'i');\n\nexport function isGradleScriptFile(path: string): boolean {\n  const filename = upath.basename(path).toLowerCase();\n  return filename.endsWith('.gradle.kts') || filename.endsWith('.gradle');\n}\n\nexport function isGradleVersionsFile(path: string): boolean {\n  const filename = upath.basename(path);\n  return gradleVersionsFileRegex.test(filename);\n}\n\nexport function isGradleBuildFile(path: string): boolean {\n  const filename = upath.basename(path);\n  return gradleBuildFileRegex.test(filename);\n}\n\nexport function isPropsFile(path: string): boolean {\n  const filename = upath.basename(path).toLowerCase();\n  return filename === 'gradle.properties';\n}\n\nexport function isKotlinSourceFile(path: string): boolean {\n  const filename = upath.basename(path).toLowerCase();\n  return filename.endsWith('.kt');\n}\n\nexport function isTOMLFile(path: string): boolean {\n  const filename = upath.basename(path).toLowerCase();\n  return filename.endsWith('.toml');\n}\n\nexport function toAbsolutePath(packageFile: string): string {\n  return upath.join(packageFile.replace(regEx(/^[/\\\\]*/), '/'));\n}\n\nfunction getFileRank(filename: string): number {\n  if (isPropsFile(filename)) {\n    return 0;\n  }\n  if (isGradleVersionsFile(filename)) {\n    return 1;\n  }\n  if (isGradleBuildFile(filename)) {\n    return 3;\n  }\n  return 2;\n}\n\nexport function reorderFiles(packageFiles: string[]): string[] {\n  return packageFiles.sort((x, y) => {\n    const xAbs = toAbsolutePath(x);\n    const yAbs = toAbsolutePath(y);\n\n    const xDir = upath.dirname(xAbs);\n    const yDir = upath.dirname(yAbs);\n\n    if (xDir === yDir) {\n      const xRank = getFileRank(xAbs);\n      const yRank = getFileRank(yAbs);\n      if (xRank === yRank) {\n        if (xAbs > yAbs) {\n          return 1;\n        }\n        if (xAbs < yAbs) {\n          return -1;\n        }\n      } else if (xRank > yRank) {\n        return 1;\n      } else if (yRank > xRank) {\n        return -1;\n      }\n    } else if (xDir.startsWith(yDir)) {\n      return 1;\n    } else if (yDir.startsWith(xDir)) {\n      return -1;\n    }\n\n    return 0;\n  });\n}\n\nexport function getVars(\n  registry: VariableRegistry,\n  dir: string,\n  vars: PackageVariables = registry[dir] || {}\n): PackageVariables {\n  const dirAbs = toAbsolutePath(dir);\n  const parentDir = upath.dirname(dirAbs);\n  if (parentDir === dirAbs) {\n    return vars;\n  }\n  const parentVars = registry[parentDir] || {};\n  return getVars(registry, parentDir, { ...parentVars, ...vars });\n}\n\nexport function updateVars(\n  registry: VariableRegistry,\n  dir: string,\n  newVars: PackageVariables\n): void {\n  const oldVars = registry[dir] ?? {};\n  registry[dir] = { ...oldVars, ...newVars };\n}\n"]}