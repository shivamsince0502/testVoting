{"version":3,"file":"consistent-versions-plugin.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/gradle/extract/consistent-versions-plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../../logger';\nimport * as fs from '../../../../util/fs';\nimport { newlineRegex, regEx } from '../../../../util/regex';\nimport type { PackageDependency } from '../../types';\nimport type { GradleManagerData } from '../types';\nimport { isDependencyString, versionLikeSubstring } from '../utils';\n\nexport const VERSIONS_PROPS = 'versions.props';\nexport const VERSIONS_LOCK = 'versions.lock';\nconst LOCKFILE_HEADER_TEXT =\n  '# Run ./gradlew --write-locks to regenerate this file';\n\n/**\n * Determines if Palantir gradle-consistent-versions is in use, https://github.com/palantir/gradle-consistent-versions.\n * Both `versions.props` and `versions.lock` must exist and the special header line of lock file must match\n *\n * @param versionsPropsFilename is the full file name path of `versions.props`\n * @param fileContents map with file contents of all files\n */\nexport function usesGcv(\n  versionsPropsFilename: string,\n  fileContents: Record<string, string | null>\n): boolean {\n  const versionsLockFile: string = fs.getSiblingFileName(\n    versionsPropsFilename,\n    VERSIONS_LOCK\n  );\n  return (\n    fileContents[versionsLockFile]?.startsWith(LOCKFILE_HEADER_TEXT) ?? false\n  );\n}\n\n/**\n * Confirms whether the provided file name is the props file\n */\nexport function isGcvPropsFile(fileName: string): boolean {\n  return fileName === VERSIONS_PROPS || fileName.endsWith(`/${VERSIONS_PROPS}`);\n}\n\n/**\n * Confirms whether the provided file name is the lock file\n */\nexport function isGcvLockFile(fileName: string): boolean {\n  return fileName === VERSIONS_LOCK || fileName.endsWith(`/${VERSIONS_LOCK}`);\n}\n\n/**\n * Parses Gradle-Consistent-Versions files to figure out what dependencies, versions\n * and groups they contain. The parsing goes like this:\n * - Parse `versions.props` into deps (or groups) and versions, remembering file offsets\n * - Parse `versions.lock` into deps and lock-versions\n * - For each exact dep in props file, lookup the lock-version from lock file\n * - For each group/regex dep in props file, lookup the set of exact deps and versions in lock file\n *\n * @param propsFileName name and path of the props file\n * @param fileContents text content of all files\n */\nexport function parseGcv(\n  propsFileName: string,\n  fileContents: Record<string, string | null>\n): PackageDependency<GradleManagerData>[] {\n  const propsFileContent = fileContents[propsFileName] ?? '';\n  const lockFileName = fs.getSiblingFileName(propsFileName, VERSIONS_LOCK);\n  const lockFileContent = fileContents[lockFileName] ?? '';\n  const lockFileMap = parseLockFile(lockFileContent);\n  const [propsFileExactMap, propsFileRegexMap] =\n    parsePropsFile(propsFileContent);\n\n  const extractedDeps: PackageDependency<GradleManagerData>[] = [];\n\n  // For each exact dep in props file\n  for (const [propDep, versionAndPosition] of propsFileExactMap) {\n    if (lockFileMap.has(propDep)) {\n      const newDep: Record<string, any> = {\n        managerData: {\n          packageFile: propsFileName,\n          fileReplacePosition: versionAndPosition.filePos,\n        },\n        depName: propDep,\n        currentValue: versionAndPosition.version,\n        lockedVersion: lockFileMap.get(propDep)?.version,\n        depType: lockFileMap.get(propDep)?.depType,\n      } satisfies PackageDependency<GradleManagerData>;\n      extractedDeps.push(newDep);\n      // Remove from the lockfile map so the same exact lib will not be included in globbing\n      lockFileMap.delete(propDep);\n    }\n  }\n\n  // For each regular expression dep in props file (starting with the longest glob string)...\n  for (const [propDepGlob, propVerAndPos] of propsFileRegexMap) {\n    const globRegex = globToRegex(propDepGlob);\n    for (const [exactDep, lockVersionAndDepType] of lockFileMap) {\n      if (globRegex.test(exactDep)) {\n        const newDep: Record<string, any> = {\n          managerData: {\n            packageFile: propsFileName,\n            fileReplacePosition: propVerAndPos.filePos,\n          },\n          depName: exactDep,\n          currentValue: propVerAndPos.version,\n          lockedVersion: lockVersionAndDepType.version,\n          depType: lockVersionAndDepType.depType,\n          groupName: propDepGlob,\n        } satisfies PackageDependency<GradleManagerData>;\n        extractedDeps.push(newDep);\n        // Remove from the lockfile map so the same lib will not be included in more generic globs later\n        lockFileMap.delete(exactDep);\n      }\n    }\n  }\n  return extractedDeps;\n}\n\n// Translate glob syntax to a regex that does the same. Note that we cannot use replaceAll as it does not exist in Node14\n// Loosely borrowed mapping to regex from https://github.com/palantir/gradle-consistent-versions/blob/develop/src/main/java/com/palantir/gradle/versions/FuzzyPatternResolver.java\nfunction globToRegex(depName: string): RegExp {\n  return regEx(\n    depName\n      .replace(/\\*/g, '_WC_CHAR_')\n      .replace(/[/\\-\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n      .replace(/_WC_CHAR_/g, '.*?')\n  );\n}\n\ninterface VersionWithPosition {\n  version: string;\n  filePos: number;\n}\n\ninterface VersionWithDepType {\n  version: string;\n  depType: string;\n}\n\n/**\n * Parses `versions.lock`\n */\nexport function parseLockFile(input: string): Map<string, VersionWithDepType> {\n  const lockLineRegex = regEx(\n    `^(?<depName>[^:]+:[^:]+):(?<lockVersion>[^ ]+) \\\\(\\\\d+ constraints: [0-9a-f]+\\\\)$`\n  );\n\n  const depVerMap = new Map<string, VersionWithDepType>();\n  let isTestDepType = false;\n  for (const line of input.split(newlineRegex)) {\n    const lineMatch = lockLineRegex.exec(line);\n    if (lineMatch?.groups) {\n      const { depName, lockVersion } = lineMatch.groups;\n      if (isDependencyString(`${depName}:${lockVersion}`)) {\n        depVerMap.set(depName, {\n          version: lockVersion,\n          depType: isTestDepType ? 'test' : 'dependencies',\n        } as VersionWithDepType);\n      }\n    } else if (line === '[Test dependencies]') {\n      isTestDepType = true; // We know that all lines below this header are test dependencies\n    }\n  }\n  logger.trace(\n    `Found ${depVerMap.size} locked dependencies in ${VERSIONS_LOCK}.`\n  );\n  return depVerMap;\n}\n\n/**\n * Parses `versions.props`, this is CR/LF safe\n * @param input the entire property file from file system\n * @return two maps, first being exact matches, second regex matches\n */\nexport function parsePropsFile(\n  input: string\n): [Map<string, VersionWithPosition>, Map<string, VersionWithPosition>] {\n  const propsLineRegex = regEx(\n    `^(?<depName>[^:]+:[^=]+?) *= *(?<propsVersion>.*)$`\n  );\n  const depVerExactMap = new Map<string, VersionWithPosition>();\n  const depVerRegexMap = new Map<string, VersionWithPosition>();\n\n  let startOfLineIdx = 0;\n  const isCrLf = input.indexOf('\\r\\n') > 0;\n  const validGlob = /^[a-zA-Z][-_a-zA-Z0-9.:*]+$/;\n  for (const line of input.split(newlineRegex)) {\n    const lineMatch = propsLineRegex.exec(line);\n    if (lineMatch?.groups) {\n      const { depName, propsVersion } = lineMatch.groups;\n      if (\n        validGlob.test(depName) &&\n        versionLikeSubstring(propsVersion) !== null\n      ) {\n        const startPosInLine = line.lastIndexOf(propsVersion);\n        const propVersionPos = startOfLineIdx + startPosInLine;\n        if (depName.includes('*')) {\n          depVerRegexMap.set(depName, {\n            version: propsVersion,\n            filePos: propVersionPos,\n          });\n        } else {\n          depVerExactMap.set(depName, {\n            version: propsVersion,\n            filePos: propVersionPos,\n          });\n        }\n      }\n    }\n    startOfLineIdx += line.length + (isCrLf ? 2 : 1);\n  }\n  logger.trace(\n    `Found ${depVerExactMap.size} dependencies and ${depVerRegexMap.size} wildcard dependencies in ${VERSIONS_PROPS}.`\n  );\n  return [depVerExactMap, new Map([...depVerRegexMap].sort().reverse())];\n}\n"]}