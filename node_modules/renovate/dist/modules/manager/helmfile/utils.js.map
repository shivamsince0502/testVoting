{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../lib/modules/manager/helmfile/utils.ts"],"names":[],"mappings":";;;;AAAA,8DAA2B;AAC3B,0DAA0B;AAE1B,yCAAiE;AACjE,4EAAsD;AACtD,oDAA2D;AAC3D,6CAAoD;AAGpD,qCAAiD;AAGjD,2EAA2E;AAC3E,SAAgB,sBAAsB,CAAC,OAAgB;IACrD,OAAO,CACL,OAAO,CAAC,qBAAqB,KAAK,SAAS;QAC3C,OAAO,CAAC,WAAW,KAAK,SAAS;QACjC,OAAO,CAAC,YAAY,KAAK,SAAS,CACnC,CAAC;AACJ,CAAC;AAND,wDAMC;AAED,4FAA4F;AAC5F,yCAAyC;AAClC,KAAK,UAAU,+BAA+B,CACnD,OAAgB,EAChB,oBAA4B;IAE5B,MAAM,qBAAqB,GAAG,IAAA,iBAAY,EAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;IACvE,OAAO,IAAA,oBAAe,EACpB,eAAK,CAAC,IAAI,CAAC,qBAAqB,EAAE,OAAO,CAAC,KAAK,EAAE,oBAAoB,CAAC,CACvE,CAAC;AACJ,CAAC;AARD,0EAQC;AAED,SAAgB,QAAQ,CAAC,kBAA0B;IACjD,MAAM,GAAG,GAAG,iBAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAC1C,OAAO,kBAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC9B,CAAC;AAHD,4BAGC;AAED,SAAgB,SAAS,CAAC,eAAuB;IAC/C,MAAM,IAAI,GAAG,iBAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACxC,OAAO,mBAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAChC,CAAC;AAHD,8BAGC;AAED,SAAgB,aAAa,CAAC,UAAsB;IAClD,OAAO,UAAU,CAAC,GAAG,KAAK,IAAI,CAAC;AACjC,CAAC;AAFD,sCAEC;AAED,SAAgB,wBAAwB,CACtC,cAAsB,EACtB,iBAAyB,EACzB,cAAsB;IAEtB,MAAM,cAAc,GAAmB;QACrC,IAAI,EAAE,cAAc;QACpB,UAAU,EAAE,cAAc;QAC1B,QAAQ,EAAE,SAAS,CAAC,IAAI,CAAC;YACvB,GAAG,EAAE,iBAAiB;YACtB,QAAQ,EAAE,yBAAgB,CAAC,EAAE;SAC9B,CAAC;KACH,CAAC;IAEF,OAAO,IAAA,yBAAgB,EAAC,cAAc,EAAE,qBAAqB,CAAC,CAAC;AACjE,CAAC;AAfD,4DAeC","sourcesContent":["import yaml from 'js-yaml';\nimport upath from 'upath';\n\nimport { getParentDir, localPathExists } from '../../../util/fs';\nimport * as hostRules from '../../../util/host-rules';\nimport { DockerDatasource } from '../../datasource/docker';\nimport { generateLoginCmd } from '../helmv3/common';\nimport type { RepositoryRule } from '../helmv3/types';\n\nimport { DocSchema, LockSchema } from './schema';\nimport type { Doc, Lock, Release, Repository } from './types';\n\n/** Returns true if a helmfile release contains kustomize specific keys **/\nexport function kustomizationsKeysUsed(release: Release): boolean {\n  return (\n    release.strategicMergePatches !== undefined ||\n    release.jsonPatches !== undefined ||\n    release.transformers !== undefined\n  );\n}\n\n/** Returns true if a helmfile release uses a local chart with a kustomization.yaml file **/\n// eslint-disable-next-line require-await\nexport async function localChartHasKustomizationsYaml(\n  release: Release,\n  helmFileYamlFileName: string\n): Promise<boolean> {\n  const helmfileYamlParentDir = getParentDir(helmFileYamlFileName) || '';\n  return localPathExists(\n    upath.join(helmfileYamlParentDir, release.chart, 'kustomization.yaml')\n  );\n}\n\nexport function parseDoc(packageFileContent: string): Doc {\n  const doc = yaml.load(packageFileContent);\n  return DocSchema.parse(doc);\n}\n\nexport function parseLock(lockFileContent: string): Lock {\n  const lock = yaml.load(lockFileContent);\n  return LockSchema.parse(lock);\n}\n\nexport function isOCIRegistry(repository: Repository): boolean {\n  return repository.oci === true;\n}\n\nexport function generateRegistryLoginCmd(\n  repositoryName: string,\n  repositoryBaseURL: string,\n  repositoryHost: string\n): string | null {\n  const repositoryRule: RepositoryRule = {\n    name: repositoryName,\n    repository: repositoryHost,\n    hostRule: hostRules.find({\n      url: repositoryBaseURL,\n      hostType: DockerDatasource.id,\n    }),\n  };\n\n  return generateLoginCmd(repositoryRule, 'helm registry login');\n}\n"]}