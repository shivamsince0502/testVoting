{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/helmv3/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport yaml from 'js-yaml';\nimport { quote } from 'shlex';\nimport { TEMPORARY_ERROR } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions, ToolConstraint } from '../../../util/exec/types';\nimport {\n  getParentDir,\n  getSiblingFileName,\n  readLocalFile,\n  writeLocalFile,\n} from '../../../util/fs';\nimport { getRepoStatus } from '../../../util/git';\nimport * as hostRules from '../../../util/host-rules';\nimport { DockerDatasource } from '../../datasource/docker';\nimport { HelmDatasource } from '../../datasource/helm';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\nimport { generateHelmEnvs, generateLoginCmd } from './common';\nimport type { ChartDefinition, Repository, RepositoryRule } from './types';\nimport {\n  aliasRecordToRepositories,\n  getRepositories,\n  isFileInDir,\n  isOCIRegistry,\n} from './utils';\n\nasync function helmCommands(\n  execOptions: ExecOptions,\n  manifestPath: string,\n  repositories: Repository[]\n): Promise<void> {\n  const cmd: string[] = [];\n  // get OCI registries and detect host rules\n  const registries: RepositoryRule[] = repositories\n    .filter(isOCIRegistry)\n    .map((value) => {\n      return {\n        ...value,\n        repository: value.repository.replace('oci://', ''),\n        hostRule: hostRules.find({\n          url: value.repository.replace('oci://', 'https://'), //TODO we need to replace this, as oci:// will not be accepted as protocol\n          hostType: DockerDatasource.id,\n        }),\n      };\n    });\n\n  // if credentials for the registry have been found, log into it\n  registries.forEach((value) => {\n    const loginCmd = generateLoginCmd(value, 'helm registry login');\n    if (loginCmd) {\n      cmd.push(loginCmd);\n    }\n  });\n\n  // find classic Chart repositories and fitting host rules\n  const classicRepositories: RepositoryRule[] = repositories\n    .filter((repository) => !isOCIRegistry(repository))\n    .map((value) => {\n      return {\n        ...value,\n        hostRule: hostRules.find({\n          url: value.repository,\n          hostType: HelmDatasource.id,\n        }),\n      };\n    });\n\n  // add helm repos if an alias or credentials for the url are defined\n  classicRepositories.forEach((value) => {\n    const { username, password } = value.hostRule;\n    const parameters = [`${value.repository}`];\n    const isPrivateRepo = username && password;\n    if (isPrivateRepo) {\n      parameters.push(`--username ${quote(username)}`);\n      parameters.push(`--password ${quote(password)}`);\n    }\n\n    cmd.push(`helm repo add ${value.name} ${parameters.join(' ')}`);\n  });\n\n  cmd.push(`helm dependency update ${quote(getParentDir(manifestPath))}`);\n\n  await exec(cmd, execOptions);\n}\n\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  newPackageFileContent,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`helmv3.updateArtifacts(${packageFileName})`);\n\n  const isLockFileMaintenance = config.updateType === 'lockFileMaintenance';\n  const isUpdateOptionAddChartArchives = config.postUpdateOptions?.includes(\n    'helmUpdateSubChartArchives'\n  );\n\n  if (\n    !isLockFileMaintenance &&\n    (updatedDeps === undefined || updatedDeps.length < 1)\n  ) {\n    logger.debug('No updated helmv3 deps - returning null');\n    return null;\n  }\n\n  const lockFileName = getSiblingFileName(packageFileName, 'Chart.lock');\n  const existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n  if (!existingLockFileContent && !isUpdateOptionAddChartArchives) {\n    logger.debug('No Chart.lock found');\n    return null;\n  }\n  try {\n    // get repositories and registries defined in the package file\n    const packages = yaml.load(newPackageFileContent) as ChartDefinition; //TODO #9610\n    const locks = existingLockFileContent\n      ? (yaml.load(existingLockFileContent) as ChartDefinition)\n      : { dependencies: [] }; //TODO #9610\n\n    const chartDefinitions: ChartDefinition[] = [];\n    // prioritize registryAlias naming for Helm repositories\n    if (config.registryAliases) {\n      chartDefinitions.push({\n        dependencies: aliasRecordToRepositories(config.registryAliases),\n      });\n    }\n    chartDefinitions.push(packages, locks);\n\n    const repositories = getRepositories(chartDefinitions);\n\n    await writeLocalFile(packageFileName, newPackageFileContent);\n    logger.debug('Updating Helm artifacts');\n    const helmToolConstraint: ToolConstraint = {\n      toolName: 'helm',\n      constraint: config.constraints?.helm,\n    };\n\n    const execOptions: ExecOptions = {\n      docker: {},\n      extraEnv: generateHelmEnvs(),\n      toolConstraints: [helmToolConstraint],\n    };\n    await helmCommands(execOptions, packageFileName, repositories);\n    logger.debug('Returning updated Helm artifacts');\n\n    const fileChanges: UpdateArtifactsResult[] = [];\n\n    if (is.truthy(existingLockFileContent)) {\n      const newHelmLockContent = await readLocalFile(lockFileName, 'utf8');\n      const isLockFileChanged = existingLockFileContent !== newHelmLockContent;\n      if (isLockFileChanged) {\n        fileChanges.push({\n          file: {\n            type: 'addition',\n            path: lockFileName,\n            contents: newHelmLockContent,\n          },\n        });\n      } else {\n        logger.debug('Chart.lock is unchanged');\n      }\n    }\n\n    // add modified helm chart archives to artifacts\n    if (is.truthy(isUpdateOptionAddChartArchives)) {\n      const chartsPath = getSiblingFileName(packageFileName, 'charts');\n      const status = await getRepoStatus();\n      const chartsAddition = status.not_added ?? [];\n      const chartsDeletion = status.deleted ?? [];\n\n      for (const file of chartsAddition) {\n        // only add artifacts in the chart sub path\n        if (!isFileInDir(chartsPath, file)) {\n          continue;\n        }\n        fileChanges.push({\n          file: {\n            type: 'addition',\n            path: file,\n            contents: await readLocalFile(file),\n          },\n        });\n      }\n\n      for (const file of chartsDeletion) {\n        // only add artifacts in the chart sub path\n        if (!isFileInDir(chartsPath, file)) {\n          continue;\n        }\n        fileChanges.push({\n          file: {\n            type: 'deletion',\n            path: file,\n          },\n        });\n      }\n    }\n\n    return fileChanges.length > 0 ? fileChanges : null;\n  } catch (err) {\n    // istanbul ignore if\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    logger.debug({ err }, 'Failed to update Helm lock file');\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n}\n"]}