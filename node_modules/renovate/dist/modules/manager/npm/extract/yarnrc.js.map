{"version":3,"file":"yarnrc.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/npm/extract/yarnrc.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,qCAA+B;AAC/B,6BAAwB;AACxB,+CAA4C;AAC5C,kDAA+C;AAE/C,MAAM,eAAe,GAAG,OAAC,CAAC,MAAM,CAAC;IAC/B,iBAAiB,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACxC,SAAS,EAAE,OAAC;SACT,MAAM,CACL,OAAC,CAAC,MAAM,CAAC;QACP,iBAAiB,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;KACzC,CAAC,CACH;SACA,QAAQ,EAAE;CACd,CAAC,CAAC;AAIH,MAAM,aAAa,GAAG,IAAA,aAAK,EACzB,gEAAgE,CACjE,CAAC;AAEF,SAAgB,0BAA0B,CACxC,YAAoB;IAEpB,MAAM,eAAe,GAAG,CAAC,GAAG,YAAY,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;SAC9D,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;SACpB,MAAM,CAAC,YAAE,CAAC,MAAM,CAAC,CAAC;IAErB,MAAM,UAAU,GAAe,EAAE,CAAC;IAClC,KAAK,MAAM,aAAa,IAAI,eAAe,EAAE;QAC3C,IAAI,aAAa,CAAC,KAAK,EAAE;YACvB,UAAU,CAAC,SAAS,KAAK,EAAE,CAAC;YAC5B,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACjD,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,iBAAiB;gBACzD,aAAa,CAAC,WAAW,CAAC;SAC7B;aAAM;YACL,UAAU,CAAC,iBAAiB,GAAG,aAAa,CAAC,WAAW,CAAC;SAC1D;KACF;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAnBD,gEAmBC;AAED,SAAgB,uBAAuB,CAAC,SAAiB;IACvD,IAAI;QACF,MAAM,GAAG,GAAG,IAAA,cAAI,EAAC,SAAS,EAAE;YAC1B,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;QACH,IAAI,CAAC,GAAG,EAAE;YACR,kBAAkB;YAClB,OAAO,IAAI,CAAC;SACb;QACD,OAAO,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KACnC;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,EAAE,4BAA4B,CAAC,CAAC;QAC9D,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAdD,0DAcC;AAED,SAAgB,kBAAkB,CAChC,WAAmB,EACnB,UAAsB;IAEtB,IAAI,UAAU,CAAC,SAAS,EAAE;QACxB,KAAK,MAAM,KAAK,IAAI,UAAU,CAAC,SAAS,EAAE;YACxC,IAAI,WAAW,CAAC,UAAU,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE;gBACxC,OAAO,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,iBAAiB,IAAI,IAAI,CAAC;aAC9D;SACF;KACF;IACD,IAAI,UAAU,CAAC,iBAAiB,EAAE;QAChC,OAAO,UAAU,CAAC,iBAAiB,CAAC;KACrC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAfD,gDAeC","sourcesContent":["import is from '@sindresorhus/is';\nimport { load } from 'js-yaml';\nimport { z } from 'zod';\nimport { logger } from '../../../../logger';\nimport { regEx } from '../../../../util/regex';\n\nconst YarnrcYmlSchema = z.object({\n  npmRegistryServer: z.string().optional(),\n  npmScopes: z\n    .record(\n      z.object({\n        npmRegistryServer: z.string().optional(),\n      })\n    )\n    .optional(),\n});\n\nexport type YarnConfig = z.infer<typeof YarnrcYmlSchema>;\n\nconst registryRegEx = regEx(\n  /^\"?(@(?<scope>[^:]+):)?registry\"? \"?(?<registryUrl>[^\"]+)\"?$/gm\n);\n\nexport function loadConfigFromLegacyYarnrc(\n  legacyYarnrc: string\n): YarnConfig | null {\n  const registryMatches = [...legacyYarnrc.matchAll(registryRegEx)]\n    .map((m) => m.groups)\n    .filter(is.truthy);\n\n  const yarnConfig: YarnConfig = {};\n  for (const registryMatch of registryMatches) {\n    if (registryMatch.scope) {\n      yarnConfig.npmScopes ??= {};\n      yarnConfig.npmScopes[registryMatch.scope] ??= {};\n      yarnConfig.npmScopes[registryMatch.scope].npmRegistryServer =\n        registryMatch.registryUrl;\n    } else {\n      yarnConfig.npmRegistryServer = registryMatch.registryUrl;\n    }\n  }\n  return yarnConfig;\n}\n\nexport function loadConfigFromYarnrcYml(yarnrcYml: string): YarnConfig | null {\n  try {\n    const obj = load(yarnrcYml, {\n      json: true,\n    });\n    if (!obj) {\n      // emtpy yaml file\n      return null;\n    }\n    return YarnrcYmlSchema.parse(obj);\n  } catch (err) {\n    logger.warn({ yarnrcYml, err }, `Failed to load yarnrc file`);\n    return null;\n  }\n}\n\nexport function resolveRegistryUrl(\n  packageName: string,\n  yarnConfig: YarnConfig\n): string | null {\n  if (yarnConfig.npmScopes) {\n    for (const scope in yarnConfig.npmScopes) {\n      if (packageName.startsWith(`@${scope}/`)) {\n        return yarnConfig.npmScopes[scope].npmRegistryServer ?? null;\n      }\n    }\n  }\n  if (yarnConfig.npmRegistryServer) {\n    return yarnConfig.npmRegistryServer;\n  }\n  return null;\n}\n"]}