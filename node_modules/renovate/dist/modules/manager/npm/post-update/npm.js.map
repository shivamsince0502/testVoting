{"version":3,"file":"npm.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/npm/post-update/npm.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO: types (#7154)\nimport is from '@sindresorhus/is';\nimport { minimatch } from 'minimatch';\nimport upath from 'upath';\nimport { GlobalConfig } from '../../../../config/global';\nimport {\n  SYSTEM_INSUFFICIENT_DISK_SPACE,\n  TEMPORARY_ERROR,\n} from '../../../../constants/error-messages';\nimport { logger } from '../../../../logger';\nimport { exec } from '../../../../util/exec';\nimport type {\n  ExecOptions,\n  ExtraEnv,\n  ToolConstraint,\n} from '../../../../util/exec/types';\nimport {\n  deleteLocalFile,\n  localPathExists,\n  readLocalFile,\n  renameLocalFile,\n} from '../../../../util/fs';\nimport { trimSlashes } from '../../../../util/url';\nimport type { PostUpdateConfig, Upgrade } from '../../types';\nimport { composeLockFile, parseLockFile } from '../utils';\nimport { getNodeToolConstraint } from './node-version';\nimport type { GenerateLockFileResult } from './types';\n\nexport async function generateLockFile(\n  lockFileDir: string,\n  env: NodeJS.ProcessEnv,\n  filename: string,\n  config: Partial<PostUpdateConfig> = {},\n  upgrades: Upgrade[] = []\n): Promise<GenerateLockFileResult> {\n  // TODO: don't assume package-lock.json is in the same directory\n  const lockFileName = upath.join(lockFileDir, filename);\n\n  logger.debug(`Spawning npm install to create ${lockFileDir}/${filename}`);\n  const { skipInstalls, postUpdateOptions } = config;\n\n  let lockFile: string | null = null;\n  try {\n    const npmToolConstraint: ToolConstraint = {\n      toolName: 'npm',\n      constraint: config.constraints?.npm ?? config.extractedConstraints?.npm,\n    };\n    const commands: string[] = [];\n    let cmdOptions = '';\n    if (postUpdateOptions?.includes('npmDedupe') || skipInstalls === false) {\n      logger.debug('Performing node_modules install');\n      cmdOptions += '--no-audit';\n    } else {\n      logger.debug('Updating lock file only');\n      cmdOptions += '--package-lock-only --no-audit';\n    }\n\n    if (!GlobalConfig.get('allowScripts') || config.ignoreScripts) {\n      cmdOptions += ' --ignore-scripts';\n    }\n\n    const extraEnv: ExtraEnv = {\n      NPM_CONFIG_CACHE: env.NPM_CONFIG_CACHE,\n      npm_config_store: env.npm_config_store,\n    };\n    const execOptions: ExecOptions = {\n      cwdFile: lockFileName,\n      extraEnv,\n      toolConstraints: [\n        await getNodeToolConstraint(config, upgrades, lockFileDir),\n        npmToolConstraint,\n      ],\n      docker: {},\n    };\n    // istanbul ignore if\n    if (GlobalConfig.get('exposeAllEnv')) {\n      extraEnv.NPM_AUTH = env.NPM_AUTH;\n      extraEnv.NPM_EMAIL = env.NPM_EMAIL;\n    }\n\n    if (!upgrades.every((upgrade) => upgrade.isLockfileUpdate)) {\n      // This command updates the lock file based on package.json\n      commands.push(`npm install ${cmdOptions}`.trim());\n    }\n\n    // rangeStrategy = update-lockfile\n    const lockUpdates = upgrades.filter((upgrade) => upgrade.isLockfileUpdate);\n\n    // divide the deps in two categories: workspace and root\n    const { lockRootUpdates, lockWorkspacesUpdates, workspaces, rootDeps } =\n      divideWorkspaceAndRootDeps(lockFileDir, lockUpdates);\n\n    if (workspaces.size && lockWorkspacesUpdates.length) {\n      logger.debug('Performing lockfileUpdate (npm-workspaces)');\n      for (const workspace of workspaces) {\n        const currentWorkspaceUpdates = lockWorkspacesUpdates\n          .filter((update) => update.workspace === workspace)\n          .map((update) => update.managerData?.packageKey)\n          .filter((packageKey) => !rootDeps.has(packageKey));\n\n        if (currentWorkspaceUpdates.length) {\n          const updateCmd = `npm install ${cmdOptions} --workspace=${workspace} ${currentWorkspaceUpdates.join(\n            ' '\n          )}`;\n          commands.push(updateCmd);\n        }\n      }\n    }\n\n    if (lockRootUpdates.length) {\n      logger.debug('Performing lockfileUpdate (npm)');\n      const updateCmd =\n        `npm install ${cmdOptions} ` +\n        lockRootUpdates\n          .map((update) => update.managerData?.packageKey)\n          .join(' ');\n      commands.push(updateCmd);\n    }\n\n    if (upgrades.some((upgrade) => upgrade.isRemediation)) {\n      // We need to run twice to get the correct lock file\n      commands.push(`npm install ${cmdOptions}`.trim());\n    }\n\n    // postUpdateOptions\n    if (config.postUpdateOptions?.includes('npmDedupe')) {\n      logger.debug('Performing npm dedupe');\n      commands.push('npm dedupe');\n    }\n\n    if (upgrades.find((upgrade) => upgrade.isLockFileMaintenance)) {\n      logger.debug(\n        `Removing ${lockFileName} first due to lock file maintenance upgrade`\n      );\n      try {\n        await deleteLocalFile(lockFileName);\n      } catch (err) /* istanbul ignore next */ {\n        logger.debug(\n          { err, lockFileName },\n          'Error removing package-lock.json for lock file maintenance'\n        );\n      }\n    }\n\n    // Run the commands\n    await exec(commands, execOptions);\n\n    // massage to shrinkwrap if necessary\n    if (\n      filename === 'npm-shrinkwrap.json' &&\n      (await localPathExists(upath.join(lockFileDir, 'package-lock.json')))\n    ) {\n      await renameLocalFile(\n        upath.join(lockFileDir, 'package-lock.json'),\n        upath.join(lockFileDir, 'npm-shrinkwrap.json')\n      );\n    }\n\n    // Read the result\n    // TODO #7154\n    lockFile = (await readLocalFile(\n      upath.join(lockFileDir, filename),\n      'utf8'\n    ))!;\n\n    // Massage lockfile counterparts of package.json that were modified\n    // because npm install was called with an explicit version for rangeStrategy=update-lockfile\n    if (lockUpdates.length) {\n      const { detectedIndent, lockFileParsed } = parseLockFile(lockFile);\n      if (lockFileParsed?.lockfileVersion === 2) {\n        lockUpdates.forEach((lockUpdate) => {\n          const depType = lockUpdate.depType as\n            | 'dependencies'\n            | 'optionalDependencies';\n\n          // TODO #7154\n          if (\n            lockFileParsed.packages?.['']?.[depType]?.[lockUpdate.packageName!]\n          ) {\n            lockFileParsed.packages[''][depType]![lockUpdate.packageName!] =\n              lockUpdate.newValue!;\n          }\n        });\n        lockFile = composeLockFile(lockFileParsed, detectedIndent);\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    logger.debug(\n      {\n        err,\n        type: 'npm',\n      },\n      'lock file error'\n    );\n    if (err.stderr?.includes('ENOSPC: no space left on device')) {\n      throw new Error(SYSTEM_INSUFFICIENT_DISK_SPACE);\n    }\n    return { error: true, stderr: err.stderr };\n  }\n  return { lockFile };\n}\n\nexport function divideWorkspaceAndRootDeps(\n  lockFileDir: string,\n  lockUpdates: Upgrade[]\n): {\n  lockRootUpdates: Upgrade[];\n  lockWorkspacesUpdates: Upgrade[];\n  workspaces: Set<string>;\n  rootDeps: Set<string>;\n} {\n  const lockRootUpdates: Upgrade[] = []; // stores all upgrades which are present in root package.json\n  const lockWorkspacesUpdates: Upgrade[] = []; // stores all upgrades which are present in workspaces package.json\n  const workspaces = new Set<string>(); // name of all workspaces\n  const rootDeps = new Set<string>(); // packageName of all upgrades in root package.json (makes it check duplicate deps in root)\n\n  // divide the deps in two categories: workspace and root\n  for (const upgrade of lockUpdates) {\n    upgrade.managerData ??= {};\n    upgrade.managerData.packageKey = generatePackageKey(\n      upgrade.packageName!,\n      upgrade.newVersion!\n    );\n    if (\n      upgrade.managerData.workspacesPackages?.length &&\n      is.string(upgrade.packageFile)\n    ) {\n      const workspacePatterns = upgrade.managerData.workspacesPackages; // glob pattern or directory name/path\n      const packageFileDir = trimSlashes(\n        upgrade.packageFile.replace('package.json', '')\n      );\n\n      // workspaceDir = packageFileDir - lockFileDir\n      const workspaceDir = trimSlashes(packageFileDir.replace(lockFileDir, ''));\n\n      if (is.nonEmptyString(workspaceDir)) {\n        let workspaceName: string | undefined;\n        // compare workspaceDir to workspace patterns\n        // stop when the first match is found and\n        // add workspaceDir to workspaces set and upgrade object\n        for (const workspacePattern of workspacePatterns ?? []) {\n          if (minimatch(workspaceDir, workspacePattern)) {\n            workspaceName = workspaceDir;\n            break;\n          }\n        }\n        if (\n          workspaceName &&\n          !rootDeps.has(upgrade.managerData.packageKey) // prevent same dep from existing in root and workspace\n        ) {\n          workspaces.add(workspaceName);\n          upgrade.workspace = workspaceName;\n          lockWorkspacesUpdates.push(upgrade);\n        }\n        continue;\n      }\n    }\n    lockRootUpdates.push(upgrade);\n    rootDeps.add(upgrade.managerData.packageKey);\n  }\n\n  return { lockRootUpdates, lockWorkspacesUpdates, workspaces, rootDeps };\n}\n\nfunction generatePackageKey(packageName: string, version: string): string {\n  return `${packageName}@${version}`;\n}\n"]}