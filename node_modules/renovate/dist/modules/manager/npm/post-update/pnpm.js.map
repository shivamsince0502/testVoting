{"version":3,"file":"pnpm.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/npm/post-update/pnpm.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { load } from 'js-yaml';\nimport upath from 'upath';\nimport { GlobalConfig } from '../../../../config/global';\nimport { TEMPORARY_ERROR } from '../../../../constants/error-messages';\nimport { logger } from '../../../../logger';\nimport { exec } from '../../../../util/exec';\nimport type {\n  ExecOptions,\n  ExtraEnv,\n  ToolConstraint,\n} from '../../../../util/exec/types';\nimport { deleteLocalFile, readLocalFile } from '../../../../util/fs';\nimport type { PostUpdateConfig, Upgrade } from '../../types';\nimport type { NpmPackage } from '../extract/types';\nimport { getNodeToolConstraint } from './node-version';\nimport type { GenerateLockFileResult, PnpmLockFile } from './types';\n\nfunction getPnpmConstraintFromUpgrades(upgrades: Upgrade[]): string | null {\n  for (const upgrade of upgrades) {\n    if (upgrade.depName === 'pnpm' && upgrade.newVersion) {\n      return upgrade.newVersion;\n    }\n  }\n  return null;\n}\n\nexport async function generateLockFile(\n  lockFileDir: string,\n  env: NodeJS.ProcessEnv,\n  config: PostUpdateConfig,\n  upgrades: Upgrade[] = []\n): Promise<GenerateLockFileResult> {\n  const lockFileName = upath.join(lockFileDir, 'pnpm-lock.yaml');\n  logger.debug(`Spawning pnpm install to create ${lockFileName}`);\n  let lockFile: string | null = null;\n  let stdout: string | undefined;\n  let stderr: string | undefined;\n  let cmd = 'pnpm';\n  try {\n    const pnpmToolConstraint: ToolConstraint = {\n      toolName: 'pnpm',\n      constraint:\n        getPnpmConstraintFromUpgrades(upgrades) ?? // if pnpm is being upgraded, it comes first\n        config.constraints?.pnpm ?? // from user config or extraction\n        (await getPnpmConstraintFromPackageFile(lockFileDir)) ?? // look in package.json > packageManager or engines\n        (await getConstraintFromLockFile(lockFileName)), // use lockfileVersion to find pnpm version range\n    };\n\n    const extraEnv: ExtraEnv = {\n      NPM_CONFIG_CACHE: env.NPM_CONFIG_CACHE,\n      npm_config_store: env.npm_config_store,\n    };\n    const execOptions: ExecOptions = {\n      cwdFile: lockFileName,\n      extraEnv,\n      docker: {},\n      toolConstraints: [\n        await getNodeToolConstraint(config, upgrades, lockFileDir),\n        pnpmToolConstraint,\n      ],\n    };\n    // istanbul ignore if\n    if (GlobalConfig.get('exposeAllEnv')) {\n      extraEnv.NPM_AUTH = env.NPM_AUTH;\n      extraEnv.NPM_EMAIL = env.NPM_EMAIL;\n    }\n    const commands: string[] = [];\n\n    cmd = 'pnpm';\n    let args = 'install --recursive --lockfile-only';\n    if (!GlobalConfig.get('allowScripts') || config.ignoreScripts) {\n      args += ' --ignore-scripts';\n      args += ' --ignore-pnpmfile';\n    }\n    logger.trace({ cmd, args }, 'pnpm command');\n    commands.push(`${cmd} ${args}`);\n\n    // postUpdateOptions\n    if (config.postUpdateOptions?.includes('pnpmDedupe')) {\n      logger.debug('Performing pnpm dedupe');\n      commands.push('pnpm dedupe');\n    }\n\n    if (upgrades.find((upgrade) => upgrade.isLockFileMaintenance)) {\n      logger.debug(\n        `Removing ${lockFileName} first due to lock file maintenance upgrade`\n      );\n      try {\n        await deleteLocalFile(lockFileName);\n      } catch (err) /* istanbul ignore next */ {\n        logger.debug(\n          { err, lockFileName },\n          'Error removing yarn.lock for lock file maintenance'\n        );\n      }\n    }\n\n    await exec(commands, execOptions);\n    lockFile = await readLocalFile(lockFileName, 'utf8');\n  } catch (err) /* istanbul ignore next */ {\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    logger.debug(\n      {\n        cmd,\n        err,\n        stdout,\n        stderr,\n        type: 'pnpm',\n      },\n      'lock file error'\n    );\n    return { error: true, stderr: err.stderr, stdout: err.stdout };\n  }\n  return { lockFile };\n}\n\nexport async function getPnpmConstraintFromPackageFile(\n  lockFileDir: string\n): Promise<string | undefined> {\n  let constraint: string | undefined;\n  const rootPackageJson = upath.join(lockFileDir, 'package.json');\n  const content = await readLocalFile(rootPackageJson, 'utf8');\n  if (content) {\n    const packageJson: NpmPackage = JSON.parse(content);\n    const packageManager = packageJson?.packageManager;\n    if (packageManager?.includes('@')) {\n      const nameAndVersion = packageManager.split('@');\n      const name = nameAndVersion[0];\n      if (name === 'pnpm') {\n        constraint = nameAndVersion[1];\n      }\n    } else {\n      const engines = packageJson?.engines;\n      if (engines) {\n        constraint = engines['pnpm'];\n      }\n    }\n  }\n  return constraint;\n}\n\nexport async function getConstraintFromLockFile(\n  lockFileName: string\n): Promise<string | null> {\n  let constraint: string | null = null;\n  try {\n    const lockfileContent = await readLocalFile(lockFileName, 'utf8');\n    if (!lockfileContent) {\n      return null;\n    }\n    const pnpmLock = load(lockfileContent) as PnpmLockFile;\n    if (!is.number(pnpmLock?.lockfileVersion)) {\n      return null;\n    }\n    // find matching lockfileVersion and use its constraints\n    // if no match found use lockfileVersion 5\n    // lockfileVersion 5 is the minimum version required to generate the pnpm-lock.yaml file\n    const { lowerConstraint, upperConstraint } = lockToPnpmVersionMapping.find(\n      (m) => m.lockfileVersion === pnpmLock.lockfileVersion\n    ) ?? {\n      lockfileVersion: 5.0,\n      lowerConstraint: '>=3',\n      upperConstraint: '<3.5.0',\n    };\n    constraint = lowerConstraint;\n    if (upperConstraint) {\n      constraint += ` ${upperConstraint}`;\n    }\n  } catch (err) {\n    logger.warn({ err }, 'Error getting pnpm constraints from lock file');\n  }\n  return constraint;\n}\n\n/**\n pnpm lockfiles have corresponding version numbers called \"lockfileVersion\"\n each lockfileVersion can only be generated by a certain pnpm version ranges\n eg. lockfileVersion: 5.4 can only be generated by pnpm version >=7 && <8\n official list can be found here : https://github.com/pnpm/spec/tree/master/lockfile\n we use the mapping present below to find the compatible pnpm version range for a given lockfileVersion\n\n the various terms used in the mapping are explained below:\n lowerConstriant : lowest pnpm version that can generate the lockfileVersion\n upperConstraint : highest pnpm version that can generate the lockfileVersion\n lowerBound      : highest pnpm version that is less than the lowerConstraint\n upperBound      : lowest pnpm version that is greater than upperConstraint\n\n For handling future lockfileVersions, we need to:\n 1. add a upperBound and upperConstraint to the current lastest lockfileVersion\n 2. add an object for the new lockfileVersion with lowerBound and lowerConstraint\n */\n\nconst lockToPnpmVersionMapping = [\n  { lockfileVersion: 6.0, lowerConstraint: '>=7.24.2' },\n  {\n    lockfileVersion: 5.4,\n    lowerConstraint: '>=7',\n    upperConstraint: '<8',\n  },\n  {\n    lockfileVersion: 5.3,\n    lowerConstraint: '>=6',\n    upperConstraint: '<7',\n  },\n  {\n    lockfileVersion: 5.2,\n    lowerConstraint: '>=5.10.0',\n    upperConstraint: '<6',\n  },\n  {\n    lockfileVersion: 5.1,\n    lowerConstraint: '>=3.5.0',\n    upperConstraint: '<5.9.3',\n  },\n];\n"]}