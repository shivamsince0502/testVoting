{"version":3,"file":"node-version.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/npm/post-update/node-version.ts"],"names":[],"mappings":";;;;AAAA,4DAA4B;AAC5B,0DAA0B;AAC1B,+CAA4C;AAE5C,4CAAoD;AACpD,kDAA6D;AAG7D,KAAK,UAAU,WAAW,CAAC,QAAgB;IACzC,IAAI;QACF,aAAa;QACb,MAAM,UAAU,GAAG,CAAC,MAAM,IAAA,kBAAa,EAAC,QAAQ,EAAE,MAAM,CAAC,CAAE;aACxD,KAAK,CAAC,oBAAY,CAAC,CAAC,CAAC,CAAC;aACtB,OAAO,CAAC,IAAA,aAAK,EAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5B,IAAI,gBAAM,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;YACjC,eAAM,CAAC,KAAK,CAAC,0BAA0B,UAAU,UAAU,QAAQ,EAAE,CAAC,CAAC;YACvE,OAAO,UAAU,CAAC;SACnB;KACF;IAAC,OAAO,GAAG,EAAE;QACZ,aAAa;KACd;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,wBAAwB,CAC/B,MAAiC;IAEjC,MAAM,UAAU,GACd,MAAM,CAAC,WAAW,EAAE,IAAI,IAAI,MAAM,CAAC,oBAAoB,EAAE,IAAI,CAAC;IAChE,IAAI,UAAU,IAAI,gBAAM,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;QAC/C,eAAM,CAAC,KAAK,CAAC,0BAA0B,UAAU,qBAAqB,CAAC,CAAC;QACxE,OAAO,UAAU,CAAC;KACnB;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAEM,KAAK,UAAU,iBAAiB,CACrC,MAAiC,EACjC,WAAmB;IAEnB,0BAA0B;IAC1B,MAAM,UAAU,GACd,CAAC,MAAM,WAAW,CAAC,eAAK,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;QACtD,CAAC,MAAM,WAAW,CAAC,eAAK,CAAC,IAAI,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC,CAAC;QAC7D,wBAAwB,CAAC,MAAM,CAAC,CAAC;IACnC,IAAI,CAAC,UAAU,EAAE;QACf,eAAM,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAC;KACzD;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAbD,8CAaC;AAED,SAAgB,aAAa,CAAC,QAAmB;IAC/C,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,MAAM,CAAC,EAAE,QAAQ,CAAC;AAC9D,CAAC;AAFD,sCAEC;AAEM,KAAK,UAAU,qBAAqB,CACzC,MAAiC,EACjC,QAAmB,EACnB,WAAmB;IAEnB,MAAM,UAAU,GACd,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,iBAAiB,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;IAE5E,OAAO;QACL,QAAQ,EAAE,MAAM;QAChB,UAAU;KACX,CAAC;AACJ,CAAC;AAZD,sDAYC","sourcesContent":["import semver from 'semver';\nimport upath from 'upath';\nimport { logger } from '../../../../logger';\nimport type { ToolConstraint } from '../../../../util/exec/types';\nimport { readLocalFile } from '../../../../util/fs';\nimport { newlineRegex, regEx } from '../../../../util/regex';\nimport type { PostUpdateConfig, Upgrade } from '../../types';\n\nasync function getNodeFile(filename: string): Promise<string | null> {\n  try {\n    // TODO #7154\n    const constraint = (await readLocalFile(filename, 'utf8'))!\n      .split(newlineRegex)[0]\n      .replace(regEx(/^v/), '');\n    if (semver.validRange(constraint)) {\n      logger.debug(`Using node constraint \"${constraint}\" from ${filename}`);\n      return constraint;\n    }\n  } catch (err) {\n    // do nothing\n  }\n  return null;\n}\n\nfunction getPackageJsonConstraint(\n  config: Partial<PostUpdateConfig>\n): string | null {\n  const constraint: string =\n    config.constraints?.node ?? config.extractedConstraints?.node;\n  if (constraint && semver.validRange(constraint)) {\n    logger.debug(`Using node constraint \"${constraint}\" from package.json`);\n    return constraint;\n  }\n  return null;\n}\n\nexport async function getNodeConstraint(\n  config: Partial<PostUpdateConfig>,\n  lockFileDir: string\n): Promise<string | null> {\n  // TODO: fix types (#7154)\n  const constraint =\n    (await getNodeFile(upath.join(lockFileDir, '.nvmrc'))) ??\n    (await getNodeFile(upath.join(lockFileDir, '.node-version'))) ??\n    getPackageJsonConstraint(config);\n  if (!constraint) {\n    logger.debug('No node constraint found - using latest');\n  }\n  return constraint;\n}\n\nexport function getNodeUpdate(upgrades: Upgrade[]): string | undefined {\n  return upgrades.find((u) => u.depName === 'node')?.newValue;\n}\n\nexport async function getNodeToolConstraint(\n  config: Partial<PostUpdateConfig>,\n  upgrades: Upgrade[],\n  lockFileDir: string\n): Promise<ToolConstraint> {\n  const constraint =\n    getNodeUpdate(upgrades) ?? (await getNodeConstraint(config, lockFileDir));\n\n  return {\n    toolName: 'node',\n    constraint,\n  };\n}\n"]}