{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/argocd/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { loadAll } from 'js-yaml';\nimport { logger } from '../../../logger';\nimport { coerceArray } from '../../../util/array';\nimport { trimTrailingSlash } from '../../../util/url';\nimport { DockerDatasource } from '../../datasource/docker';\nimport { GitTagsDatasource } from '../../datasource/git-tags';\nimport { HelmDatasource } from '../../datasource/helm';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\nimport type {\n  ApplicationDefinition,\n  ApplicationSource,\n  ApplicationSpec,\n} from './types';\nimport { fileTestRegex } from './util';\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n  _config?: ExtractConfig\n): PackageFileContent | null {\n  // check for argo reference. API version for the kind attribute is used\n  if (fileTestRegex.test(content) === false) {\n    return null;\n  }\n\n  let definitions: ApplicationDefinition[];\n  try {\n    definitions = loadAll(content) as ApplicationDefinition[];\n  } catch (err) {\n    logger.debug({ err, packageFile }, 'Failed to parse ArgoCD definition.');\n    return null;\n  }\n\n  const deps = definitions.filter(is.plainObject).flatMap(processAppSpec);\n\n  return deps.length ? { deps } : null;\n}\n\nfunction processSource(source: ApplicationSource): PackageDependency | null {\n  if (\n    !source ||\n    !is.nonEmptyString(source.repoURL) ||\n    !is.nonEmptyString(source.targetRevision)\n  ) {\n    return null;\n  }\n\n  // a chart variable is defined this is helm declaration\n  if (source.chart) {\n    // assume OCI helm chart if repoURL doesn't contain explicit protocol\n    if (\n      source.repoURL.startsWith('oci://') ||\n      !source.repoURL.includes('://')\n    ) {\n      let registryURL = source.repoURL.replace('oci://', '');\n      registryURL = trimTrailingSlash(registryURL);\n\n      return {\n        depName: `${registryURL}/${source.chart}`,\n        currentValue: source.targetRevision,\n        datasource: DockerDatasource.id,\n      };\n    }\n\n    return {\n      depName: source.chart,\n      registryUrls: [source.repoURL],\n      currentValue: source.targetRevision,\n      datasource: HelmDatasource.id,\n    };\n  }\n\n  return {\n    depName: source.repoURL,\n    currentValue: source.targetRevision,\n    datasource: GitTagsDatasource.id,\n  };\n}\n\nfunction processAppSpec(\n  definition: ApplicationDefinition\n): PackageDependency[] {\n  const spec: ApplicationSpec | null | undefined =\n    definition.kind === 'Application'\n      ? definition?.spec\n      : definition?.spec?.template?.spec;\n\n  if (is.nullOrUndefined(spec)) {\n    return [];\n  }\n\n  const deps: (PackageDependency | null)[] = [];\n\n  if (is.nonEmptyObject(spec.source)) {\n    deps.push(processSource(spec.source));\n  }\n\n  for (const source of coerceArray(spec.sources)) {\n    deps.push(processSource(source));\n  }\n\n  return deps.filter(is.truthy);\n}\n"]}