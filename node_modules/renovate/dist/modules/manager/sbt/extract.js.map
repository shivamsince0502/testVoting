{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/sbt/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { lang, query as q } from 'good-enough-parser';\nimport { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport { parseUrl } from '../../../util/url';\nimport { GithubReleasesDatasource } from '../../datasource/github-releases';\nimport { MavenDatasource } from '../../datasource/maven';\nimport { SbtPackageDatasource } from '../../datasource/sbt-package';\nimport {\n  SBT_PLUGINS_REPO,\n  SbtPluginDatasource,\n} from '../../datasource/sbt-plugin';\nimport { get } from '../../versioning';\nimport * as mavenVersioning from '../../versioning/maven';\nimport * as semverVersioning from '../../versioning/semver';\nimport { REGISTRY_URLS } from '../gradle/parser/common';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport { normalizeScalaVersion } from './util';\n\ntype Vars = Record<string, string>;\n\ninterface Ctx {\n  vars: Vars;\n  deps: PackageDependency[];\n  registryUrls: string[];\n\n  scalaVersion?: string;\n  packageFileVersion?: string;\n\n  groupId?: string;\n  artifactId?: string;\n  currentValue?: string;\n\n  currentVarName?: string;\n  depType?: string;\n  useScalaVersion?: boolean;\n  variableName?: string;\n}\n\nconst scala = lang.createLang('scala');\n\nconst sbtVersionRegex = regEx(\n  'sbt\\\\.version *= *(?<version>\\\\d+\\\\.\\\\d+\\\\.\\\\d+)'\n);\n\nconst scalaVersionMatch = q\n  .sym<Ctx>('scalaVersion')\n  .op(':=')\n  .alt(\n    q.str<Ctx>((ctx, { value: scalaVersion }) => ({ ...ctx, scalaVersion })),\n    q.sym<Ctx>((ctx, { value: varName }) => {\n      const scalaVersion = ctx.vars[varName];\n      if (scalaVersion) {\n        ctx.scalaVersion = scalaVersion;\n      }\n      return ctx;\n    })\n  )\n  .handler((ctx) => {\n    if (ctx.scalaVersion) {\n      const version = get(mavenVersioning.id);\n\n      let packageName = 'org.scala-lang:scala-library';\n      if (version.getMajor(ctx.scalaVersion) === 3) {\n        packageName = 'org.scala-lang:scala3-library_3';\n      }\n\n      const dep: PackageDependency = {\n        datasource: MavenDatasource.id,\n        depName: 'scala',\n        packageName,\n        currentValue: ctx.scalaVersion,\n        separateMinorPatch: true,\n      };\n      ctx.scalaVersion = normalizeScalaVersion(ctx.scalaVersion);\n      ctx.deps.push(dep);\n    }\n    return ctx;\n  });\n\nconst packageFileVersionMatch = q\n  .sym<Ctx>('version')\n  .op(':=')\n  .alt(\n    q.str<Ctx>((ctx, { value: packageFileVersion }) => ({\n      ...ctx,\n      packageFileVersion,\n    })),\n    q.sym<Ctx>((ctx, { value: varName }) => {\n      const packageFileVersion = ctx.vars[varName];\n      if (packageFileVersion) {\n        ctx.packageFileVersion = packageFileVersion;\n      }\n      return ctx;\n    })\n  );\n\nconst variableNameMatch = q\n  .sym<Ctx>((ctx, { value: varName }) => ({\n    ...ctx,\n    currentVarName: varName,\n  }))\n  .opt(q.op<Ctx>(':').sym('String'));\n\nconst variableValueMatch = q.str<Ctx>((ctx, { value }) => {\n  ctx.vars[ctx.currentVarName!] = value;\n  delete ctx.currentVarName;\n  return ctx;\n});\n\nconst assignmentMatch = q.sym<Ctx>('val').join(variableNameMatch).op('=');\n\nconst variableDefinitionMatch = q\n  .alt(\n    q.sym<Ctx>('lazy').join(assignmentMatch),\n    assignmentMatch,\n    variableNameMatch.op(':=')\n  )\n  .join(variableValueMatch);\n\nconst groupIdMatch = q.alt<Ctx>(\n  q.sym<Ctx>((ctx, { value: varName }) => {\n    const currentGroupId = ctx.vars[varName];\n    if (currentGroupId) {\n      ctx.groupId = currentGroupId;\n    }\n    return ctx;\n  }),\n  q.str<Ctx>((ctx, { value: groupId }) => ({ ...ctx, groupId }))\n);\n\nconst artifactIdMatch = q.alt<Ctx>(\n  q.sym<Ctx>((ctx, { value: varName }) => {\n    const artifactId = ctx.vars[varName];\n    if (artifactId) {\n      ctx.artifactId = artifactId;\n    }\n    return ctx;\n  }),\n  q.str<Ctx>((ctx, { value: artifactId }) => ({ ...ctx, artifactId }))\n);\n\nconst versionMatch = q.alt<Ctx>(\n  q.sym<Ctx>((ctx, { value: varName }) => {\n    const currentValue = ctx.vars[varName];\n    if (currentValue) {\n      ctx.currentValue = currentValue;\n      ctx.variableName = varName;\n    }\n    return ctx;\n  }),\n  q.str<Ctx>((ctx, { value: currentValue }) => ({ ...ctx, currentValue }))\n);\n\nconst simpleDependencyMatch = groupIdMatch\n  .op('%')\n  .join(artifactIdMatch)\n  .op('%')\n  .join(versionMatch);\n\nconst versionedDependencyMatch = groupIdMatch\n  .op('%%')\n  .join(artifactIdMatch)\n  .handler((ctx) => ({ ...ctx, useScalaVersion: true }))\n  .op('%')\n  .join(versionMatch);\n\nconst crossDependencyMatch = groupIdMatch\n  .op('%%%')\n  .join(artifactIdMatch)\n  .handler((ctx) => ({ ...ctx, useScalaVersion: true }))\n  .op('%')\n  .join(versionMatch);\n\nfunction depHandler(ctx: Ctx): Ctx {\n  const {\n    scalaVersion,\n    groupId,\n    artifactId,\n    currentValue,\n    useScalaVersion,\n    depType,\n    variableName,\n  } = ctx;\n\n  delete ctx.groupId;\n  delete ctx.artifactId;\n  delete ctx.currentValue;\n  delete ctx.useScalaVersion;\n  delete ctx.depType;\n  delete ctx.variableName;\n\n  const depName = `${groupId!}:${artifactId!}`;\n\n  const dep: PackageDependency = {\n    datasource: SbtPackageDatasource.id,\n    depName,\n    packageName:\n      scalaVersion && useScalaVersion ? `${depName}_${scalaVersion}` : depName,\n    currentValue,\n  };\n\n  if (depType) {\n    dep.depType = depType;\n  }\n\n  if (depType === 'plugin') {\n    dep.datasource = SbtPluginDatasource.id;\n  }\n\n  if (variableName) {\n    dep.groupName = variableName;\n    dep.variableName = variableName;\n  }\n\n  ctx.deps.push(dep);\n\n  return ctx;\n}\n\nfunction depTypeHandler(ctx: Ctx, { value: depType }: { value: string }): Ctx {\n  return { ...ctx, depType };\n}\n\nconst sbtPackageMatch = q\n  .opt<Ctx>(q.opt(q.sym<Ctx>('lazy')).sym('val').sym().op('='))\n  .alt(crossDependencyMatch, simpleDependencyMatch, versionedDependencyMatch)\n  .opt(\n    q.alt<Ctx>(\n      q.sym<Ctx>('classifier').str(depTypeHandler),\n      q.op<Ctx>('%').sym(depTypeHandler),\n      q.op<Ctx>('%').str(depTypeHandler)\n    )\n  )\n  .handler(depHandler);\n\nconst sbtPluginMatch = q\n  .sym<Ctx>(regEx(/^(?:addSbtPlugin|addCompilerPlugin)$/))\n  .tree({\n    type: 'wrapped-tree',\n    maxDepth: 1,\n    search: q\n      .begin<Ctx>()\n      .alt(simpleDependencyMatch, versionedDependencyMatch)\n      .end(),\n  })\n  .handler((ctx) => ({ ...ctx, depType: 'plugin' }))\n  .handler(depHandler);\n\nconst resolverMatch = q\n  .str<Ctx>()\n  .sym('at')\n  .str((ctx, { value }) => {\n    if (parseUrl(value)) {\n      ctx.registryUrls.push(value);\n    }\n    return ctx;\n  });\n\nconst addResolverMatch = q.sym<Ctx>('resolvers').alt(\n  q.op<Ctx>('+=').join(resolverMatch),\n  q.op<Ctx>('++=').sym('Seq').tree({\n    type: 'wrapped-tree',\n    maxDepth: 1,\n    search: resolverMatch,\n  })\n);\n\nfunction registryUrlHandler(ctx: Ctx): Ctx {\n  for (const dep of ctx.deps) {\n    dep.registryUrls = [...ctx.registryUrls];\n    if (dep.depType === 'plugin') {\n      dep.registryUrls.push(SBT_PLUGINS_REPO);\n    }\n  }\n  return ctx;\n}\n\nconst query = q.tree<Ctx>({\n  type: 'root-tree',\n  maxDepth: 32,\n  search: q.alt<Ctx>(\n    scalaVersionMatch,\n    packageFileVersionMatch,\n    sbtPackageMatch,\n    sbtPluginMatch,\n    addResolverMatch,\n    variableDefinitionMatch\n  ),\n  postHandler: registryUrlHandler,\n});\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string\n): PackageFileContent | null {\n  if (\n    packageFile === 'project/build.properties' ||\n    packageFile.endsWith('/project/build.properties')\n  ) {\n    const regexResult = sbtVersionRegex.exec(content);\n    const sbtVersion = regexResult?.groups?.version;\n    const matchString = regexResult?.[0];\n    if (sbtVersion) {\n      const sbtDependency: PackageDependency = {\n        datasource: GithubReleasesDatasource.id,\n        depName: 'sbt/sbt',\n        packageName: 'sbt/sbt',\n        versioning: semverVersioning.id,\n        currentValue: sbtVersion,\n        replaceString: matchString,\n        extractVersion: '^v(?<version>\\\\S+)',\n      };\n\n      return {\n        deps: [sbtDependency],\n      };\n    } else {\n      return null;\n    }\n  }\n\n  let parsedResult: Ctx | null = null;\n\n  try {\n    parsedResult = scala.query(content, query, {\n      vars: {},\n      deps: [],\n      registryUrls: [REGISTRY_URLS.mavenCentral],\n    });\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err, packageFile }, 'Sbt parsing error');\n  }\n\n  if (!parsedResult) {\n    return null;\n  }\n\n  const { deps, packageFileVersion } = parsedResult;\n\n  if (!deps.length) {\n    return null;\n  }\n\n  return { deps, packageFileVersion };\n}\n"]}