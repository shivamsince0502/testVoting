{"version":3,"file":"update.js","sourceRoot":"","sources":["../../../../lib/modules/manager/nuget/update.ts"],"names":[],"mappings":";;;;AAAA,4DAA6C;AAC7C,mCAAqC;AACrC,4CAAyC;AACzC,iDAAiD;AAGjD,SAAgB,kBAAkB,CAChC,OAAe,EACf,YAAgC,EAChC,WAAiC;IAEjC,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,YAAY,EAAE,EAC7B,4CAA4C,CAC7C,CAAC;IACF,IAAI,aAAa,GAAG,OAAO,CAAC;IAE5B,IAAI,CAAC,YAAY,EAAE;QACjB,eAAM,CAAC,IAAI,CAAC,wDAAwD,CAAC,CAAC;QACtE,OAAO,EAAE,aAAa,EAAE,CAAC;KAC1B;IAED,IAAI,CAAC,gBAAM,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE;QAC/B,eAAM,CAAC,IAAI,CACT,EAAE,YAAY,EAAE,EAChB,oDAAoD,CACrD,CAAC;QACF,OAAO,EAAE,aAAa,EAAE,CAAC;KAC1B;IAED,IAAI;QACF,MAAM,OAAO,GAAG,IAAI,oBAAW,CAAC,OAAO,CAAC,CAAC;QACzC,MAAM,WAAW,GAAG,OAAO,CAAC,kBAAkB,CAAC,uBAAuB,CAAE,CAAC;QACzE,MAAM,gBAAgB,GAAG,WAAW,CAAC,gBAAgB,CAAC;QACtD,MAAM,eAAe,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QAE3E,MAAM,cAAc,GAAG,gBAAM,CAAC,GAAG,CAAC,YAAY,EAAE,WAA0B,CAAC,CAAC;QAC5E,IAAI,CAAC,cAAc,EAAE;YACnB,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;SACtC;QAED,eAAM,CAAC,KAAK,CAAC,mBAAmB,cAAc,EAAE,CAAC,CAAC;QAClD,aAAa,GAAG,IAAA,kBAAS,EACvB,OAAO,EACP,eAAe,EACf,YAAY,EACZ,cAAc,CACf,CAAC;QAEF,IAAI,aAAa,KAAK,OAAO,EAAE;YAC7B,eAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;SAC5C;aAAM;YACL,eAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;SACxC;KACF;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,IAAI,CACT;YACE,OAAO;YACP,YAAY;YACZ,WAAW;SACZ,EACD,uBAAuB,CACxB,CAAC;KACH;IACD,OAAO,EAAE,aAAa,EAAE,CAAC;AAC3B,CAAC;AA3DD,gDA2DC","sourcesContent":["import semver, { ReleaseType } from 'semver';\nimport { XmlDocument } from 'xmldoc';\nimport { logger } from '../../../logger';\nimport { replaceAt } from '../../../util/string';\nimport type { BumpPackageVersionResult } from '../types';\n\nexport function bumpPackageVersion(\n  content: string,\n  currentValue: string | undefined,\n  bumpVersion: ReleaseType | string\n): BumpPackageVersionResult {\n  logger.debug(\n    { bumpVersion, currentValue },\n    'Checking if we should bump project version'\n  );\n  let bumpedContent = content;\n\n  if (!currentValue) {\n    logger.warn('Unable to bump project version, project has no version');\n    return { bumpedContent };\n  }\n\n  if (!semver.valid(currentValue)) {\n    logger.warn(\n      { currentValue },\n      'Unable to bump project version, not a valid semver'\n    );\n    return { bumpedContent };\n  }\n\n  try {\n    const project = new XmlDocument(content);\n    const versionNode = project.descendantWithPath('PropertyGroup.Version')!;\n    const startTagPosition = versionNode.startTagPosition;\n    const versionPosition = content.indexOf(versionNode.val, startTagPosition);\n\n    const newProjVersion = semver.inc(currentValue, bumpVersion as ReleaseType);\n    if (!newProjVersion) {\n      throw new Error('semver inc failed');\n    }\n\n    logger.debug(`newProjVersion: ${newProjVersion}`);\n    bumpedContent = replaceAt(\n      content,\n      versionPosition,\n      currentValue,\n      newProjVersion\n    );\n\n    if (bumpedContent === content) {\n      logger.debug('Version was already bumped');\n    } else {\n      logger.debug('project version bumped');\n    }\n  } catch (err) {\n    logger.warn(\n      {\n        content,\n        currentValue,\n        bumpVersion,\n      },\n      'Failed to bumpVersion'\n    );\n  }\n  return { bumpedContent };\n}\n"]}