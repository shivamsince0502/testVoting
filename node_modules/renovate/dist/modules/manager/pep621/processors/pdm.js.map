{"version":3,"file":"pdm.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/pep621/processors/pdm.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { TEMPORARY_ERROR } from '../../../../constants/error-messages';\nimport { logger } from '../../../../logger';\nimport { exec } from '../../../../util/exec';\nimport type { ExecOptions, ToolConstraint } from '../../../../util/exec/types';\nimport { getSiblingFileName, readLocalFile } from '../../../../util/fs';\nimport { PypiDatasource } from '../../../datasource/pypi';\nimport type {\n  PackageDependency,\n  UpdateArtifact,\n  UpdateArtifactsResult,\n  Upgrade,\n} from '../../types';\nimport type { PyProject } from '../schema';\nimport { depTypes, parseDependencyGroupRecord } from '../utils';\nimport type { PyProjectProcessor } from './types';\n\nconst pdmUpdateCMD = 'pdm update --no-sync';\n\nexport class PdmProcessor implements PyProjectProcessor {\n  process(project: PyProject, deps: PackageDependency[]): PackageDependency[] {\n    const pdm = project.tool?.pdm;\n    if (is.nullOrUndefined(pdm)) {\n      return deps;\n    }\n\n    deps.push(\n      ...parseDependencyGroupRecord(\n        depTypes.pdmDevDependencies,\n        pdm['dev-dependencies']\n      )\n    );\n\n    const pdmSource = pdm.source;\n    if (is.nullOrUndefined(pdmSource)) {\n      return deps;\n    }\n\n    // add pypi default url, if there is no source declared with the name `pypi`. https://daobook.github.io/pdm/pyproject/tool-pdm/#specify-other-sources-for-finding-packages\n    const containsPyPiUrl = pdmSource.some((value) => value.name === 'pypi');\n    const registryUrls: string[] = [];\n    if (!containsPyPiUrl) {\n      registryUrls.push(PypiDatasource.defaultURL);\n    }\n    for (const source of pdmSource) {\n      registryUrls.push(source.url);\n    }\n    for (const dep of deps) {\n      dep.registryUrls = registryUrls;\n    }\n\n    return deps;\n  }\n\n  async updateArtifacts(\n    updateArtifact: UpdateArtifact,\n    project: PyProject\n  ): Promise<UpdateArtifactsResult[] | null> {\n    const { config, updatedDeps, packageFileName } = updateArtifact;\n\n    const isLockFileMaintenance = config.updateType === 'lockFileMaintenance';\n\n    // abort if no lockfile is defined\n    const lockFileName = getSiblingFileName(packageFileName, 'pdm.lock');\n    try {\n      const existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n      if (is.nullOrUndefined(existingLockFileContent)) {\n        logger.debug('No pdm.lock found');\n        return null;\n      }\n\n      const pythonConstraint: ToolConstraint = {\n        toolName: 'python',\n        constraint:\n          config.constraints?.python ?? project.project?.['requires-python'],\n      };\n      const pdmConstraint: ToolConstraint = {\n        toolName: 'pdm',\n        constraint: config.constraints?.pdm,\n      };\n\n      const execOptions: ExecOptions = {\n        cwdFile: packageFileName,\n        docker: {},\n        toolConstraints: [pythonConstraint, pdmConstraint],\n      };\n\n      // on lockFileMaintenance do not specify any packages and update the complete lock file\n      // else only update specific packages\n      const cmds: string[] = [];\n      if (isLockFileMaintenance) {\n        cmds.push(pdmUpdateCMD);\n      } else {\n        cmds.push(...generateCMDs(updatedDeps));\n      }\n      await exec(cmds, execOptions);\n\n      // check for changes\n      const fileChanges: UpdateArtifactsResult[] = [];\n      const newLockContent = await readLocalFile(lockFileName, 'utf8');\n      const isLockFileChanged = existingLockFileContent !== newLockContent;\n      if (isLockFileChanged) {\n        fileChanges.push({\n          file: {\n            type: 'addition',\n            path: lockFileName,\n            contents: newLockContent,\n          },\n        });\n      } else {\n        logger.debug('pdm.lock is unchanged');\n      }\n\n      return fileChanges.length ? fileChanges : null;\n    } catch (err) {\n      // istanbul ignore if\n      if (err.message === TEMPORARY_ERROR) {\n        throw err;\n      }\n      logger.debug({ err }, 'Failed to update PDM lock file');\n      return [\n        {\n          artifactError: {\n            lockFile: lockFileName,\n            stderr: err.message,\n          },\n        },\n      ];\n    }\n  }\n}\n\nfunction generateCMDs(updatedDeps: Upgrade[]): string[] {\n  const cmds: string[] = [];\n  const packagesByCMD: Record<string, string[]> = {};\n  for (const dep of updatedDeps) {\n    switch (dep.depType) {\n      case depTypes.optionalDependencies: {\n        const [group, name] = dep.depName!.split('/');\n        addPackageToCMDRecord(\n          packagesByCMD,\n          `${pdmUpdateCMD} -G ${group}`,\n          name\n        );\n        break;\n      }\n      case depTypes.pdmDevDependencies: {\n        const [group, name] = dep.depName!.split('/');\n        addPackageToCMDRecord(\n          packagesByCMD,\n          `${pdmUpdateCMD} -dG ${group}`,\n          name\n        );\n        break;\n      }\n      default: {\n        addPackageToCMDRecord(packagesByCMD, pdmUpdateCMD, dep.packageName!);\n      }\n    }\n  }\n\n  for (const commandPrefix in packagesByCMD) {\n    const packageList = packagesByCMD[commandPrefix].join(' ');\n    const cmd = `${commandPrefix} ${packageList}`;\n    cmds.push(cmd);\n  }\n\n  return cmds;\n}\n\nfunction addPackageToCMDRecord(\n  packagesByCMD: Record<string, string[]>,\n  commandPrefix: string,\n  packageName: string\n): void {\n  if (is.nullOrUndefined(packagesByCMD[commandPrefix])) {\n    packagesByCMD[commandPrefix] = [];\n  }\n  packagesByCMD[commandPrefix].push(packageName);\n}\n"]}