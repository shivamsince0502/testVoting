{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gitlabci-include/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { load } from 'js-yaml';\nimport { GlobalConfig } from '../../../config/global';\nimport { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport { GitlabTagsDatasource } from '../../datasource/gitlab-tags';\nimport type {\n  GitlabInclude,\n  GitlabIncludeProject,\n  GitlabPipeline,\n} from '../gitlabci/types';\nimport { replaceReferenceTags } from '../gitlabci/utils';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport {\n  filterIncludeFromGitlabPipeline,\n  isGitlabIncludeProject,\n  isNonEmptyObject,\n} from './common';\n\nfunction extractDepFromIncludeFile(\n  includeObj: GitlabIncludeProject\n): PackageDependency {\n  const dep: PackageDependency = {\n    datasource: GitlabTagsDatasource.id,\n    depName: includeObj.project,\n    depType: 'repository',\n  };\n  if (!includeObj.ref) {\n    dep.skipReason = 'unspecified-version';\n    return dep;\n  }\n  dep.currentValue = includeObj.ref;\n  return dep;\n}\n\nfunction getIncludeProjectsFromInclude(\n  includeValue: GitlabInclude[] | GitlabInclude\n): GitlabIncludeProject[] {\n  const includes = is.array(includeValue) ? includeValue : [includeValue];\n\n  // Filter out includes that dont have a file & project.\n  return includes.filter(isGitlabIncludeProject);\n}\n\nfunction getAllIncludeProjects(data: GitlabPipeline): GitlabIncludeProject[] {\n  // If Array, search each element.\n  if (is.array(data)) {\n    return (data as GitlabPipeline[])\n      .filter(isNonEmptyObject)\n      .map(getAllIncludeProjects)\n      .flat();\n  }\n\n  const childrenData = Object.values(filterIncludeFromGitlabPipeline(data))\n    .filter(isNonEmptyObject)\n    .map(getAllIncludeProjects)\n    .flat();\n\n  // Process include key.\n  if (data.include) {\n    childrenData.push(...getIncludeProjectsFromInclude(data.include));\n  }\n  return childrenData;\n}\n\nexport function extractPackageFile(\n  content: string,\n  packageFile?: string\n): PackageFileContent | null {\n  const deps: PackageDependency[] = [];\n  const platform = GlobalConfig.get('platform');\n  const endpoint = GlobalConfig.get('endpoint');\n  try {\n    const doc = load(replaceReferenceTags(content), {\n      json: true,\n    }) as GitlabPipeline;\n    const includes = getAllIncludeProjects(doc);\n    for (const includeObj of includes) {\n      const dep = extractDepFromIncludeFile(includeObj);\n      if (platform === 'gitlab' && endpoint) {\n        dep.registryUrls = [endpoint.replace(regEx(/\\/api\\/v4\\/?/), '')];\n      }\n      deps.push(dep);\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.stack?.startsWith('YAMLException:')) {\n      logger.debug(\n        { err, packageFile },\n        'YAML exception extracting GitLab CI includes'\n      );\n    } else {\n      logger.debug({ err, packageFile }, 'Error extracting GitLab CI includes');\n    }\n  }\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}