{"version":3,"file":"git.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/bazel/rules/git.ts"],"names":[],"mappings":";;;;AAAA,sFAAiD;AACjD,6BAAwB;AACxB,+CAA4C;AAC5C,kDAA+C;AAC/C,yEAA+E;AAG/E,MAAM,cAAc,GAAG,IAAA,aAAK,EAC1B,sDAAsD,CACvD,CAAC;AAEF,SAAS,iBAAiB,CAAC,KAAa;IACtC,qBAAqB;IACrB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;QACjC,eAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,qCAAqC,CAAC,CAAC;KACzE;IACD,OAAO,IAAA,6BAAc,EAAC,KAAK,CAAC,EAAE,KAAK,CAAC,cAAc,CAAC,EAAE,MAAM,EAAE,WAAW,CAAC;AAC3E,CAAC;AAEY,QAAA,QAAQ,GAAG,CAAC,gBAAgB,CAAU,CAAC;AAEvC,QAAA,SAAS,GAAG,OAAC;KACvB,MAAM,CAAC;IACN,IAAI,EAAE,OAAC,CAAC,IAAI,CAAC,gBAAQ,CAAC;IACtB,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;IAChB,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC1B,MAAM,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC7B,MAAM,EAAE,OAAC,CAAC,MAAM,EAAE;CACnB,CAAC;KACD,MAAM,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,MAAM,CAAC;KAC9C,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,EAAuB,EAAE;IACtE,MAAM,GAAG,GAAsB;QAC7B,OAAO,EAAE,IAAI;QACb,OAAO,EAAE,IAAI;KACd,CAAC;IAEF,IAAI,GAAG,EAAE;QACP,GAAG,CAAC,YAAY,GAAG,GAAG,CAAC;KACxB;IAED,IAAI,MAAM,EAAE;QACV,GAAG,CAAC,aAAa,GAAG,MAAM,CAAC;KAC5B;IAED,MAAM,aAAa,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;IAChD,IAAI,aAAa,EAAE;QACjB,GAAG,CAAC,UAAU,GAAG,0CAAwB,CAAC,EAAE,CAAC;QAC7C,GAAG,CAAC,WAAW,GAAG,aAAa,CAAC;KACjC;IAED,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE;QACnB,GAAG,CAAC,UAAU,GAAG,wBAAwB,CAAC;KAC3C;IAED,OAAO,CAAC,GAAG,CAAC,CAAC;AACf,CAAC,CAAC,CAAC","sourcesContent":["import parseGithubUrl from 'github-url-from-git';\nimport { z } from 'zod';\nimport { logger } from '../../../../logger';\nimport { regEx } from '../../../../util/regex';\nimport { GithubReleasesDatasource } from '../../../datasource/github-releases';\nimport type { PackageDependency } from '../../types';\n\nconst githubUrlRegex = regEx(\n  /^https:\\/\\/github\\.com\\/(?<packageName>[^/]+\\/[^/]+)/\n);\n\nfunction githubPackageName(input: string): string | undefined {\n  // istanbul ignore if\n  if (!input.startsWith('https://')) {\n    logger.once.info({ url: input }, `Bazel: non-https git_repository URL`);\n  }\n  return parseGithubUrl(input)?.match(githubUrlRegex)?.groups?.packageName;\n}\n\nexport const gitRules = ['git_repository'] as const;\n\nexport const GitTarget = z\n  .object({\n    rule: z.enum(gitRules),\n    name: z.string(),\n    tag: z.string().optional(),\n    commit: z.string().optional(),\n    remote: z.string(),\n  })\n  .refine(({ tag, commit }) => !!tag || !!commit)\n  .transform(({ rule, name, tag, commit, remote }): PackageDependency[] => {\n    const dep: PackageDependency = {\n      depType: rule,\n      depName: name,\n    };\n\n    if (tag) {\n      dep.currentValue = tag;\n    }\n\n    if (commit) {\n      dep.currentDigest = commit;\n    }\n\n    const githubPackage = githubPackageName(remote);\n    if (githubPackage) {\n      dep.datasource = GithubReleasesDatasource.id;\n      dep.packageName = githubPackage;\n    }\n\n    if (!dep.datasource) {\n      dep.skipReason = 'unsupported-datasource';\n    }\n\n    return [dep];\n  });\n"]}