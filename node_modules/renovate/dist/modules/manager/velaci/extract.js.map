{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/velaci/extract.ts"],"names":[],"mappings":";;;AAAA,qCAA+B;AAC/B,4CAAyC;AACzC,+CAAkD;AAClD,mDAA+C;AAI/C,SAAgB,kBAAkB,CAChC,IAAY,EACZ,WAAoB;IAEpB,IAAI,GAA0C,CAAC;IAE/C,IAAI;QACF,GAAG,GAAG,IAAA,cAAI,EAAC,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAA8B,CAAC;KAC/D;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,EAAE,4BAA4B,CAAC,CAAC;QACjE,OAAO,IAAI,CAAC;KACb;IAED,MAAM,IAAI,GAAwB,EAAE,CAAC;IAErC,qBAAqB;IACrB,KAAK,MAAM,IAAI,IAAI,IAAA,mBAAW,EAAC,GAAG,CAAC,KAAK,CAAC,EAAE;QACzC,MAAM,GAAG,GAAG,IAAA,gBAAM,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE/B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAChB;IAED,wBAAwB;IACxB,KAAK,MAAM,OAAO,IAAI,IAAA,mBAAW,EAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;QAC/C,MAAM,GAAG,GAAG,IAAA,gBAAM,EAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAElC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAChB;IAED,sBAAsB;IACtB,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,IAAI,EAAE,CAAC,EAAE;QACnD,KAAK,MAAM,IAAI,IAAI,IAAA,mBAAW,EAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YAC3C,MAAM,GAAG,GAAG,IAAA,gBAAM,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAE/B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAChB;KACF;IAED,gBAAgB;IAChB,KAAK,MAAM,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC,EAAE;QACrD,IAAI,MAAM,CAAC,MAAM,EAAE;YACjB,MAAM,GAAG,GAAG,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAExC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAChB;KACF;IAED,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QAChB,OAAO,IAAI,CAAC;KACb;IAED,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC;AApDD,gDAoDC","sourcesContent":["import { load } from 'js-yaml';\nimport { logger } from '../../../logger';\nimport { coerceArray } from '../../../util/array';\nimport { getDep } from '../dockerfile/extract';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport type { VelaPipelineConfiguration } from './types';\n\nexport function extractPackageFile(\n  file: string,\n  packageFile?: string\n): PackageFileContent | null {\n  let doc: VelaPipelineConfiguration | undefined;\n\n  try {\n    doc = load(file, { json: true }) as VelaPipelineConfiguration;\n  } catch (err) {\n    logger.debug({ err, packageFile }, 'Failed to parse Vela file.');\n    return null;\n  }\n\n  const deps: PackageDependency[] = [];\n\n  // iterate over steps\n  for (const step of coerceArray(doc.steps)) {\n    const dep = getDep(step.image);\n\n    deps.push(dep);\n  }\n\n  // iterate over services\n  for (const service of coerceArray(doc.services)) {\n    const dep = getDep(service.image);\n\n    deps.push(dep);\n  }\n\n  // iterate over stages\n  for (const stage of Object.values(doc.stages ?? {})) {\n    for (const step of coerceArray(stage.steps)) {\n      const dep = getDep(step.image);\n\n      deps.push(dep);\n    }\n  }\n\n  // check secrets\n  for (const secret of Object.values(doc.secrets ?? {})) {\n    if (secret.origin) {\n      const dep = getDep(secret.origin.image);\n\n      deps.push(dep);\n    }\n  }\n\n  if (!deps.length) {\n    return null;\n  }\n\n  return { deps };\n}\n"]}