"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateArtifacts = void 0;
const tslib_1 = require("tslib");
const is_1 = tslib_1.__importDefault(require("@sindresorhus/is"));
const shlex_1 = require("shlex");
const error_messages_1 = require("../../../constants/error-messages");
const logger_1 = require("../../../logger");
const exec_1 = require("../../../util/exec");
const fs_1 = require("../../../util/fs");
const regex_1 = require("../../../util/regex");
function getFlutterConstraint(lockFileContent) {
    return (0, regex_1.regEx)(/^\tflutter: ['"](?<flutterVersion>.*)['"]$/m).exec(lockFileContent)?.groups?.flutterVersion;
}
function getDartConstraint(lockFileContent) {
    return (0, regex_1.regEx)(/^\tdart: ['"](?<dartVersion>.*)['"]$/m).exec(lockFileContent)
        ?.groups?.dartVersion;
}
async function updateArtifacts({ packageFileName, updatedDeps, newPackageFileContent, config, }) {
    logger_1.logger.debug(`pub.updateArtifacts(${packageFileName})`);
    const isLockFileMaintenance = config.updateType === 'lockFileMaintenance';
    if (is_1.default.emptyArray(updatedDeps) && !isLockFileMaintenance) {
        logger_1.logger.debug('No updated pub deps - returning null');
        return null;
    }
    const lockFileName = (0, fs_1.getSiblingFileName)(packageFileName, 'pubspec.lock');
    const oldLockFileContent = await (0, fs_1.readLocalFile)(lockFileName, 'utf8');
    if (!oldLockFileContent) {
        logger_1.logger.debug('No pubspec.lock found');
        return null;
    }
    try {
        await (0, fs_1.writeLocalFile)(packageFileName, newPackageFileContent);
        const isFlutter = newPackageFileContent.includes('sdk: flutter');
        const toolName = isFlutter ? 'flutter' : 'dart';
        const cmd = [];
        if (isLockFileMaintenance) {
            cmd.push(`${toolName} pub upgrade`);
        }
        else {
            cmd.push(`${toolName} pub upgrade ${updatedDeps
                .map((dep) => dep.depName)
                .filter(is_1.default.string)
                .map((dep) => (0, shlex_1.quote)(dep))
                .join(' ')}`);
        }
        const constraint = isFlutter
            ? config.constraints?.flutter ?? getFlutterConstraint(oldLockFileContent)
            : config.constraints?.dart ?? getDartConstraint(oldLockFileContent);
        const execOptions = {
            cwdFile: packageFileName,
            docker: {},
            toolConstraints: [
                {
                    toolName,
                    constraint,
                },
            ],
        };
        await (0, exec_1.exec)(cmd, execOptions);
        const newLockFileContent = await (0, fs_1.readLocalFile)(lockFileName, 'utf8');
        if (oldLockFileContent === newLockFileContent) {
            return null;
        }
        return [
            {
                file: {
                    type: 'addition',
                    path: lockFileName,
                    contents: newLockFileContent,
                },
            },
        ];
    }
    catch (err) {
        // istanbul ignore if
        if (err.message === error_messages_1.TEMPORARY_ERROR) {
            throw err;
        }
        logger_1.logger.warn({ lockfile: lockFileName, err }, `Failed to update lock file`);
        return [
            {
                artifactError: {
                    lockFile: lockFileName,
                    stderr: err.message,
                },
            },
        ];
    }
}
exports.updateArtifacts = updateArtifacts;
//# sourceMappingURL=artifacts.js.map