"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPrimitive = exports.isValue = exports.array = exports.attribute = exports.record = exports.boolean = exports.string = exports.AttributeFragmentSchema = exports.RecordFragmentSchema = exports.ArrayFragmentSchema = exports.BooleanFragmentSchema = exports.StringFragmentSchema = void 0;
const tslib_1 = require("tslib");
const zod_1 = require("zod");
const schema_utils_1 = require("../../../util/schema-utils");
const starlark = tslib_1.__importStar(require("./starlark"));
exports.StringFragmentSchema = zod_1.z.object({
    type: zod_1.z.literal('string'),
    value: zod_1.z.string(),
    isComplete: zod_1.z.literal(true),
});
exports.BooleanFragmentSchema = zod_1.z.object({
    type: zod_1.z.literal('boolean'),
    value: zod_1.z.boolean(),
    isComplete: zod_1.z.literal(true),
});
const PrimitiveFragmentsSchema = zod_1.z.discriminatedUnion('type', [
    exports.StringFragmentSchema,
    exports.BooleanFragmentSchema,
]);
exports.ArrayFragmentSchema = zod_1.z.object({
    type: zod_1.z.literal('array'),
    items: (0, schema_utils_1.LooseArray)(PrimitiveFragmentsSchema),
    isComplete: zod_1.z.boolean(),
});
const ValueFragmentsSchema = zod_1.z.discriminatedUnion('type', [
    exports.StringFragmentSchema,
    exports.BooleanFragmentSchema,
    exports.ArrayFragmentSchema,
]);
exports.RecordFragmentSchema = zod_1.z.object({
    type: zod_1.z.literal('record'),
    children: (0, schema_utils_1.LooseRecord)(ValueFragmentsSchema),
    isComplete: zod_1.z.boolean(),
});
exports.AttributeFragmentSchema = zod_1.z.object({
    type: zod_1.z.literal('attribute'),
    name: zod_1.z.string(),
    value: ValueFragmentsSchema.optional(),
    isComplete: zod_1.z.boolean(),
});
const AllFragmentsSchema = zod_1.z.discriminatedUnion('type', [
    exports.ArrayFragmentSchema,
    exports.AttributeFragmentSchema,
    exports.BooleanFragmentSchema,
    exports.RecordFragmentSchema,
    exports.StringFragmentSchema,
]);
function string(value) {
    return {
        type: 'string',
        isComplete: true,
        value,
    };
}
exports.string = string;
function boolean(value) {
    return {
        type: 'boolean',
        isComplete: true,
        value: typeof value === 'string' ? starlark.asBoolean(value) : value,
    };
}
exports.boolean = boolean;
function record(children = {}, isComplete = false) {
    return {
        type: 'record',
        isComplete,
        children,
    };
}
exports.record = record;
function attribute(name, value, isComplete = false) {
    return {
        type: 'attribute',
        name,
        value,
        isComplete,
    };
}
exports.attribute = attribute;
function array(items = [], isComplete = false) {
    return {
        type: 'array',
        items,
        isComplete,
    };
}
exports.array = array;
function isValue(data) {
    const result = ValueFragmentsSchema.safeParse(data);
    return result.success;
}
exports.isValue = isValue;
function isPrimitive(data) {
    const result = PrimitiveFragmentsSchema.safeParse(data);
    return result.success;
}
exports.isPrimitive = isPrimitive;
//# sourceMappingURL=fragments.js.map