{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/bazel-module/extract.ts"],"names":[],"mappings":";;;;AAAA,iCAAgC;AAChC,4CAAyC;AACzC,+CAA2D;AAC3D,6DAAwD;AAExD,2DAAqC;AACrC,qCAAiC;AACjC,mCAAsD;AACtD,uDAAiC;AAE1B,KAAK,UAAU,kBAAkB,CACtC,OAAe,EACf,WAAmB;IAEnB,IAAI;QACF,MAAM,OAAO,GAAG,IAAA,cAAK,EAAC,OAAO,CAAC,CAAC;QAC/B,MAAM,GAAG,GAA8B,IAAA,yBAAU,EAC/C,mCAA2B,CAC5B;aACE,SAAS,CAAC,KAAK,CAAC,qBAAqB,CAAC;aACtC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;aACpD,KAAK,CAAC,OAAO,CAAC,CAAC;QAClB,IAAI,CAAC,GAAG,EAAE;YACR,OAAO,IAAI,CAAC;SACb;QAED,MAAM,YAAY,GAAG,CAAC,MAAM,OAAO,CAAC,IAAI,CAAC,IAAA,eAAO,EAAC,WAAW,CAAC,CAAC,CAAC;YAC7D,+CAA+C;aAC9C,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,MAAM,KAAK,SAAS,CAAC;aACvC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,KAAK,CAAC;aAC5C,MAAM,CAAC,4BAAoB,CAAC,CAAC;QAChC,IAAI,YAAY,CAAC,MAAM,EAAE;YACvB,GAAG,CAAC,YAAY,GAAG,YAAY,CAAC;SACjC;QAED,OAAO,GAAG,CAAC;KACZ;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,EAAE,oCAAoC,CAAC,CAAC;QACzE,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AA9BD,gDA8BC","sourcesContent":["import { dirname } from 'upath';\nimport { logger } from '../../../logger';\nimport { isNotNullOrUndefined } from '../../../util/array';\nimport { LooseArray } from '../../../util/schema-utils';\nimport type { PackageFileContent } from '../types';\nimport * as bazelrc from './bazelrc';\nimport { parse } from './parser';\nimport { RuleToBazelModulePackageDep } from './rules';\nimport * as rules from './rules';\n\nexport async function extractPackageFile(\n  content: string,\n  packageFile: string\n): Promise<PackageFileContent | null> {\n  try {\n    const records = parse(content);\n    const pfc: PackageFileContent | null = LooseArray(\n      RuleToBazelModulePackageDep\n    )\n      .transform(rules.toPackageDependencies)\n      .transform((deps) => (deps.length ? { deps } : null))\n      .parse(records);\n    if (!pfc) {\n      return null;\n    }\n\n    const registryUrls = (await bazelrc.read(dirname(packageFile)))\n      // Ignore any entries for custom configurations\n      .filter((ce) => ce.config === undefined)\n      .map((ce) => ce.getOption('registry')?.value)\n      .filter(isNotNullOrUndefined);\n    if (registryUrls.length) {\n      pfc.registryUrls = registryUrls;\n    }\n\n    return pfc;\n  } catch (err) {\n    logger.debug({ err, packageFile }, 'Failed to parse bazel module file.');\n    return null;\n  }\n}\n"]}