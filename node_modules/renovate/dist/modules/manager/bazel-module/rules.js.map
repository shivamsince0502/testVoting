{"version":3,"file":"rules.js","sourceRoot":"","sources":["../../../../lib/modules/manager/bazel-module/rules.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport parseGithubUrl from 'github-url-from-git';\nimport { z } from 'zod';\nimport { logger } from '../../../logger';\nimport type { SkipReason } from '../../../types';\nimport { clone } from '../../../util/clone';\nimport { regEx } from '../../../util/regex';\nimport { BazelDatasource } from '../../datasource/bazel';\nimport { GithubTagsDatasource } from '../../datasource/github-tags';\nimport type { PackageDependency } from '../types';\nimport { RecordFragmentSchema, StringFragmentSchema } from './fragments';\n\n// Rule Schemas\n\nexport interface BasePackageDep extends PackageDependency {\n  depType: string;\n  depName: string;\n}\n\ntype BasePackageDepMergeKeys = Extract<keyof BasePackageDep, 'registryUrls'>;\n\nexport interface MergePackageDep extends BasePackageDep {\n  // The fields that should be copied from this struct to the bazel_dep\n  // PackageDependency.\n  bazelDepMergeFields: BasePackageDepMergeKeys[];\n}\n\nexport interface OverridePackageDep extends BasePackageDep {\n  // This value is set as the skipReason on the bazel_dep PackageDependency.\n  bazelDepSkipReason: SkipReason;\n}\n\nexport type BazelModulePackageDep =\n  | BasePackageDep\n  | OverridePackageDep\n  | MergePackageDep;\n\nfunction isOverride(value: BazelModulePackageDep): value is OverridePackageDep {\n  return 'bazelDepSkipReason' in value;\n}\n\nfunction isMerge(value: BazelModulePackageDep): value is MergePackageDep {\n  return 'bazelDepMergeFields' in value;\n}\n\n// This function exists to remove properties that are specific to\n// BazelModulePackageDep. In theory, there is no harm in leaving the properties\n// as it does not invalidate the PackageDependency interface. However, it might\n// be surprising to someone outside the bazel-module code to see the extra\n// properties.\nexport function bazelModulePackageDepToPackageDependency(\n  bmpd: BazelModulePackageDep\n): PackageDependency {\n  const copy: BazelModulePackageDep = clone(bmpd);\n  if (isOverride(copy)) {\n    const partial = copy as Partial<OverridePackageDep>;\n    delete partial.bazelDepSkipReason;\n  }\n  if (isMerge(copy)) {\n    const partial = copy as Partial<MergePackageDep>;\n    delete partial.bazelDepMergeFields;\n  }\n  return copy;\n}\n\nconst BazelDepToPackageDep = RecordFragmentSchema.extend({\n  children: z.object({\n    rule: StringFragmentSchema.extend({\n      value: z.literal('bazel_dep'),\n    }),\n    name: StringFragmentSchema,\n    version: StringFragmentSchema,\n  }),\n}).transform(\n  ({ children: { rule, name, version } }): BasePackageDep => ({\n    datasource: BazelDatasource.id,\n    depType: rule.value,\n    depName: name.value,\n    currentValue: version.value,\n  })\n);\n\nconst GitOverrideToPackageDep = RecordFragmentSchema.extend({\n  children: z.object({\n    rule: StringFragmentSchema.extend({\n      value: z.literal('git_override'),\n    }),\n    module_name: StringFragmentSchema,\n    remote: StringFragmentSchema,\n    commit: StringFragmentSchema,\n  }),\n}).transform(\n  ({\n    children: { rule, module_name: moduleName, remote, commit },\n  }): OverridePackageDep => {\n    const override: OverridePackageDep = {\n      depType: rule.value,\n      depName: moduleName.value,\n      bazelDepSkipReason: 'git-dependency',\n      currentDigest: commit.value,\n    };\n    const ghPackageName = githubPackageName(remote.value);\n    if (is.nonEmptyString(ghPackageName)) {\n      override.datasource = GithubTagsDatasource.id;\n      override.packageName = ghPackageName;\n    } else {\n      override.skipReason = 'unsupported-datasource';\n    }\n    return override;\n  }\n);\n\nconst SingleVersionOverrideToPackageDep = RecordFragmentSchema.extend({\n  children: z.object({\n    rule: StringFragmentSchema.extend({\n      value: z.literal('single_version_override'),\n    }),\n    module_name: StringFragmentSchema,\n    version: StringFragmentSchema.optional(),\n    registry: StringFragmentSchema.optional(),\n  }),\n}).transform(\n  ({\n    children: { rule, module_name: moduleName, version, registry },\n  }): BasePackageDep => {\n    const base: BasePackageDep = {\n      depType: rule.value,\n      depName: moduleName.value,\n      skipReason: 'ignored',\n    };\n    // If a version is specified, then add a skipReason to bazel_dep\n    if (version) {\n      const override = base as OverridePackageDep;\n      override.bazelDepSkipReason = 'is-pinned';\n      override.currentValue = version.value;\n    }\n    // If a registry is specified, then merge it into the bazel_dep\n    if (registry) {\n      const merge = base as MergePackageDep;\n      merge.bazelDepMergeFields = ['registryUrls'];\n      merge.registryUrls = [registry.value];\n    }\n    return base;\n  }\n);\n\nconst UnsupportedOverrideToPackageDep = RecordFragmentSchema.extend({\n  children: z.object({\n    rule: StringFragmentSchema.extend({\n      value: z.enum(['archive_override', 'local_path_override']),\n    }),\n    module_name: StringFragmentSchema,\n  }),\n}).transform(\n  ({ children: { rule, module_name: moduleName } }): OverridePackageDep => {\n    let bazelDepSkipReason: SkipReason = 'unsupported';\n    switch (rule.value) {\n      case 'archive_override':\n        bazelDepSkipReason = 'file-dependency';\n        break;\n      case 'local_path_override':\n        bazelDepSkipReason = 'local-dependency';\n        break;\n    }\n    return {\n      depType: rule.value,\n      depName: moduleName.value,\n      skipReason: 'unsupported-datasource',\n      bazelDepSkipReason,\n    };\n  }\n);\n\nexport const RuleToBazelModulePackageDep = z.union([\n  BazelDepToPackageDep,\n  GitOverrideToPackageDep,\n  SingleVersionOverrideToPackageDep,\n  UnsupportedOverrideToPackageDep,\n]);\n\nconst githubRemoteRegex = regEx(\n  /^https:\\/\\/github\\.com\\/(?<packageName>[^/]+\\/.+)$/\n);\nfunction githubPackageName(remote: string): string | undefined {\n  return parseGithubUrl(remote)?.match(githubRemoteRegex)?.groups?.packageName;\n}\n\nfunction collectByModule(\n  packageDeps: BazelModulePackageDep[]\n): BazelModulePackageDep[][] {\n  const rulesByModule = new Map<string, BasePackageDep[]>();\n  for (const pkgDep of packageDeps) {\n    const bmi = rulesByModule.get(pkgDep.depName) ?? [];\n    bmi.push(pkgDep);\n    rulesByModule.set(pkgDep.depName, bmi);\n  }\n  return Array.from(rulesByModule.values());\n}\n\nexport function processModulePkgDeps(\n  packageDeps: BazelModulePackageDep[]\n): PackageDependency[] {\n  if (!packageDeps.length) {\n    return [];\n  }\n  const moduleName = packageDeps[0].depName;\n  const bazelDep = packageDeps.find((pd) => pd.depType === 'bazel_dep');\n  if (!bazelDep) {\n    logger.debug(`A 'bazel_dep' was not found for '${moduleName}'.`);\n    return [];\n  }\n  // Create a new bazelDep that will be modified. We do not want to change the\n  // input.\n  const bazelDepOut = { ...bazelDep };\n  const deps: PackageDependency[] = [bazelDepOut];\n  const merges = packageDeps.filter(isMerge);\n  for (const merge of merges) {\n    merge.bazelDepMergeFields.forEach((k) => (bazelDepOut[k] = merge[k]));\n  }\n  const overrides = packageDeps.filter(isOverride);\n  if (overrides.length === 0) {\n    return deps;\n  }\n  // It is an error for more than one override to exist for a module. We will\n  // ignore the overrides if there is more than one.\n  if (overrides.length > 1) {\n    const depTypes = overrides.map((o) => o.depType);\n    logger.debug(\n      { depName: moduleName, depTypes },\n      'More than one override for a module was found'\n    );\n    return deps;\n  }\n  const override = overrides[0];\n  deps.push(bazelModulePackageDepToPackageDependency(override));\n  bazelDepOut.skipReason = override.bazelDepSkipReason;\n  return deps;\n}\n\nexport function toPackageDependencies(\n  packageDeps: BazelModulePackageDep[]\n): PackageDependency[] {\n  return collectByModule(packageDeps).map(processModulePkgDeps).flat();\n}\n"]}