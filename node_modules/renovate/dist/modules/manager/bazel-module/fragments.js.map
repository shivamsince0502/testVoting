{"version":3,"file":"fragments.js","sourceRoot":"","sources":["../../../../lib/modules/manager/bazel-module/fragments.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\nimport { LooseArray, LooseRecord } from '../../../util/schema-utils';\nimport * as starlark from './starlark';\n\nexport const StringFragmentSchema = z.object({\n  type: z.literal('string'),\n  value: z.string(),\n  isComplete: z.literal(true),\n});\nexport const BooleanFragmentSchema = z.object({\n  type: z.literal('boolean'),\n  value: z.boolean(),\n  isComplete: z.literal(true),\n});\nconst PrimitiveFragmentsSchema = z.discriminatedUnion('type', [\n  StringFragmentSchema,\n  BooleanFragmentSchema,\n]);\nexport const ArrayFragmentSchema = z.object({\n  type: z.literal('array'),\n  items: LooseArray(PrimitiveFragmentsSchema),\n  isComplete: z.boolean(),\n});\nconst ValueFragmentsSchema = z.discriminatedUnion('type', [\n  StringFragmentSchema,\n  BooleanFragmentSchema,\n  ArrayFragmentSchema,\n]);\nexport const RecordFragmentSchema = z.object({\n  type: z.literal('record'),\n  children: LooseRecord(ValueFragmentsSchema),\n  isComplete: z.boolean(),\n});\nexport const AttributeFragmentSchema = z.object({\n  type: z.literal('attribute'),\n  name: z.string(),\n  value: ValueFragmentsSchema.optional(),\n  isComplete: z.boolean(),\n});\nconst AllFragmentsSchema = z.discriminatedUnion('type', [\n  ArrayFragmentSchema,\n  AttributeFragmentSchema,\n  BooleanFragmentSchema,\n  RecordFragmentSchema,\n  StringFragmentSchema,\n]);\n\nexport type AllFragments = z.infer<typeof AllFragmentsSchema>;\nexport type ArrayFragment = z.infer<typeof ArrayFragmentSchema>;\nexport type AttributeFragment = z.infer<typeof AttributeFragmentSchema>;\nexport type BooleanFragment = z.infer<typeof BooleanFragmentSchema>;\nexport type ChildFragments = Record<string, ValueFragments>;\nexport type PrimitiveFragments = z.infer<typeof PrimitiveFragmentsSchema>;\nexport type RecordFragment = z.infer<typeof RecordFragmentSchema>;\nexport type StringFragment = z.infer<typeof StringFragmentSchema>;\nexport type ValueFragments = z.infer<typeof ValueFragmentsSchema>;\n\nexport function string(value: string): StringFragment {\n  return {\n    type: 'string',\n    isComplete: true,\n    value,\n  };\n}\n\nexport function boolean(value: string | boolean): BooleanFragment {\n  return {\n    type: 'boolean',\n    isComplete: true,\n    value: typeof value === 'string' ? starlark.asBoolean(value) : value,\n  };\n}\n\nexport function record(\n  children: ChildFragments = {},\n  isComplete = false\n): RecordFragment {\n  return {\n    type: 'record',\n    isComplete,\n    children,\n  };\n}\n\nexport function attribute(\n  name: string,\n  value?: ValueFragments,\n  isComplete = false\n): AttributeFragment {\n  return {\n    type: 'attribute',\n    name,\n    value,\n    isComplete,\n  };\n}\n\nexport function array(\n  items: PrimitiveFragments[] = [],\n  isComplete = false\n): ArrayFragment {\n  return {\n    type: 'array',\n    items,\n    isComplete,\n  };\n}\n\nexport function isValue(data: unknown): data is ValueFragments {\n  const result = ValueFragmentsSchema.safeParse(data);\n  return result.success;\n}\n\nexport function isPrimitive(data: unknown): data is PrimitiveFragments {\n  const result = PrimitiveFragmentsSchema.safeParse(data);\n  return result.success;\n}\n"]}