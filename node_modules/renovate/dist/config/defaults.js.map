{"version":3,"file":"defaults.js","sourceRoot":"","sources":["../../lib/config/defaults.ts"],"names":[],"mappings":";;;AAAA,uCAAuC;AAGvC,iFAAiF;AACjF,oFAAoF;AACpF,8FAA8F;AAC9F,yEAAyE;AACzE,MAAM,qBAAqB,GAAG;IAC5B,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI;IACnB,KAAK,EAAE,GAAG,EAAE,CAAC,EAAE;IACf,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI;IAClB,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI;IAClB,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI;CACX,CAAC;AAEX,SAAgB,UAAU,CAAC,MAAuB;IAChD,OAAO,MAAM,CAAC,OAAO,KAAK,SAAS;QACjC,CAAC,CAAC,qBAAqB,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;QACtC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC;AACrB,CAAC;AAJD,gCAIC;AAED,SAAgB,SAAS;IACvB,MAAM,OAAO,GAAG,IAAA,oBAAU,GAAE,CAAC;IAC7B,MAAM,MAAM,GAAc,EAAE,CAAC;IAC7B,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;QACzB,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YAClB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;SAC1C;IACH,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC;AATD,8BASC","sourcesContent":["import { getOptions } from './options';\nimport type { AllConfig, RenovateOptions } from './types';\n\n// Use functions instead of direct values to avoid introducing global references.\n// In particular, we want a new array instance every time we request a default array\n// instead of sharing a single instance - mutation of this value could cause serious problems.\n// See https://github.com/mend/renovate-on-prem/issues/290 for an example\nconst defaultValueFactories = {\n  boolean: () => true,\n  array: () => [],\n  string: () => null,\n  object: () => null,\n  integer: () => null,\n} as const;\n\nexport function getDefault(option: RenovateOptions): any {\n  return option.default === undefined\n    ? defaultValueFactories[option.type]()\n    : option.default;\n}\n\nexport function getConfig(): AllConfig {\n  const options = getOptions();\n  const config: AllConfig = {};\n  options.forEach((option) => {\n    if (!option.parent) {\n      config[option.name] = getDefault(option);\n    }\n  });\n  return config;\n}\n"]}