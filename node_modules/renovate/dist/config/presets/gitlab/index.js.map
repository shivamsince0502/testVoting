{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/config/presets/gitlab/index.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,4CAAyC;AACzC,mFAA8E;AAE9E,sDAAuD;AAGvD,kCAAyE;AAEzE,MAAM,SAAS,GAAG,IAAI,mBAAU,EAAE,CAAC;AACtB,QAAA,QAAQ,GAAG,4BAA4B,CAAC;AAErD,KAAK,UAAU,oBAAoB,CACjC,iBAAyB,EACzB,QAAgB;IAEhB,MAAM,GAAG,GAAG,MAAM,SAAS,CAAC,OAAO,CACjC,GAAG,QAAQ,YAAY,iBAAiB,EAAE,CAC3C,CAAC;IACF,OAAO,GAAG,CAAC,IAAI,CAAC,cAAc,IAAI,QAAQ,CAAC,CAAC,uEAAuE;AACrH,CAAC;AAEM,KAAK,UAAU,aAAa,CACjC,IAAY,EACZ,QAAgB,EAChB,QAAgB,EAChB,GAAwB;IAExB,IAAI,GAAG,GAAG,QAAQ,CAAC;IACnB,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,IAAI,GAAiB,CAAC;IACtB,IAAI;QACF,MAAM,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAChD,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QACvD,IAAI,YAAE,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;YAC1B,GAAG,GAAG,QAAQ,GAAG,EAAE,CAAC;SACrB;aAAM;YACL,MAAM,iBAAiB,GAAG,MAAM,oBAAoB,CAClD,cAAc,EACd,QAAQ,CACT,CAAC;YACF,GAAG,GAAG,QAAQ,iBAAiB,EAAE,CAAC;SACnC;QACD,GAAG,IAAI,YAAY,cAAc,qBAAqB,iBAAiB,OAAO,GAAG,EAAE,CAAC;QACpF,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,YAAY,CAAC,CAAC;QACpC,GAAG,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KAChC;IAAC,OAAO,GAAG,EAAE;QACZ,IAAI,GAAG,YAAY,uCAAiB,EAAE;YACpC,MAAM,GAAG,CAAC;SACX;QACD,eAAM,CAAC,KAAK,CAAC,eAAe,QAAQ,iBAAiB,IAAI,EAAE,CAAC,CAAC;QAC7D,MAAM,IAAI,KAAK,CAAC,2BAAoB,CAAC,CAAC;KACvC;IAED,OAAO,IAAA,kBAAW,EAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC/B,CAAC;AAjCD,sCAiCC;AAED,SAAgB,qBAAqB,CACnC,IAAY,EACZ,UAAkB,EAClB,UAAmB,EACnB,QAAQ,GAAG,gBAAQ,EACnB,GAAwB;IAExB,OAAO,IAAA,kBAAW,EAAC;QACjB,IAAI;QACJ,UAAU,EAAE,UAAU;QACtB,UAAU;QACV,QAAQ;QACR,GAAG;QACH,KAAK,EAAE,aAAa;KACrB,CAAC,CAAC;AACL,CAAC;AAfD,sDAeC;AAED,SAAgB,SAAS,CAAC,EACxB,IAAI,EACJ,UAAU,EACV,UAAU,GAAG,SAAS,EACtB,GAAG,GAAG,SAAS,GACF;IACb,OAAO,qBAAqB,CAAC,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,gBAAQ,EAAE,GAAG,CAAC,CAAC;AAC5E,CAAC;AAPD,8BAOC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport type { GitlabProject } from '../../../types/platform/gitlab';\nimport { GitlabHttp } from '../../../util/http/gitlab';\nimport type { HttpResponse } from '../../../util/http/types';\nimport type { Preset, PresetConfig } from '../types';\nimport { PRESET_DEP_NOT_FOUND, fetchPreset, parsePreset } from '../util';\n\nconst gitlabApi = new GitlabHttp();\nexport const Endpoint = 'https://gitlab.com/api/v4/';\n\nasync function getDefaultBranchName(\n  urlEncodedPkgName: string,\n  endpoint: string\n): Promise<string> {\n  const res = await gitlabApi.getJson<GitlabProject>(\n    `${endpoint}projects/${urlEncodedPkgName}`\n  );\n  return res.body.default_branch ?? 'master'; // should never happen, but we keep this to ensure the current behavior\n}\n\nexport async function fetchJSONFile(\n  repo: string,\n  fileName: string,\n  endpoint: string,\n  tag?: string | undefined\n): Promise<Preset> {\n  let url = endpoint;\n  let ref = '';\n  let res: HttpResponse;\n  try {\n    const urlEncodedRepo = encodeURIComponent(repo);\n    const urlEncodedPkgName = encodeURIComponent(fileName);\n    if (is.nonEmptyString(tag)) {\n      ref = `?ref=${tag}`;\n    } else {\n      const defaultBranchName = await getDefaultBranchName(\n        urlEncodedRepo,\n        endpoint\n      );\n      ref = `?ref=${defaultBranchName}`;\n    }\n    url += `projects/${urlEncodedRepo}/repository/files/${urlEncodedPkgName}/raw${ref}`;\n    logger.trace({ url }, `Preset URL`);\n    res = await gitlabApi.get(url);\n  } catch (err) {\n    if (err instanceof ExternalHostError) {\n      throw err;\n    }\n    logger.debug(`Preset file ${fileName} not found in ${repo}`);\n    throw new Error(PRESET_DEP_NOT_FOUND);\n  }\n\n  return parsePreset(res.body);\n}\n\nexport function getPresetFromEndpoint(\n  repo: string,\n  presetName: string,\n  presetPath?: string,\n  endpoint = Endpoint,\n  tag?: string | undefined\n): Promise<Preset | undefined> {\n  return fetchPreset({\n    repo,\n    filePreset: presetName,\n    presetPath,\n    endpoint,\n    tag,\n    fetch: fetchJSONFile,\n  });\n}\n\nexport function getPreset({\n  repo,\n  presetPath,\n  presetName = 'default',\n  tag = undefined,\n}: PresetConfig): Promise<Preset | undefined> {\n  return getPresetFromEndpoint(repo, presetName, presetPath, Endpoint, tag);\n}\n"]}