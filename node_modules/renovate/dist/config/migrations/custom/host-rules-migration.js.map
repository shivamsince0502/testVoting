{"version":3,"file":"host-rules-migration.js","sourceRoot":"","sources":["../../../../lib/config/migrations/custom/host-rules-migration.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { CONFIG_VALIDATION } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport type { HostRule } from '../../../types';\nimport type { LegacyHostRule } from '../../../util/host-rules';\nimport { AbstractMigration } from '../base/abstract-migration';\nimport { migrateDatasource } from './datasource-migration';\n\nexport class HostRulesMigration extends AbstractMigration {\n  override readonly propertyName = 'hostRules';\n\n  override run(value: (LegacyHostRule & HostRule)[]): void {\n    const newHostRules: HostRule[] = [];\n    for (const hostRule of value) {\n      validateHostRule(hostRule);\n      const newRule: any = {};\n\n      for (const [key, value] of Object.entries(hostRule)) {\n        if (key === 'platform') {\n          if (is.string(value)) {\n            newRule.hostType ??= value;\n          }\n          continue;\n        }\n\n        if (key === 'matchHost') {\n          if (is.string(value)) {\n            newRule.matchHost ??= massageUrl(value);\n          }\n          continue;\n        }\n\n        if (key === 'hostType') {\n          if (is.string(value)) {\n            newRule.hostType ??= migrateDatasource(value);\n          }\n          continue;\n        }\n\n        if (\n          key === 'endpoint' ||\n          key === 'host' ||\n          key === 'baseUrl' ||\n          key === 'hostName' ||\n          key === 'domainName'\n        ) {\n          if (is.string(value)) {\n            newRule.matchHost ??= massageUrl(value);\n          }\n          continue;\n        }\n\n        newRule[key] = value;\n      }\n\n      newHostRules.push(newRule);\n    }\n\n    this.rewrite(newHostRules);\n  }\n}\n\nfunction validateHostRule(rule: LegacyHostRule & HostRule): void {\n  const { matchHost, hostName, domainName, baseUrl, endpoint, host } = rule;\n  const hosts: Record<string, string> = removeUndefinedFields({\n    matchHost,\n    hostName,\n    domainName,\n    baseUrl,\n    endpoint,\n    host,\n  });\n\n  if (Object.keys(hosts).length > 1) {\n    const distinctHostValues = new Set(Object.values(hosts));\n    // check if the host values are duplicated\n    if (distinctHostValues.size > 1) {\n      const error = new Error(CONFIG_VALIDATION);\n      error.validationSource = 'config';\n      error.validationMessage = `hostRules cannot contain more than one host-matching field - use \"matchHost\" only.`;\n      error.validationError =\n        'The renovate configuration file contains some invalid settings';\n      throw error;\n    } else {\n      logger.warn(\n        { hosts },\n        'Duplicate host values found, please only use `matchHost` to specify the host'\n      );\n    }\n  }\n}\n\nfunction massageUrl(url: string): string {\n  if (!url.includes('://') && url.includes('/')) {\n    return 'https://' + url;\n  } else {\n    return url;\n  }\n}\n\nfunction removeUndefinedFields(\n  obj: Record<string, any>\n): Record<string, string> {\n  const result: Record<string, string> = {};\n  for (const key of Object.keys(obj)) {\n    if (is.string(obj[key])) {\n      result[key] = obj[key];\n    }\n  }\n  return result;\n}\n"]}