{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/config/index.ts"],"names":[],"mappings":";;;;AAAA,sCAAmC;AACnC,gDAAyD;AACzD,2DAAqC;AAOrC,mCAA2C;AAElC,iGAFA,wBAAgB,OAEA;AAEzB,SAAgB,gBAAgB,CAC9B,MAAsB,EACtB,OAAe;IAEf,IAAI,aAAa,GAAkB;QACjC,GAAG,MAAM;QACT,OAAO;KACR,CAAC;IACF,MAAM,UAAU,GAAG,IAAA,aAAG,EAAC,OAAO,EAAE,YAAY,CAAC,CAAC;IAC9C,IAAI,UAAU,EAAE;QACd,aAAa,CAAC,UAAU,GAAG,UAAU,CAAC;KACvC;IACD,wBAAwB;IACxB,aAAa,GAAG,IAAA,wBAAgB,EAAC,aAAa,EAAE,MAAM,CAAC,OAAO,CAAQ,CAAC,CAAC;IACxE,KAAK,MAAM,CAAC,IAAI,IAAA,wBAAc,GAAE,EAAE;QAChC,OAAO,aAAa,CAAC,CAAC,CAAC,CAAC;KACzB;IACD,OAAO,aAAa,CAAC;AACvB,CAAC;AAlBD,4CAkBC;AAED,SAAgB,YAAY,CAC1B,WAAsB,EACtB,WAAgC;IAEhC,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE,iBAAiB,WAAW,IAAI,CAAC,CAAC;IACxE,MAAM,YAAY,GAAmB,EAAE,GAAG,WAAW,EAAE,CAAC;IACxD,MAAM,MAAM,GAA2B;QACrC,QAAQ;QACR,YAAY;QACZ,SAAS;QACT,QAAQ;QACR,IAAI;KACL,CAAC;IACF,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAChD,KAAK,MAAM,MAAM,IAAI,OAAO,CAAC,UAAU,EAAE,EAAE;QACzC,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACjD,IAAI,WAAW,KAAK,CAAC,CAAC,IAAI,WAAW,GAAG,WAAW,EAAE;YACnD,OAAO,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SAClC;KACF;IACD,OAAO,YAAY,CAAC;AACtB,CAAC;AArBD,oCAqBC","sourcesContent":["import { logger } from '../logger';\nimport { get, getManagerList } from '../modules/manager';\nimport * as options from './options';\nimport type {\n  AllConfig,\n  ManagerConfig,\n  RenovateConfig,\n  RenovateConfigStage,\n} from './types';\nimport { mergeChildConfig } from './utils';\n\nexport { mergeChildConfig };\n\nexport function getManagerConfig(\n  config: RenovateConfig,\n  manager: string\n): ManagerConfig {\n  let managerConfig: ManagerConfig = {\n    ...config,\n    manager,\n  };\n  const categories = get(manager, 'categories');\n  if (categories) {\n    managerConfig.categories = categories;\n  }\n  // TODO: fix types #7154\n  managerConfig = mergeChildConfig(managerConfig, config[manager] as any);\n  for (const i of getManagerList()) {\n    delete managerConfig[i];\n  }\n  return managerConfig;\n}\n\nexport function filterConfig(\n  inputConfig: AllConfig,\n  targetStage: RenovateConfigStage\n): AllConfig {\n  logger.trace({ config: inputConfig }, `filterConfig('${targetStage}')`);\n  const outputConfig: RenovateConfig = { ...inputConfig };\n  const stages: (string | undefined)[] = [\n    'global',\n    'repository',\n    'package',\n    'branch',\n    'pr',\n  ];\n  const targetIndex = stages.indexOf(targetStage);\n  for (const option of options.getOptions()) {\n    const optionIndex = stages.indexOf(option.stage);\n    if (optionIndex !== -1 && optionIndex < targetIndex) {\n      delete outputConfig[option.name];\n    }\n  }\n  return outputConfig;\n}\n"]}