{"version":3,"file":"pretty-time.js","sourceRoot":"","sources":["../../lib/util/pretty-time.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,oDAAoB;AACpB,sCAAmC;AACnC,mCAAgC;AAEhC,MAAM,UAAU,GAAG,IAAA,aAAK,EAAC,aAAa,CAAC,CAAC;AAExC,SAAS,KAAK,CAAC,IAAY;IACzB,OAAO,IAAI;SACR,KAAK,CAAC,UAAU,CAAC;SACjB,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;SACpB,MAAM,CAAC,YAAE,CAAC,cAAc,CAAC,CAAC;AAC/B,CAAC;AAED,SAAS,iBAAiB,CAAC,IAAY;IACrC,MAAM,UAAU,GAAG,IAAA,aAAK,EAAC,yBAAyB,CAAC,CAAC;IACpD,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,CAAC,GAAG,MAAM,GAAG,EAAE,OAAO,CAAC,CAAC;AACxE,CAAC;AAED,SAAgB,IAAI,CAAC,IAAY;IAC/B,IAAI;QACF,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACjD,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACjB,eAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,EAAE,4BAA4B,IAAI,GAAG,CAAC,CAAC;YAC5D,OAAO,IAAI,CAAC;SACb;QAED,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,MAAM,MAAM,GAAG,IAAA,YAAE,EAAC,IAAI,CAAC,CAAC;YACxB,IAAI,CAAC,YAAE,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;gBACtB,eAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,EAAE,4BAA4B,IAAI,GAAG,CAAC,CAAC;gBAC5D,OAAO,IAAI,CAAC;aACb;YACD,WAAW,IAAI,MAAM,CAAC;SACvB;QACD,OAAO,WAAW,CAAC;KACpB;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,4BAA4B,IAAI,GAAG,CAAC,CAAC;QACjE,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAtBD,oBAsBC","sourcesContent":["import is from '@sindresorhus/is';\nimport ms from 'ms';\nimport { logger } from '../logger';\nimport { regEx } from './regex';\n\nconst splitRegex = regEx(/(.*?[a-z]+)/);\n\nfunction split(time: string): string[] {\n  return time\n    .split(splitRegex)\n    .map((x) => x.trim())\n    .filter(is.nonEmptyString);\n}\n\nfunction applyCustomFormat(spec: string): string {\n  const monthRegex = regEx(/^(\\d+)\\s*(?:months?|M)$/);\n  return spec.replace(monthRegex, (_, months) => `${months * 30} days`);\n}\n\nexport function toMs(time: string): number | null {\n  try {\n    const specs = split(time).map(applyCustomFormat);\n    if (!specs.length) {\n      logger.debug({ time }, `Invalid time specifier: '${time}'`);\n      return null;\n    }\n\n    let totalMillis = 0;\n    for (const spec of specs) {\n      const millis = ms(spec);\n      if (!is.number(millis)) {\n        logger.debug({ time }, `Invalid time specifier: '${spec}'`);\n        return null;\n      }\n      totalMillis += millis;\n    }\n    return totalMillis;\n  } catch (err) {\n    logger.debug({ time, err }, `Invalid time specifier: '${time}'`);\n    return null;\n  }\n}\n"]}