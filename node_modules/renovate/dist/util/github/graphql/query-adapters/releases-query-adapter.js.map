{"version":3,"file":"releases-query-adapter.js","sourceRoot":"","sources":["../../../../../lib/util/github/graphql/query-adapters/releases-query-adapter.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AAKxB,kCAAuC;AAEvC,MAAM,GAAG,GAAG,+BAA+B,CAAC;AAE5C,MAAM,KAAK,GAAG,IAAA,mBAAY,EAAC;;;;;;;;;;;;;;;;;;;;;CAqB1B,CAAC,CAAC;AAEH,MAAM,oBAAoB,GAAG,OAAC,CAAC,MAAM,CAAC;IACpC,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE;IACnB,gBAAgB,EAAE,OAAC,CAAC,MAAM,EAAE;IAC5B,OAAO,EAAE,OAAC,CAAC,OAAO,EAAE;IACpB,YAAY,EAAE,OAAC,CAAC,OAAO,EAAE;IACzB,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE;IACf,EAAE,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACzB,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC3B,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CACnC,CAAC,CAAC;AAGH,SAAS,SAAS,CAAC,IAA0B;IAC3C,MAAM,WAAW,GAAG,oBAAoB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACzD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;QACxB,OAAO,IAAI,CAAC;KACb;IAED,MAAM,EACJ,OAAO,EACP,gBAAgB,EAChB,OAAO,EACP,YAAY,EACZ,GAAG,EACH,EAAE,EACF,IAAI,EACJ,WAAW,GACZ,GAAG,WAAW,CAAC,IAAI,CAAC;IAErB,IAAI,OAAO,EAAE;QACX,OAAO,IAAI,CAAC;KACb;IAED,MAAM,MAAM,GAAsB;QAChC,OAAO;QACP,gBAAgB;QAChB,GAAG;KACJ,CAAC;IAEF,IAAI,EAAE,EAAE;QACN,MAAM,CAAC,EAAE,GAAG,EAAE,CAAC;KAChB;IAED,IAAI,IAAI,EAAE;QACR,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;KACpB;IAED,IAAI,WAAW,EAAE;QACf,MAAM,CAAC,WAAW,GAAG,WAAW,CAAC;KAClC;IAED,IAAI,YAAY,EAAE;QAChB,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;KACzB;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAEY,QAAA,OAAO,GAGhB,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC","sourcesContent":["import { z } from 'zod';\nimport type {\n  GithubGraphqlDatasourceAdapter,\n  GithubReleaseItem,\n} from '../types';\nimport { prepareQuery } from '../util';\n\nconst key = 'github-releases-datasource-v2';\n\nconst query = prepareQuery(`\n  releases(\n    first: $count\n    after: $cursor\n    orderBy: {field: CREATED_AT, direction: DESC}\n  ) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    nodes {\n      version: tagName\n      releaseTimestamp: publishedAt\n      isDraft\n      isPrerelease\n      url\n      id: databaseId\n      name\n      description\n    }\n  }\n`);\n\nconst GithubGraphqlRelease = z.object({\n  version: z.string(),\n  releaseTimestamp: z.string(),\n  isDraft: z.boolean(),\n  isPrerelease: z.boolean(),\n  url: z.string(),\n  id: z.number().nullable(),\n  name: z.string().nullable(),\n  description: z.string().nullable(),\n});\nexport type GithubGraphqlRelease = z.infer<typeof GithubGraphqlRelease>;\n\nfunction transform(item: GithubGraphqlRelease): GithubReleaseItem | null {\n  const releaseItem = GithubGraphqlRelease.safeParse(item);\n  if (!releaseItem.success) {\n    return null;\n  }\n\n  const {\n    version,\n    releaseTimestamp,\n    isDraft,\n    isPrerelease,\n    url,\n    id,\n    name,\n    description,\n  } = releaseItem.data;\n\n  if (isDraft) {\n    return null;\n  }\n\n  const result: GithubReleaseItem = {\n    version,\n    releaseTimestamp,\n    url,\n  };\n\n  if (id) {\n    result.id = id;\n  }\n\n  if (name) {\n    result.name = name;\n  }\n\n  if (description) {\n    result.description = description;\n  }\n\n  if (isPrerelease) {\n    result.isStable = false;\n  }\n\n  return result;\n}\n\nexport const adapter: GithubGraphqlDatasourceAdapter<\n  GithubGraphqlRelease,\n  GithubReleaseItem\n> = { key, query, transform };\n"]}