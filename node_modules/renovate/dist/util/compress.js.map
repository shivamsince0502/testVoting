{"version":3,"file":"compress.js","sourceRoot":"","sources":["../../lib/util/compress.ts"],"names":[],"mappings":";;;;AAAA,yCAAsC;AACtC,kEAA6B;AAE7B,MAAM,cAAc,GAAG,IAAA,qBAAS,EAAC,mBAAI,CAAC,cAAc,CAAC,CAAC;AACtD,MAAM,gBAAgB,GAAG,IAAA,qBAAS,EAAC,mBAAI,CAAC,gBAAgB,CAAC,CAAC;AAEnD,KAAK,UAAU,QAAQ,CAAC,KAAa;IAC1C,MAAM,GAAG,GAAG,MAAM,cAAc,CAAC,KAAK,CAAC,CAAC;IACxC,OAAO,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAChC,CAAC;AAHD,4BAGC;AAEM,KAAK,UAAU,UAAU,CAAC,KAAa;IAC5C,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACzC,MAAM,GAAG,GAAG,MAAM,gBAAgB,CAAC,GAAG,CAAC,CAAC;IACxC,OAAO,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC9B,CAAC;AAJD,gCAIC","sourcesContent":["import { promisify } from 'node:util';\nimport zlib from 'node:zlib';\n\nconst brotliCompress = promisify(zlib.brotliCompress);\nconst brotliDecompress = promisify(zlib.brotliDecompress);\n\nexport async function compress(input: string): Promise<string> {\n  const buf = await brotliCompress(input);\n  return buf.toString('base64');\n}\n\nexport async function decompress(input: string): Promise<string> {\n  const buf = Buffer.from(input, 'base64');\n  const str = await brotliDecompress(buf);\n  return str.toString('utf8');\n}\n"]}