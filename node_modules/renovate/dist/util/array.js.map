{"version":3,"file":"array.js","sourceRoot":"","sources":["../../lib/util/array.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAElC,SAAgB,WAAW,CAAI,KAA6B;IAC1D,IAAI,YAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;QACnB,OAAO,KAAK,CAAC;KACd;IACD,OAAO,EAAE,CAAC;AACZ,CAAC;AALD,kCAKC;AAED,SAAgB,WAAW,CAAC,CAAS,EAAE,CAAS;IAC9C,OAAO,CAAC,GAAG,CAAC,CAAC;AACf,CAAC;AAFD,kCAEC;AAED,gFAAgF;AAChF,gFAAgF;AAChF,kDAAkD;AAClD,SAAgB,oBAAoB,CAClC,KAA2B;IAE3B,OAAO,CAAC,YAAE,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;AACpC,CAAC;AAJD,oDAIC","sourcesContent":["import is from '@sindresorhus/is';\n\nexport function coerceArray<T>(input: T[] | null | undefined): T[] {\n  if (is.array(input)) {\n    return input;\n  }\n  return [];\n}\n\nexport function sortNumeric(a: number, b: number): number {\n  return a - b;\n}\n\n// Useful for filtering an array so that it includes values that are not null or\n// undefined. This predicate acts as a type guard so that the resulting type for\n// `values.filter(isNotNullOrUndefined)` is `T[]`.\nexport function isNotNullOrUndefined<T>(\n  value: T | undefined | null\n): value is T {\n  return !is.nullOrUndefined(value);\n}\n"]}