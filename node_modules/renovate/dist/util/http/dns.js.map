{"version":3,"file":"dns.js","sourceRoot":"","sources":["../../../lib/util/http/dns.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  LookupAllOptions,\n  LookupOneOptions,\n  lookup as _dnsLookup,\n} from 'node:dns';\nimport type { EntryObject, IPFamily, LookupOptions } from 'cacheable-lookup';\nimport QuickLRU from 'quick-lru';\nimport { logger } from '../../logger';\n\nconst cache = new QuickLRU<string, any>({ maxSize: 1000 });\n\nfunction lookup(\n  ...[host, options, callback]:\n    | [\n        hostname: string,\n        family: IPFamily,\n        callback: (\n          error: NodeJS.ErrnoException,\n          address: string,\n          family: IPFamily\n        ) => void\n      ]\n    | [\n        hostname: string,\n        callback: (\n          error: NodeJS.ErrnoException,\n          address: string,\n          family: IPFamily\n        ) => void\n      ]\n    | [\n        hostname: string,\n        options: LookupOptions & { all: true },\n        callback: (\n          error: NodeJS.ErrnoException,\n          result: ReadonlyArray<EntryObject>\n        ) => void\n      ]\n    | [\n        hostname: string,\n        options: LookupOptions,\n        callback: (\n          error: NodeJS.ErrnoException,\n          address: string,\n          family: IPFamily\n        ) => void\n      ]\n): void {\n  let opts: LookupOneOptions | LookupAllOptions;\n  // TODO: strict null incompatible types (#7154)\n  let cb: any;\n\n  if (typeof options === 'function') {\n    opts = {};\n    cb = options;\n  } else if (typeof options === 'number') {\n    opts = { family: options };\n    cb = callback;\n  } else {\n    opts = options;\n    cb = callback;\n  }\n\n  // istanbul ignore if: not used\n  if (opts.all) {\n    const key = `${host}_all`;\n    if (cache.has(key)) {\n      logger.trace({ host }, 'dns lookup cache hit');\n      cb(null, cache.get(key));\n      return;\n    }\n\n    _dnsLookup(host, opts, (err, res) => {\n      if (err) {\n        logger.debug({ host, err }, 'dns lookup error');\n        cb(err, null, null);\n        return;\n      }\n      logger.trace({ host, opts, res }, 'dns lookup');\n      cache.set(key, res);\n      cb(null, res, null);\n    });\n  } else {\n    if (cache.has(host)) {\n      logger.trace({ host }, 'dns lookup cache hit');\n      cb(null, ...cache.get(host));\n      return;\n    }\n\n    _dnsLookup(host, opts, (err, ...res) => {\n      if (err) {\n        logger.debug({ host, err }, 'dns lookup error');\n        cb(err);\n        return;\n      }\n      logger.trace({ host, opts, res }, 'dns lookup');\n      cache.set(host, res);\n      cb(null, ...res);\n    });\n  }\n}\n\nexport { lookup as dnsLookup };\n\nexport function printDnsStats(): void {\n  logger.debug({ hosts: Array.from(cache.keys()) }, 'dns cache');\n}\n\nexport function clearDnsCache(): void {\n  cache.clear();\n}\n"]}