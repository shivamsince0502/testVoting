{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/util/http/index.ts"],"names":[],"mappings":"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","sourcesContent":["import merge from 'deepmerge';\nimport got, { Options, RequestError } from 'got';\nimport hasha from 'hasha';\nimport type { SetRequired } from 'type-fest';\nimport { infer as Infer, ZodType } from 'zod';\nimport { HOST_DISABLED } from '../../constants/error-messages';\nimport { pkg } from '../../expose.cjs';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport * as memCache from '../cache/memory';\nimport { clone } from '../clone';\nimport { resolveBaseUrl } from '../url';\nimport { applyAuthorization, removeAuthorization } from './auth';\nimport { hooks } from './hooks';\nimport { applyHostRules } from './host-rules';\nimport { getQueue } from './queue';\nimport { Throttle, getThrottle } from './throttle';\nimport type {\n  GotJSONOptions,\n  GotOptions,\n  HttpOptions,\n  HttpRequestOptions,\n  HttpResponse,\n  InternalHttpOptions,\n  RequestStats,\n} from './types';\n// TODO: refactor code to remove this (#9651)\nimport './legacy';\n\nexport { RequestError as HttpError };\n\ntype JsonArgs<\n  Opts extends HttpOptions & HttpRequestOptions<ResT>,\n  ResT = unknown,\n  Schema extends ZodType<ResT> = ZodType<ResT>\n> = {\n  url: string;\n  httpOptions?: Opts;\n  schema?: Schema;\n};\n\ntype Task<T> = () => Promise<HttpResponse<T>>;\n\n// Copying will help to avoid circular structure\n// and mutation of the cached response.\nfunction copyResponse<T extends Buffer | string | any>(\n  response: HttpResponse<T>,\n  deep: boolean\n): HttpResponse<T> {\n  const { body, statusCode, headers } = response;\n  return deep\n    ? {\n        statusCode,\n        body: body instanceof Buffer ? (body.slice() as T) : clone<T>(body),\n        headers: clone(headers),\n      }\n    : {\n        statusCode,\n        body,\n        headers,\n      };\n}\n\nfunction applyDefaultHeaders(options: Options): void {\n  const renovateVersion = pkg.version;\n  options.headers = {\n    ...options.headers,\n    'user-agent':\n      process.env.RENOVATE_USER_AGENT ??\n      `RenovateBot/${renovateVersion} (https://github.com/renovatebot/renovate)`,\n  };\n}\n\n// Note on types:\n// options.requestType can be either 'json' or 'buffer', but `T` should be\n// `Buffer` in the latter case.\n// We don't declare overload signatures because it's immediately wrapped by\n// `request`.\nasync function gotTask<T>(\n  url: string,\n  options: SetRequired<GotOptions, 'method'>,\n  requestStats: Omit<RequestStats, 'duration' | 'statusCode'>\n): Promise<HttpResponse<T>> {\n  logger.trace({ url, options }, 'got request');\n\n  let duration = 0;\n  let statusCode = 0;\n\n  try {\n    // Cheat the TS compiler using `as` to pick a specific overload.\n    // Otherwise it doesn't typecheck.\n    const resp = await got<T>(url, { ...options, hooks } as GotJSONOptions);\n    statusCode = resp.statusCode;\n    duration =\n      resp.timings.phases.total ??\n      /* istanbul ignore next: can't be tested */ 0;\n    return resp;\n  } catch (error) {\n    if (error instanceof RequestError) {\n      statusCode =\n        error.response?.statusCode ??\n        /* istanbul ignore next: can't be tested */ -1;\n      duration =\n        error.timings?.phases.total ??\n        /* istanbul ignore next: can't be tested */ -1;\n      const method = options.method.toUpperCase();\n      const code = error.code ?? /* istanbul ignore next */ 'UNKNOWN';\n      const retryCount =\n        error.request?.retryCount ?? /* istanbul ignore next */ -1;\n      logger.debug(\n        `${method} ${url} = (code=${code}, statusCode=${statusCode} retryCount=${retryCount}, duration=${duration})`\n      );\n    }\n\n    throw error;\n  } finally {\n    const httpRequests = memCache.get<RequestStats[]>('http-requests') || [];\n    httpRequests.push({ ...requestStats, duration, statusCode });\n    memCache.set('http-requests', httpRequests);\n  }\n}\n\nexport class Http<Opts extends HttpOptions = HttpOptions> {\n  private options?: GotOptions;\n\n  constructor(protected hostType: string, options: HttpOptions = {}) {\n    this.options = merge<GotOptions>(options, { context: { hostType } });\n  }\n\n  protected getThrottle(url: string): Throttle | null {\n    return getThrottle(url);\n  }\n\n  protected async request<T>(\n    requestUrl: string | URL,\n    httpOptions: InternalHttpOptions & HttpRequestOptions<T>\n  ): Promise<HttpResponse<T>> {\n    let url = requestUrl.toString();\n    if (httpOptions?.baseUrl) {\n      url = resolveBaseUrl(httpOptions.baseUrl, url);\n    }\n\n    let options = merge<SetRequired<GotOptions, 'method'>, GotOptions>(\n      {\n        method: 'get',\n        ...this.options,\n        hostType: this.hostType,\n      },\n      httpOptions\n    );\n\n    const etagCache =\n      httpOptions.etagCache && options.method === 'get'\n        ? httpOptions.etagCache\n        : null;\n    if (etagCache) {\n      options.headers = {\n        ...options.headers,\n        'If-None-Match': etagCache.etag,\n      };\n    }\n\n    if (process.env.NODE_ENV === 'test') {\n      options.retry = 0;\n    }\n    options.hooks = {\n      beforeRedirect: [removeAuthorization],\n    };\n\n    applyDefaultHeaders(options);\n\n    options = applyHostRules(url, options);\n    if (options.enabled === false) {\n      logger.debug(`Host is disabled - rejecting request. HostUrl: ${url}`);\n      throw new Error(HOST_DISABLED);\n    }\n    options = applyAuthorization(options);\n\n    // use sha512: https://www.npmjs.com/package/hasha#algorithm\n    const memCacheKey =\n      options.memCache !== false &&\n      (options.method === 'get' || options.method === 'head')\n        ? hasha([\n            'got-',\n            JSON.stringify({\n              url,\n              headers: options.headers,\n              method: options.method,\n            }),\n          ])\n        : null;\n\n    let resPromise: Promise<HttpResponse<T>> | null = null;\n\n    // Cache GET requests unless memCache=false\n    if (memCacheKey) {\n      resPromise = memCache.get(memCacheKey);\n    }\n\n    // istanbul ignore else: no cache tests\n    if (!resPromise) {\n      const startTime = Date.now();\n      const httpTask: Task<T> = () => {\n        const queueDuration = Date.now() - startTime;\n        return gotTask(url, options, {\n          method: options.method,\n          url,\n          queueDuration,\n        });\n      };\n\n      const throttle = this.getThrottle(url);\n      const throttledTask: Task<T> = throttle\n        ? () => throttle.add<HttpResponse<T>>(httpTask)\n        : httpTask;\n\n      const queue = getQueue(url);\n      const queuedTask: Task<T> = queue\n        ? () => queue.add<HttpResponse<T>>(throttledTask)\n        : throttledTask;\n\n      resPromise = queuedTask();\n\n      if (memCacheKey) {\n        memCache.set(memCacheKey, resPromise);\n      }\n    }\n\n    try {\n      const res = await resPromise;\n      const deepCopyNeeded = !!memCacheKey && res.statusCode !== 304;\n      const resCopy = copyResponse(res, deepCopyNeeded);\n      resCopy.authorization = !!options?.headers?.authorization;\n      return resCopy;\n    } catch (err) {\n      const { abortOnError, abortIgnoreStatusCodes } = options;\n      if (abortOnError && !abortIgnoreStatusCodes?.includes(err.statusCode)) {\n        throw new ExternalHostError(err);\n      }\n      throw err;\n    }\n  }\n\n  get(\n    url: string,\n    options: HttpOptions & HttpRequestOptions<string> = {}\n  ): Promise<HttpResponse> {\n    return this.request<string>(url, options);\n  }\n\n  head(url: string, options: HttpOptions = {}): Promise<HttpResponse> {\n    return this.request<string>(url, { ...options, method: 'head' });\n  }\n\n  getBuffer(\n    url: string,\n    options: HttpOptions = {}\n  ): Promise<HttpResponse<Buffer>> {\n    return this.request<Buffer>(url, {\n      ...options,\n      responseType: 'buffer',\n    });\n  }\n\n  private async requestJson<ResT = unknown>(\n    method: InternalHttpOptions['method'],\n    {\n      url,\n      httpOptions: requestOptions,\n      schema,\n    }: JsonArgs<Opts & HttpRequestOptions<ResT>, ResT>\n  ): Promise<HttpResponse<ResT>> {\n    const { body, ...httpOptions } = { ...requestOptions };\n    const opts: InternalHttpOptions = {\n      ...httpOptions,\n      method,\n      responseType: 'json',\n    };\n    // signal that we expect a json response\n    opts.headers = {\n      accept: 'application/json',\n      ...opts.headers,\n    };\n    if (body) {\n      opts.json = body;\n    }\n    const res = await this.request<ResT>(url, opts);\n\n    const etagCacheHit =\n      httpOptions.etagCache && res.statusCode === 304\n        ? clone(httpOptions.etagCache.data)\n        : null;\n\n    if (!schema) {\n      if (etagCacheHit) {\n        res.body = etagCacheHit;\n      }\n      return res;\n    }\n\n    if (etagCacheHit) {\n      res.body = etagCacheHit;\n    } else {\n      res.body = await schema.parseAsync(res.body);\n    }\n    return res;\n  }\n\n  private resolveArgs<ResT = unknown>(\n    arg1: string,\n    arg2: Opts | ZodType<ResT> | undefined,\n    arg3: ZodType<ResT> | undefined\n  ): JsonArgs<Opts, ResT> {\n    const res: JsonArgs<Opts, ResT> = { url: arg1 };\n\n    if (arg2 instanceof ZodType) {\n      res.schema = arg2;\n    } else if (arg2) {\n      res.httpOptions = arg2;\n    }\n\n    if (arg3) {\n      res.schema = arg3;\n    }\n\n    return res;\n  }\n\n  getJson<ResT>(\n    url: string,\n    options?: Opts & HttpRequestOptions<ResT>\n  ): Promise<HttpResponse<ResT>>;\n  getJson<ResT, Schema extends ZodType<ResT> = ZodType<ResT>>(\n    url: string,\n    schema: Schema\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  getJson<ResT, Schema extends ZodType<ResT> = ZodType<ResT>>(\n    url: string,\n    options: Opts & HttpRequestOptions<Infer<Schema>>,\n    schema: Schema\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  getJson<ResT = unknown, Schema extends ZodType<ResT> = ZodType<ResT>>(\n    arg1: string,\n    arg2?: (Opts & HttpRequestOptions<ResT>) | Schema,\n    arg3?: Schema\n  ): Promise<HttpResponse<ResT>> {\n    const args = this.resolveArgs<ResT>(arg1, arg2, arg3);\n    return this.requestJson<ResT>('get', args);\n  }\n\n  headJson(url: string, httpOptions?: Opts): Promise<HttpResponse<never>> {\n    return this.requestJson<never>('head', { url, httpOptions });\n  }\n\n  postJson<T>(url: string, options?: Opts): Promise<HttpResponse<T>>;\n  postJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    schema: Schema\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  postJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    options: Opts,\n    schema: Schema\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  postJson<T = unknown, Schema extends ZodType<T> = ZodType<T>>(\n    arg1: string,\n    arg2?: Opts | Schema,\n    arg3?: Schema\n  ): Promise<HttpResponse<T>> {\n    const args = this.resolveArgs(arg1, arg2, arg3);\n    return this.requestJson<T>('post', args);\n  }\n\n  putJson<T>(url: string, options?: Opts): Promise<HttpResponse<T>>;\n  putJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    schema: Schema\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  putJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    options: Opts,\n    schema: Schema\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  putJson<T = unknown, Schema extends ZodType<T> = ZodType<T>>(\n    arg1: string,\n    arg2?: Opts | Schema,\n    arg3?: ZodType\n  ): Promise<HttpResponse<T>> {\n    const args = this.resolveArgs(arg1, arg2, arg3);\n    return this.requestJson<T>('put', args);\n  }\n\n  patchJson<T>(url: string, options?: Opts): Promise<HttpResponse<T>>;\n  patchJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    schema: Schema\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  patchJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    options: Opts,\n    schema: Schema\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  patchJson<T = unknown, Schema extends ZodType<T> = ZodType<T>>(\n    arg1: string,\n    arg2?: Opts | Schema,\n    arg3?: Schema\n  ): Promise<HttpResponse<T>> {\n    const args = this.resolveArgs(arg1, arg2, arg3);\n    return this.requestJson<T>('patch', args);\n  }\n\n  deleteJson<T>(url: string, options?: Opts): Promise<HttpResponse<T>>;\n  deleteJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    schema: Schema\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  deleteJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    options: Opts,\n    schema: Schema\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  deleteJson<T = unknown, Schema extends ZodType<T> = ZodType<T>>(\n    arg1: string,\n    arg2?: Opts | Schema,\n    arg3?: Schema\n  ): Promise<HttpResponse<T>> {\n    const args = this.resolveArgs(arg1, arg2, arg3);\n    return this.requestJson<T>('delete', args);\n  }\n\n  stream(url: string, options?: HttpOptions): NodeJS.ReadableStream {\n    // TODO: fix types (#7154)\n    let combinedOptions: any = {\n      method: 'get',\n      ...this.options,\n      hostType: this.hostType,\n      ...options,\n    };\n\n    let resolvedUrl = url;\n    // istanbul ignore else: needs test\n    if (options?.baseUrl) {\n      resolvedUrl = resolveBaseUrl(options.baseUrl, url);\n    }\n\n    applyDefaultHeaders(combinedOptions);\n    combinedOptions = applyHostRules(resolvedUrl, combinedOptions);\n    if (combinedOptions.enabled === false) {\n      throw new Error(HOST_DISABLED);\n    }\n    combinedOptions = applyAuthorization(combinedOptions);\n\n    return got.stream(resolvedUrl, combinedOptions);\n  }\n}\n"]}