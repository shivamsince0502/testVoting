{"version":3,"file":"bitbucket-server.js","sourceRoot":"","sources":["../../../lib/util/http/bitbucket-server.ts"],"names":[],"mappings":";;;AAAA,gCAAwC;AAOxC,wBAAyB;AAEzB,IAAI,OAAe,CAAC;AACb,MAAM,UAAU,GAAG,CAAC,GAAW,EAAQ,EAAE;IAC9C,OAAO,GAAG,GAAG,CAAC;AAChB,CAAC,CAAC;AAFW,QAAA,UAAU,cAErB;AAEF,MAAa,mBAAoB,SAAQ,OAAI;IAC3C,YAAY,OAAqB;QAC/B,KAAK,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;IACrC,CAAC;IAEkB,OAAO,CACxB,IAAY,EACZ,OAAqD;QAErD,MAAM,GAAG,GAAG,IAAA,oBAAc,EAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC1C,MAAM,IAAI,GAAG;YACX,OAAO;YACP,GAAG,OAAO;SACX,CAAC;QACF,IAAI,CAAC,OAAO,GAAG;YACb,GAAG,IAAI,CAAC,OAAO;YACf,mBAAmB,EAAE,UAAU;SAChC,CAAC;QACF,OAAO,KAAK,CAAC,OAAO,CAAI,GAAG,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;CACF;AApBD,kDAoBC","sourcesContent":["import { resolveBaseUrl } from '../url';\nimport type {\n  HttpOptions,\n  HttpRequestOptions,\n  HttpResponse,\n  InternalHttpOptions,\n} from './types';\nimport { Http } from '.';\n\nlet baseUrl: string;\nexport const setBaseUrl = (url: string): void => {\n  baseUrl = url;\n};\n\nexport class BitbucketServerHttp extends Http {\n  constructor(options?: HttpOptions) {\n    super('bitbucket-server', options);\n  }\n\n  protected override request<T>(\n    path: string,\n    options?: InternalHttpOptions & HttpRequestOptions<T>\n  ): Promise<HttpResponse<T>> {\n    const url = resolveBaseUrl(baseUrl, path);\n    const opts = {\n      baseUrl,\n      ...options,\n    };\n    opts.headers = {\n      ...opts.headers,\n      'X-Atlassian-Token': 'no-check',\n    };\n    return super.request<T>(url, opts);\n  }\n}\n"]}