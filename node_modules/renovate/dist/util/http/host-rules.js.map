{"version":3,"file":"host-rules.js","sourceRoot":"","sources":["../../../lib/util/http/host-rules.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport {\n  BITBUCKET_API_USING_HOST_TYPES,\n  GITHUB_API_USING_HOST_TYPES,\n  GITLAB_API_USING_HOST_TYPES,\n} from '../../constants';\nimport { logger } from '../../logger';\nimport { hasProxy } from '../../proxy';\nimport type { HostRule } from '../../types';\nimport * as hostRules from '../host-rules';\nimport { dnsLookup } from './dns';\nimport { keepaliveAgents } from './keepalive';\nimport type { GotOptions } from './types';\n\nexport type HostRulesGotOptions = Pick<\n  GotOptions,\n  | 'hostType'\n  | 'url'\n  | 'noAuth'\n  | 'headers'\n  | 'token'\n  | 'username'\n  | 'password'\n  | 'context'\n  | 'enabled'\n  | 'abortOnError'\n  | 'abortIgnoreStatusCodes'\n  | 'timeout'\n  | 'lookup'\n  | 'agent'\n  | 'http2'\n>;\n\nexport function findMatchingRules<GotOptions extends HostRulesGotOptions>(\n  options: GotOptions,\n  url: string\n): HostRule {\n  const { hostType } = options;\n  let res = hostRules.find({ hostType, url });\n\n  if (res.token || res.username || res.password) {\n    // do not fallback if we already have auth infos\n    return res;\n  }\n\n  // Fallback to `github` hostType\n  if (\n    hostType &&\n    GITHUB_API_USING_HOST_TYPES.includes(hostType) &&\n    hostType !== 'github'\n  ) {\n    res = {\n      ...hostRules.find({\n        hostType: 'github',\n        url,\n      }),\n      ...res,\n    };\n  }\n\n  // Fallback to `gitlab` hostType\n  if (\n    hostType &&\n    GITLAB_API_USING_HOST_TYPES.includes(hostType) &&\n    hostType !== 'gitlab'\n  ) {\n    res = {\n      ...hostRules.find({\n        hostType: 'gitlab',\n        url,\n      }),\n      ...res,\n    };\n  }\n\n  // Fallback to `bitbucket` hostType\n  if (\n    hostType &&\n    BITBUCKET_API_USING_HOST_TYPES.includes(hostType) &&\n    hostType !== 'bitbucket'\n  ) {\n    res = {\n      ...hostRules.find({\n        hostType: 'bitbucket',\n        url,\n      }),\n      ...res,\n    };\n  }\n\n  return res;\n}\n\n// Apply host rules to requests\nexport function applyHostRules<GotOptions extends HostRulesGotOptions>(\n  url: string,\n  inOptions: GotOptions\n): GotOptions {\n  const options: GotOptions = { ...inOptions };\n  const foundRules = findMatchingRules(options, url);\n  const { username, password, token, enabled, authType } = foundRules;\n  if (options.noAuth) {\n    logger.trace({ url }, `Authorization disabled`);\n  } else if (\n    options.headers?.authorization ||\n    options.password ||\n    options.token\n  ) {\n    logger.trace({ url }, `Authorization already set`);\n  } else if (password !== undefined) {\n    logger.trace({ url }, `Applying Basic authentication`);\n    options.username = username;\n    options.password = password;\n  } else if (token) {\n    logger.trace({ url }, `Applying Bearer authentication`);\n    options.token = token;\n    options.context = { ...options.context, authType };\n  } else if (enabled === false) {\n    options.enabled = false;\n  }\n  // Apply optional params\n  if (foundRules.abortOnError) {\n    options.abortOnError = foundRules.abortOnError;\n  }\n\n  if (foundRules.abortIgnoreStatusCodes) {\n    options.abortIgnoreStatusCodes = foundRules.abortIgnoreStatusCodes;\n  }\n\n  if (foundRules.timeout) {\n    options.timeout = foundRules.timeout;\n  }\n\n  if (foundRules.dnsCache) {\n    options.lookup = dnsLookup;\n  }\n\n  if (foundRules.keepalive) {\n    options.agent = keepaliveAgents;\n  }\n\n  if (!hasProxy() && foundRules.enableHttp2 === true) {\n    options.http2 = true;\n  }\n  return options;\n}\n\nexport function getConcurrentRequestsLimit(url: string): number | null {\n  const { concurrentRequestLimit } = hostRules.find({ url });\n  return is.number(concurrentRequestLimit) && concurrentRequestLimit > 0\n    ? concurrentRequestLimit\n    : null;\n}\n\nexport function getThrottleIntervalMs(url: string): number | null {\n  const { maxRequestsPerSecond } = hostRules.find({ url });\n  return is.number(maxRequestsPerSecond) && maxRequestsPerSecond > 0\n    ? Math.ceil(1000 / maxRequestsPerSecond)\n    : null;\n}\n"]}