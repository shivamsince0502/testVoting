{"version":3,"file":"schema-utils.js","sourceRoot":"","sources":["../../lib/util/schema-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import JSON5 from 'json5';\nimport { DateTime } from 'luxon';\nimport type { JsonValue } from 'type-fest';\nimport { z } from 'zod';\n\ninterface ErrorContext<T> {\n  error: z.ZodError;\n  input: T;\n}\n\ninterface LooseOpts<T> {\n  onError?: (err: ErrorContext<T>) => void;\n}\n\n/**\n * Works like `z.array()`, but drops wrong elements instead of invalidating the whole array.\n *\n * **Important**: non-array inputs are still invalid.\n * Use `LooseArray(...).catch([])` to handle it.\n *\n * @param Elem Schema for array elements\n * @param onError Callback for errors\n * @returns Schema for array\n */\nexport function LooseArray<Schema extends z.ZodTypeAny>(\n  Elem: Schema,\n  { onError }: LooseOpts<unknown[]> = {}\n): z.ZodEffects<z.ZodArray<z.ZodAny, 'many'>, z.TypeOf<Schema>[], any[]> {\n  if (!onError) {\n    // Avoid error-related computations inside the loop\n    return z.array(z.any()).transform((input) => {\n      const output: z.infer<Schema>[] = [];\n      for (const x of input) {\n        const parsed = Elem.safeParse(x);\n        if (parsed.success) {\n          output.push(parsed.data);\n        }\n      }\n      return output;\n    });\n  }\n\n  return z.array(z.any()).transform((input) => {\n    const output: z.infer<Schema>[] = [];\n    const issues: z.ZodIssue[] = [];\n\n    for (let idx = 0; idx < input.length; idx += 1) {\n      const x = input[idx];\n      const parsed = Elem.safeParse(x);\n\n      if (parsed.success) {\n        output.push(parsed.data);\n        continue;\n      }\n\n      for (const issue of parsed.error.issues) {\n        issue.path.unshift(idx);\n        issues.push(issue);\n      }\n    }\n\n    if (issues.length) {\n      const error = new z.ZodError(issues);\n      onError({ error, input });\n    }\n\n    return output;\n  });\n}\n\ntype LooseRecordResult<\n  KeySchema extends z.ZodTypeAny,\n  ValueSchema extends z.ZodTypeAny\n> = z.ZodEffects<\n  z.ZodRecord<z.ZodString, z.ZodAny>,\n  Record<z.TypeOf<KeySchema>, z.TypeOf<ValueSchema>>,\n  Record<z.TypeOf<KeySchema>, any>\n>;\n\ntype LooseRecordOpts<\n  KeySchema extends z.ZodTypeAny,\n  ValueSchema extends z.ZodTypeAny\n> = LooseOpts<Record<z.TypeOf<KeySchema> | z.TypeOf<ValueSchema>, unknown>>;\n\n/**\n * Works like `z.record()`, but drops wrong elements instead of invalidating the whole record.\n *\n * **Important**: non-record inputs other are still invalid.\n * Use `LooseRecord(...).catch({})` to handle it.\n *\n * @param KeyValue Schema for record keys\n * @param ValueValue Schema for record values\n * @param onError Callback for errors\n * @returns Schema for record\n */\nexport function LooseRecord<ValueSchema extends z.ZodTypeAny>(\n  Value: ValueSchema\n): LooseRecordResult<z.ZodString, ValueSchema>;\nexport function LooseRecord<\n  KeySchema extends z.ZodTypeAny,\n  ValueSchema extends z.ZodTypeAny\n>(\n  Key: KeySchema,\n  Value: ValueSchema\n): LooseRecordResult<KeySchema, ValueSchema>;\nexport function LooseRecord<ValueSchema extends z.ZodTypeAny>(\n  Value: ValueSchema,\n  { onError }: LooseRecordOpts<z.ZodString, ValueSchema>\n): LooseRecordResult<z.ZodString, ValueSchema>;\nexport function LooseRecord<\n  KeySchema extends z.ZodTypeAny,\n  ValueSchema extends z.ZodTypeAny\n>(\n  Key: KeySchema,\n  Value: ValueSchema,\n  { onError }: LooseRecordOpts<KeySchema, ValueSchema>\n): LooseRecordResult<KeySchema, ValueSchema>;\nexport function LooseRecord<\n  KeySchema extends z.ZodTypeAny,\n  ValueSchema extends z.ZodTypeAny\n>(\n  arg1: ValueSchema | KeySchema,\n  arg2?: ValueSchema | LooseOpts<Record<string, unknown>>,\n  arg3?: LooseRecordOpts<KeySchema, ValueSchema>\n): LooseRecordResult<KeySchema, ValueSchema> {\n  let Key: z.ZodSchema = z.any();\n  let Value: ValueSchema;\n  let opts: LooseRecordOpts<KeySchema, ValueSchema> = {};\n  if (arg2 && arg3) {\n    Key = arg1 as KeySchema;\n    Value = arg2 as ValueSchema;\n    opts = arg3;\n  } else if (arg2) {\n    if (arg2 instanceof z.ZodType) {\n      Key = arg1 as KeySchema;\n      Value = arg2;\n    } else {\n      Value = arg1 as ValueSchema;\n      opts = arg2;\n    }\n  } else {\n    Value = arg1 as ValueSchema;\n  }\n\n  const { onError } = opts;\n  if (!onError) {\n    // Avoid error-related computations inside the loop\n    return z.record(z.any()).transform((input) => {\n      const output: Record<string, z.infer<ValueSchema>> = {};\n      for (const [inputKey, inputVal] of Object.entries(input)) {\n        const parsedKey = Key.safeParse(inputKey);\n        const parsedValue = Value.safeParse(inputVal);\n        if (parsedKey.success && parsedValue.success) {\n          output[parsedKey.data] = parsedValue.data;\n        }\n      }\n      return output;\n    });\n  }\n\n  return z.record(z.any()).transform((input) => {\n    const output: Record<string, z.infer<ValueSchema>> = {};\n    const issues: z.ZodIssue[] = [];\n\n    for (const [inputKey, inputVal] of Object.entries(input)) {\n      const parsedKey = Key.safeParse(inputKey);\n      if (!parsedKey.success) {\n        for (const issue of parsedKey.error.issues) {\n          issue.path.unshift(inputKey);\n          issues.push(issue);\n        }\n        continue;\n      }\n\n      const parsedValue = Value.safeParse(inputVal);\n      if (!parsedValue.success) {\n        for (const issue of parsedValue.error.issues) {\n          issue.path.unshift(inputKey);\n          issues.push(issue);\n        }\n        continue;\n      }\n\n      output[parsedKey.data] = parsedValue.data;\n      continue;\n    }\n\n    if (issues.length) {\n      const error = new z.ZodError(issues);\n      onError({ error, input });\n    }\n\n    return output;\n  });\n}\n\nexport const Json = z.string().transform((str, ctx): JsonValue => {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    ctx.addIssue({ code: 'custom', message: 'Invalid JSON' });\n    return z.NEVER;\n  }\n});\ntype Json = z.infer<typeof Json>;\n\nexport const Json5 = z.string().transform((str, ctx): JsonValue => {\n  try {\n    return JSON5.parse(str);\n  } catch (e) {\n    ctx.addIssue({ code: 'custom', message: 'Invalid JSON5' });\n    return z.NEVER;\n  }\n});\n\nexport const UtcDate = z\n  .string({ description: 'ISO 8601 string' })\n  .transform((str, ctx): DateTime => {\n    const date = DateTime.fromISO(str, { zone: 'utc' });\n    if (!date.isValid) {\n      ctx.addIssue({ code: 'custom', message: 'Invalid date' });\n      return z.NEVER;\n    }\n    return date;\n  });\n\nexport const Url = z.string().transform((str, ctx): URL => {\n  try {\n    return new URL(str);\n  } catch (e) {\n    ctx.addIssue({ code: 'custom', message: 'Invalid URL' });\n    return z.NEVER;\n  }\n});\n"]}