{"version":3,"file":"private-key.js","sourceRoot":"","sources":["../../../lib/util/git/private-key.ts"],"names":[],"mappings":";;;;AAAA,8DAAyB;AACzB,kEAAkC;AAClC,gEAA0B;AAC1B,0DAA0B;AAC1B,mEAAqE;AACrE,yCAAsC;AACtC,kCAA+B;AAC/B,oCAAwC;AACxC,0CAAqD;AAErD,IAAI,aAAiC,CAAC;AACtC,IAAI,KAAyB,CAAC;AAE9B,SAAgB,aAAa,CAAC,GAAuB;IACnD,IAAI,CAAC,YAAE,CAAC,8BAA8B,CAAC,GAAG,CAAC,EAAE;QAC3C,OAAO;KACR;IACD,IAAA,iCAAsB,EAAC,GAAG,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,CAAC;IAC7C,eAAM,CAAC,KAAK,CACV,kEAAkE,CACnE,CAAC;IACF,aAAa,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;AAC7B,CAAC;AATD,sCASC;AAED,KAAK,UAAU,SAAS;IACtB,IAAI,KAAK,EAAE;QACT,OAAO;KACR;IACD,MAAM,WAAW,GAAG,eAAK,CAAC,IAAI,CAAC,iBAAE,CAAC,MAAM,EAAE,GAAG,kBAAkB,CAAC,CAAC;IACjE,MAAM,kBAAE,CAAC,UAAU,CAAC,WAAW,EAAE,aAAc,CAAC,CAAC;IACjD,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAA,WAAI,EAAC,gBAAgB,WAAW,EAAE,CAAC,CAAC;IACrE,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,2BAA2B,CAAC,CAAC;IAC9D,KAAK,GAAG,GAAG,MAAM,GAAG,MAAM,EAAE;SACzB,KAAK,CAAC,oBAAY,CAAC;SACnB,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC;QACrD,EAAE,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;SACzB,KAAK,CAAC,GAAG,CAAC;SACV,KAAK,EAAE,CAAC;IACX,MAAM,kBAAE,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AAC/B,CAAC;AAEM,KAAK,UAAU,eAAe;IACnC,IAAI,CAAC,aAAa,EAAE;QAClB,OAAO;KACR;IACD,IAAI;QACF,MAAM,SAAS,EAAE,CAAC;QAClB,eAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;KACzC;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,gCAAgC,CAAC,CAAC;QACvD,MAAM,IAAI,KAAK,CAAC,oCAAmB,CAAC,CAAC;KACtC;AACH,CAAC;AAXD,0CAWC;AAEM,KAAK,UAAU,gBAAgB,CAAC,GAAW;IAChD,IAAI,CAAC,aAAa,EAAE;QAClB,OAAO;KACR;IACD,eAAM,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC;IAC1D,sBAAsB;IACtB,MAAM,IAAA,WAAI,EAAC,8BAA8B,KAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;IAC5D,MAAM,IAAA,WAAI,EAAC,gCAAgC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;AACxD,CAAC;AARD,4CAQC","sourcesContent":["import os from 'node:os';\nimport is from '@sindresorhus/is';\nimport fs from 'fs-extra';\nimport upath from 'upath';\nimport { PLATFORM_GPG_FAILED } from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { exec } from '../exec';\nimport { newlineRegex } from '../regex';\nimport { addSecretForSanitizing } from '../sanitize';\n\nlet gitPrivateKey: string | undefined;\nlet keyId: string | undefined;\n\nexport function setPrivateKey(key: string | undefined): void {\n  if (!is.nonEmptyStringAndNotWhitespace(key)) {\n    return;\n  }\n  addSecretForSanitizing(key.trim(), 'global');\n  logger.debug(\n    'gitPrivateKey: successfully set (but not yet written/configured)'\n  );\n  gitPrivateKey = key.trim();\n}\n\nasync function importKey(): Promise<void> {\n  if (keyId) {\n    return;\n  }\n  const keyFileName = upath.join(os.tmpdir() + '/git-private.key');\n  await fs.outputFile(keyFileName, gitPrivateKey!);\n  const { stdout, stderr } = await exec(`gpg --import ${keyFileName}`);\n  logger.debug({ stdout, stderr }, 'Private key import result');\n  keyId = `${stdout}${stderr}`\n    .split(newlineRegex)\n    .find((line) => line.includes('secret key imported'))\n    ?.replace('gpg: key ', '')\n    .split(':')\n    .shift();\n  await fs.remove(keyFileName);\n}\n\nexport async function writePrivateKey(): Promise<void> {\n  if (!gitPrivateKey) {\n    return;\n  }\n  try {\n    await importKey();\n    logger.debug('gitPrivateKey: imported');\n  } catch (err) {\n    logger.warn({ err }, 'gitPrivateKey: error importing');\n    throw new Error(PLATFORM_GPG_FAILED);\n  }\n}\n\nexport async function configSigningKey(cwd: string): Promise<void> {\n  if (!gitPrivateKey) {\n    return;\n  }\n  logger.debug('gitPrivateKey: configuring commit signing');\n  // TODO: types (#7154)\n  await exec(`git config user.signingkey ${keyId!}`, { cwd });\n  await exec(`git config commit.gpgsign true`, { cwd });\n}\n"]}