{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/util/cache/package/index.ts"],"names":[],"mappings":";;;;AACA,4DAAsC;AACtC,0DAAoC;AACpC,4DAAsC;AAGtC,IAAI,UAAoC,CAAC;AAEzC,SAAS,YAAY,CAAC,SAAiB,EAAE,GAAW;IAClD,OAAO,WAAW,SAAS,KAAK,GAAG,EAAE,CAAC;AACxC,CAAC;AAEM,KAAK,UAAU,GAAG,CACvB,SAAiB,EACjB,GAAW;IAEX,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,SAAS,CAAC;KAClB;IACD,MAAM,SAAS,GAAG,YAAY,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;IAC/C,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,SAAS,EAAE;QACzC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;QACxD,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;KACpB;IACD,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC7C,IAAI,KAAK,EAAE;QACT,8CAA8C;QAC9C,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,CAAC;QAClD,MAAM,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAW,oBAAoB,CAAC,IAAI,EAAE,CAAC;QAC1E,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAChC,QAAQ,CAAC,GAAG,CAAC,oBAAoB,EAAE,cAAc,CAAC,CAAC;KACpD;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAtBD,kBAsBC;AAEM,KAAK,UAAU,GAAG,CACvB,SAAiB,EACjB,GAAW,EACX,KAAc,EACd,OAAe;IAEf,IAAI,CAAC,UAAU,EAAE;QACf,OAAO;KACR;IACD,MAAM,SAAS,GAAG,YAAY,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;IAC/C,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACzB,MAAM,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IACrD,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,CAAC;IAClD,MAAM,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAW,oBAAoB,CAAC,IAAI,EAAE,CAAC;IAC1E,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAChC,QAAQ,CAAC,GAAG,CAAC,oBAAoB,EAAE,cAAc,CAAC,CAAC;AACrD,CAAC;AAjBD,kBAiBC;AAEM,KAAK,UAAU,IAAI,CAAC,MAAiB;IAC1C,IAAI,MAAM,CAAC,QAAQ,EAAE;QACnB,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACvC,UAAU,GAAG;YACX,GAAG,EAAE,UAAU,CAAC,GAAG;YACnB,GAAG,EAAE,UAAU,CAAC,GAAG;SACpB,CAAC;KACH;SAAM,IAAI,MAAM,CAAC,QAAQ,EAAE;QAC1B,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAChC,UAAU,GAAG;YACX,GAAG,EAAE,SAAS,CAAC,GAAG;YAClB,GAAG,EAAE,SAAS,CAAC,GAAG;YAClB,OAAO,EAAE,SAAS,CAAC,OAAO;SAC3B,CAAC;KACH;AACH,CAAC;AAfD,oBAeC;AAEM,KAAK,UAAU,OAAO,CAAC,MAAiB;IAC7C,IAAI,MAAM,EAAE,QAAQ,EAAE;QACpB,MAAM,UAAU,CAAC,GAAG,EAAE,CAAC;KACxB;IACD,IAAI,UAAU,EAAE,OAAO,EAAE;QACvB,MAAM,UAAU,CAAC,OAAO,EAAE,CAAC;KAC5B;AACH,CAAC;AAPD,0BAOC","sourcesContent":["import type { AllConfig } from '../../../config/types';\nimport * as memCache from '../memory';\nimport * as fileCache from './file';\nimport * as redisCache from './redis';\nimport type { PackageCache } from './types';\n\nlet cacheProxy: PackageCache | undefined;\n\nfunction getGlobalKey(namespace: string, key: string): string {\n  return `global%%${namespace}%%${key}`;\n}\n\nexport async function get<T = any>(\n  namespace: string,\n  key: string\n): Promise<T | undefined> {\n  if (!cacheProxy) {\n    return undefined;\n  }\n  const globalKey = getGlobalKey(namespace, key);\n  let start = 0;\n  if (memCache.get(globalKey) === undefined) {\n    memCache.set(globalKey, cacheProxy.get(namespace, key));\n    start = Date.now();\n  }\n  const result = await memCache.get(globalKey);\n  if (start) {\n    // Only count duration if it's not a duplicate\n    const durationMs = Math.round(Date.now() - start);\n    const cacheDurations = memCache.get<number[]>('package-cache-gets') ?? [];\n    cacheDurations.push(durationMs);\n    memCache.set('package-cache-gets', cacheDurations);\n  }\n  return result;\n}\n\nexport async function set(\n  namespace: string,\n  key: string,\n  value: unknown,\n  minutes: number\n): Promise<void> {\n  if (!cacheProxy) {\n    return;\n  }\n  const globalKey = getGlobalKey(namespace, key);\n  memCache.set(globalKey, value);\n  const start = Date.now();\n  await cacheProxy.set(namespace, key, value, minutes);\n  const durationMs = Math.round(Date.now() - start);\n  const cacheDurations = memCache.get<number[]>('package-cache-sets') ?? [];\n  cacheDurations.push(durationMs);\n  memCache.set('package-cache-sets', cacheDurations);\n}\n\nexport async function init(config: AllConfig): Promise<void> {\n  if (config.redisUrl) {\n    await redisCache.init(config.redisUrl);\n    cacheProxy = {\n      get: redisCache.get,\n      set: redisCache.set,\n    };\n  } else if (config.cacheDir) {\n    fileCache.init(config.cacheDir);\n    cacheProxy = {\n      get: fileCache.get,\n      set: fileCache.set,\n      cleanup: fileCache.cleanup,\n    };\n  }\n}\n\nexport async function cleanup(config: AllConfig): Promise<void> {\n  if (config?.redisUrl) {\n    await redisCache.end();\n  }\n  if (cacheProxy?.cleanup) {\n    await cacheProxy.cleanup();\n  }\n}\n"]}