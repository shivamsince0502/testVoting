{"version":3,"file":"file.js","sourceRoot":"","sources":["../../../../lib/util/cache/package/file.ts"],"names":[],"mappings":";;;;AAAA,8DAA8B;AAC9B,iCAAiC;AACjC,0DAA0B;AAC1B,4CAAyC;AACzC,6CAAsD;AAEtD,SAAS,MAAM,CAAC,SAAiB,EAAE,GAAW;IAC5C,OAAO,GAAG,SAAS,IAAI,GAAG,EAAE,CAAC;AAC/B,CAAC;AAED,IAAI,aAAqB,CAAC;AAE1B,KAAK,UAAU,EAAE,CAAC,SAAiB,EAAE,GAAW;IAC9C,eAAM,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,EAAE,sBAAsB,CAAC,CAAC;IACzD,MAAM,iBAAO,CAAC,EAAE,CAAC,KAAK,CAAC,aAAa,EAAE,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;AAChE,CAAC;AAEM,KAAK,UAAU,GAAG,CACvB,SAAiB,EACjB,GAAW;IAEX,IAAI,CAAC,aAAa,EAAE;QAClB,OAAO,SAAS,CAAC;KAClB;IACD,IAAI;QACF,MAAM,GAAG,GAAG,MAAM,iBAAO,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;QACrE,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QACpD,IAAI,WAAW,EAAE;YACf,IAAI,gBAAQ,CAAC,KAAK,EAAE,GAAG,gBAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;gBAC3D,eAAM,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,EAAE,wBAAwB,CAAC,CAAC;gBAC3D,qBAAqB;gBACrB,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;oBACzB,OAAO,WAAW,CAAC,KAAK,CAAC;iBAC1B;gBACD,MAAM,GAAG,GAAG,MAAM,IAAA,qBAAU,EAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAChD,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aACxB;YACD,MAAM,EAAE,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;SAC1B;KACF;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,EAAE,YAAY,CAAC,CAAC;KAChD;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AA1BD,kBA0BC;AAEM,KAAK,UAAU,GAAG,CACvB,SAAiB,EACjB,GAAW,EACX,KAAc,EACd,UAAU,GAAG,CAAC;IAEd,IAAI,CAAC,aAAa,EAAE;QAClB,OAAO;KACR;IACD,eAAM,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,UAAU,EAAE,EAAE,qBAAqB,CAAC,CAAC;IACpE,MAAM,iBAAO,CAAC,GAAG,CACf,aAAa,EACb,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,EACtB,IAAI,CAAC,SAAS,CAAC;QACb,QAAQ,EAAE,IAAI;QACd,KAAK,EAAE,MAAM,IAAA,mBAAQ,EAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,EAAE,gBAAQ,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;KACvD,CAAC,CACH,CAAC;AACJ,CAAC;AAnBD,kBAmBC;AAED,SAAgB,IAAI,CAAC,QAAgB;IACnC,aAAa,GAAG,eAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,6BAA6B,CAAC,CAAC;IACpE,eAAM,CAAC,KAAK,CAAC,4CAA4C,GAAG,aAAa,CAAC,CAAC;IAC3E,OAAO,aAAa,CAAC;AACvB,CAAC;AAJD,oBAIC;AAEM,KAAK,UAAU,OAAO;IAC3B,eAAM,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;IAC9D,IAAI;QACF,IAAI,UAAU,GAAG,CAAC,CAAC;QACnB,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,IAAI,KAAK,EAAE,MAAM,IAAI,IAAI,iBAAO,CAAC,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE;YACzD,UAAU,IAAI,CAAC,CAAC;YAChB,MAAM,UAAU,GAAG,IAAsC,CAAC;YAC1D,MAAM,GAAG,GAAG,MAAM,iBAAO,CAAC,GAAG,CAAC,aAAa,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC;YAC7D,IAAI,WAAgB,CAAC;YACrB,IAAI;gBACF,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;aAC/C;YAAC,OAAO,GAAG,EAAE;gBACZ,eAAM,CAAC,KAAK,CAAC,uCAAuC,CAAC,CAAC;aACvD;YACD,IACE,CAAC,WAAW;gBACZ,CAAC,WAAW,EAAE,MAAM;oBAClB,gBAAQ,CAAC,KAAK,EAAE,GAAG,gBAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAC1D;gBACA,MAAM,iBAAO,CAAC,EAAE,CAAC,KAAK,CAAC,aAAa,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC;gBACtD,YAAY,IAAI,CAAC,CAAC;aACnB;SACF;QACD,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;QACtD,eAAM,CAAC,KAAK,CACV,WAAW,YAAY,OAAO,UAAU,2BAA2B,UAAU,IAAI,CAClF,CAAC;KACH;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;QACvC,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,sCAAsC,CAAC,CAAC;KAC9D;AACH,CAAC;AAhCD,0BAgCC","sourcesContent":["import cacache from 'cacache';\nimport { DateTime } from 'luxon';\nimport upath from 'upath';\nimport { logger } from '../../../logger';\nimport { compress, decompress } from '../../compress';\n\nfunction getKey(namespace: string, key: string): string {\n  return `${namespace}-${key}`;\n}\n\nlet cacheFileName: string;\n\nasync function rm(namespace: string, key: string): Promise<void> {\n  logger.trace({ namespace, key }, 'Removing cache entry');\n  await cacache.rm.entry(cacheFileName, getKey(namespace, key));\n}\n\nexport async function get<T = never>(\n  namespace: string,\n  key: string\n): Promise<T | undefined> {\n  if (!cacheFileName) {\n    return undefined;\n  }\n  try {\n    const res = await cacache.get(cacheFileName, getKey(namespace, key));\n    const cachedValue = JSON.parse(res.data.toString());\n    if (cachedValue) {\n      if (DateTime.local() < DateTime.fromISO(cachedValue.expiry)) {\n        logger.trace({ namespace, key }, 'Returning cached value');\n        // istanbul ignore if\n        if (!cachedValue.compress) {\n          return cachedValue.value;\n        }\n        const res = await decompress(cachedValue.value);\n        return JSON.parse(res);\n      }\n      await rm(namespace, key);\n    }\n  } catch (err) {\n    logger.trace({ namespace, key }, 'Cache miss');\n  }\n  return undefined;\n}\n\nexport async function set(\n  namespace: string,\n  key: string,\n  value: unknown,\n  ttlMinutes = 5\n): Promise<void> {\n  if (!cacheFileName) {\n    return;\n  }\n  logger.trace({ namespace, key, ttlMinutes }, 'Saving cached value');\n  await cacache.put(\n    cacheFileName,\n    getKey(namespace, key),\n    JSON.stringify({\n      compress: true,\n      value: await compress(JSON.stringify(value)),\n      expiry: DateTime.local().plus({ minutes: ttlMinutes }),\n    })\n  );\n}\n\nexport function init(cacheDir: string): string {\n  cacheFileName = upath.join(cacheDir, '/renovate/renovate-cache-v1');\n  logger.debug('Initializing Renovate internal cache into ' + cacheFileName);\n  return cacheFileName;\n}\n\nexport async function cleanup(): Promise<void> {\n  logger.debug('Checking file package cache for expired items');\n  try {\n    let totalCount = 0;\n    let deletedCount = 0;\n    const startTime = Date.now();\n    for await (const item of cacache.ls.stream(cacheFileName)) {\n      totalCount += 1;\n      const cachedItem = item as unknown as cacache.CacheObject;\n      const res = await cacache.get(cacheFileName, cachedItem.key);\n      let cachedValue: any;\n      try {\n        cachedValue = JSON.parse(res.data.toString());\n      } catch (err) {\n        logger.debug('Error parsing cached value - deleting');\n      }\n      if (\n        !cachedValue ||\n        (cachedValue?.expiry &&\n          DateTime.local() > DateTime.fromISO(cachedValue.expiry))\n      ) {\n        await cacache.rm.entry(cacheFileName, cachedItem.key);\n        deletedCount += 1;\n      }\n    }\n    const durationMs = Math.round(Date.now() - startTime);\n    logger.debug(\n      `Deleted ${deletedCount} of ${totalCount} file cached entries in ${durationMs}ms`\n    );\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error cleaning up expired file cache');\n  }\n}\n"]}