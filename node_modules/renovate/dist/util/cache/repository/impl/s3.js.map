{"version":3,"file":"s3.js","sourceRoot":"","sources":["../../../../../lib/util/cache/repository/impl/s3.ts"],"names":[],"mappings":";;;AAAA,6CAAuC;AACvC,kDAK4B;AAC5B,+CAA4C;AAC5C,oCAAsD;AACtD,8CAAkD;AAElD,iCAAuC;AAEvC,MAAa,WAAY,SAAQ,oBAAa;IAC3B,QAAQ,CAAC;IACT,MAAM,CAAC;IACP,GAAG,CAAC;IAErB,YAAY,UAAkB,EAAE,WAAmB,EAAE,GAAW;QAC9D,KAAK,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QAC/B,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,IAAA,eAAU,EAAC,GAAG,CAAE,CAAC;QACzC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QACpC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,IAAA,gBAAW,GAAE,CAAC;IAChC,CAAC;IAED,KAAK,CAAC,IAAI;QACR,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC9C,MAAM,QAAQ,GAA0B;YACtC,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,GAAG,EAAE,aAAa;SACnB,CAAC;QACF,IAAI;YACF,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAC5C,IAAI,4BAAgB,CAAC,QAAQ,CAAC,CAC/B,CAAC;YACF,IAAI,GAAG,YAAY,sBAAQ,EAAE;gBAC3B,eAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;gBAC7C,OAAO,MAAM,IAAA,wBAAc,EAAC,GAAG,CAAC,CAAC;aAClC;YACD,eAAM,CAAC,IAAI,CACT,sEAAsE,OAAO,GAAG,gBAAgB,CACjG,CAAC;SACH;QAAC,OAAO,GAAG,EAAE;YACZ,sEAAsE;YACtE,IAAI,GAAG,CAAC,IAAI,KAAK,WAAW,EAAE;gBAC5B,eAAM,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC;aAC3D;iBAAM;gBACL,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,8BAA8B,CAAC,CAAC;aACtD;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,IAAqB;QAC/B,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC9C,MAAM,QAAQ,GAA0B;YACtC,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,GAAG,EAAE,aAAa;YAClB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAC1B,WAAW,EAAE,kBAAkB;SAChC,CAAC;QACF,IAAI;YACF,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,4BAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC1D;QAAC,OAAO,GAAG,EAAE;YACZ,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,+BAA+B,CAAC,CAAC;SACvD;IACH,CAAC;IAEO,cAAc,CAAC,QAA4B;QACjD,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,EAAE,CAAC;SACX;QAED,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC1B,OAAO,QAAQ,CAAC;SACjB;QAED,eAAM,CAAC,IAAI,CACT,EAAE,QAAQ,EAAE,EACZ,6EAA6E,CAC9E,CAAC;QACF,OAAO,QAAQ,GAAG,GAAG,CAAC;IACxB,CAAC;IAEO,gBAAgB;QACtB,OAAO,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,UAAU,aAAa,CAAC;IACrE,CAAC;CACF;AA3ED,kCA2EC","sourcesContent":["import { Readable } from 'node:stream';\nimport {\n  GetObjectCommand,\n  GetObjectCommandInput,\n  PutObjectCommand,\n  PutObjectCommandInput,\n} from '@aws-sdk/client-s3';\nimport { logger } from '../../../../logger';\nimport { getS3Client, parseS3Url } from '../../../s3';\nimport { streamToString } from '../../../streams';\nimport type { RepoCacheRecord } from '../schema';\nimport { RepoCacheBase } from './base';\n\nexport class RepoCacheS3 extends RepoCacheBase {\n  private readonly s3Client;\n  private readonly bucket;\n  private readonly dir;\n\n  constructor(repository: string, fingerprint: string, url: string) {\n    super(repository, fingerprint);\n    const { Bucket, Key } = parseS3Url(url)!;\n    this.dir = this.getCacheFolder(Key);\n    this.bucket = Bucket;\n    this.s3Client = getS3Client();\n  }\n\n  async read(): Promise<string | null> {\n    const cacheFileName = this.getCacheFileName();\n    const s3Params: GetObjectCommandInput = {\n      Bucket: this.bucket,\n      Key: cacheFileName,\n    };\n    try {\n      const { Body: res } = await this.s3Client.send(\n        new GetObjectCommand(s3Params)\n      );\n      if (res instanceof Readable) {\n        logger.debug('RepoCacheS3.read() - success');\n        return await streamToString(res);\n      }\n      logger.warn(\n        `RepoCacheS3.read() - failure - expecting Readable return type got '${typeof res}' type instead`\n      );\n    } catch (err) {\n      // https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html\n      if (err.name === 'NoSuchKey') {\n        logger.debug('RepoCacheS3.read() - No cached file found');\n      } else {\n        logger.warn({ err }, 'RepoCacheS3.read() - failure');\n      }\n    }\n    return null;\n  }\n\n  async write(data: RepoCacheRecord): Promise<void> {\n    const cacheFileName = this.getCacheFileName();\n    const s3Params: PutObjectCommandInput = {\n      Bucket: this.bucket,\n      Key: cacheFileName,\n      Body: JSON.stringify(data),\n      ContentType: 'application/json',\n    };\n    try {\n      await this.s3Client.send(new PutObjectCommand(s3Params));\n    } catch (err) {\n      logger.warn({ err }, 'RepoCacheS3.write() - failure');\n    }\n  }\n\n  private getCacheFolder(pathname: string | undefined): string {\n    if (!pathname) {\n      return '';\n    }\n\n    if (pathname.endsWith('/')) {\n      return pathname;\n    }\n\n    logger.warn(\n      { pathname },\n      'RepoCacheS3.getCacheFolder() - appending missing trailing slash to pathname'\n    );\n    return pathname + '/';\n  }\n\n  private getCacheFileName(): string {\n    return `${this.dir}${this.platform}/${this.repository}/cache.json`;\n  }\n}\n"]}