{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../../../lib/util/cache/repository/impl/base.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport hasha from 'hasha';\nimport { GlobalConfig } from '../../../../config/global';\nimport { logger } from '../../../../logger';\nimport { compress, decompress } from '../../../compress';\nimport { safeStringify } from '../../../stringify';\nimport { CACHE_REVISION } from '../common';\nimport { RepoCacheRecord, RepoCacheV13 } from '../schema';\nimport type { RepoCache, RepoCacheData } from '../types';\n\nexport abstract class RepoCacheBase implements RepoCache {\n  protected platform = GlobalConfig.get('platform')!;\n  private oldHash: string | null = null;\n  private data: RepoCacheData = {};\n\n  protected constructor(\n    protected readonly repository: string,\n    protected readonly fingerprint: string\n  ) {}\n\n  protected abstract read(): Promise<string | null>;\n\n  protected abstract write(data: RepoCacheRecord): Promise<void>;\n\n  private static parseData(input: string): RepoCacheData {\n    const data: RepoCacheData = JSON.parse(input);\n    // istanbul ignore next\n    if (data.branches) {\n      for (const branch of data.branches) {\n        if (branch.branchFingerprint) {\n          branch.commitFingerprint = branch.branchFingerprint;\n          delete branch.branchFingerprint;\n        }\n      }\n    }\n    return data;\n  }\n\n  private async restore(oldCache: RepoCacheRecord): Promise<void> {\n    if (oldCache.fingerprint !== this.fingerprint) {\n      logger.debug('Repository cache fingerprint is invalid');\n      return;\n    }\n    const jsonStr = await decompress(oldCache.payload);\n    this.data = RepoCacheBase.parseData(jsonStr);\n    this.oldHash = oldCache.hash;\n  }\n\n  async load(): Promise<void> {\n    try {\n      const rawOldCache = await this.read();\n      if (!is.string(rawOldCache)) {\n        logger.debug(\n          `RepoCacheBase.load() - expecting data of type 'string' received '${typeof rawOldCache}' instead - skipping`\n        );\n        return;\n      }\n      const oldCache = JSON.parse(rawOldCache) as unknown;\n\n      const cacheV13 = RepoCacheV13.safeParse(oldCache);\n      if (cacheV13.success) {\n        await this.restore(cacheV13.data);\n        logger.debug('Repository cache is restored from revision 13');\n        return;\n      }\n\n      logger.debug('Repository cache is invalid');\n    } catch (err) {\n      logger.debug({ err }, 'Error reading repository cache');\n    }\n  }\n\n  async save(): Promise<void> {\n    const jsonStr = safeStringify(this.data);\n    const hash = await hasha.async(jsonStr);\n    if (hash === this.oldHash) {\n      return;\n    }\n\n    const revision = CACHE_REVISION;\n    const repository = this.repository;\n    const fingerprint = this.fingerprint;\n\n    const payload = await compress(jsonStr);\n\n    await this.write({\n      revision,\n      repository,\n      fingerprint,\n      payload,\n      hash,\n    });\n  }\n\n  getData(): RepoCacheData {\n    return this.data;\n  }\n\n  isModified(): boolean | undefined {\n    if (!this.oldHash) {\n      return undefined;\n    }\n    const jsonStr = safeStringify(this.data);\n    return hasha(jsonStr) !== this.oldHash;\n  }\n}\n"]}