{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/util/cache/repository/index.ts"],"names":[],"mappings":";;;AAAA,mDAAsD;AACtD,4CAAyC;AACzC,sCAA4C;AAG5C,gDAAgD;AAChD,kDAAkD;AAClD,IAAI,SAAS,GAAc,IAAI,oBAAa,EAAE,CAAC;AAE/C,SAAgB,UAAU;IACxB,QAAQ,CAAC,IAAI,oBAAa,EAAE,CAAC,CAAC;AAChC,CAAC;AAFD,gCAEC;AAED,SAAgB,QAAQ,CAAC,KAAgB;IACvC,SAAS,GAAG,KAAK,CAAC;AACpB,CAAC;AAFD,4BAEC;AAED,SAAgB,QAAQ;IACtB,OAAO,SAAS,CAAC,OAAO,EAAE,CAAC;AAC7B,CAAC;AAFD,4BAEC;AAEM,KAAK,UAAU,SAAS;IAC7B,IAAI,qBAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;QAC9B,eAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;KACtD;SAAM;QACL,MAAM,SAAS,CAAC,IAAI,EAAE,CAAC;KACxB;AACH,CAAC;AAND,8BAMC;AAED,SAAgB,eAAe;IAC7B,OAAO,SAAS,CAAC,UAAU,EAAE,CAAC;AAChC,CAAC;AAFD,0CAEC","sourcesContent":["import { GlobalConfig } from '../../../config/global';\nimport { logger } from '../../../logger';\nimport { RepoCacheNull } from './impl/null';\nimport type { RepoCache, RepoCacheData } from './types';\n\n// This will be overwritten with initRepoCache()\n// Used primarily as a placeholder and for testing\nlet repoCache: RepoCache = new RepoCacheNull();\n\nexport function resetCache(): void {\n  setCache(new RepoCacheNull());\n}\n\nexport function setCache(cache: RepoCache): void {\n  repoCache = cache;\n}\n\nexport function getCache(): RepoCacheData {\n  return repoCache.getData();\n}\n\nexport async function saveCache(): Promise<void> {\n  if (GlobalConfig.get('dryRun')) {\n    logger.info(`DRY-RUN: Would save repository cache.`);\n  } else {\n    await repoCache.save();\n  }\n}\n\nexport function isCacheModified(): boolean | undefined {\n  return repoCache.isModified();\n}\n"]}