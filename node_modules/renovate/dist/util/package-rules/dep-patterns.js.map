{"version":3,"file":"dep-patterns.js","sourceRoot":"","sources":["../../../lib/util/package-rules/dep-patterns.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAElC,yCAAsC;AACtC,oCAAiC;AACjC,iCAAiC;AACjC,mCAAyC;AAEzC,MAAa,kBAAmB,SAAQ,cAAO;IACpC,OAAO,CACd,EAAE,OAAO,EAAE,UAAU,EAA0B,EAC/C,EAAE,gBAAgB,EAAe;QAEjC,IAAI,YAAE,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE;YAClC,OAAO,IAAI,CAAC;SACb;QAED,IAAI,YAAE,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YACzB,OAAO,KAAK,CAAC;SACd;QAED,IAAI,OAAO,GAAG,KAAK,CAAC;QACpB,KAAK,MAAM,cAAc,IAAI,gBAAgB,EAAE;YAC7C,MAAM,YAAY,GAAG,IAAA,aAAK,EAAC,IAAA,sBAAc,EAAC,cAAc,CAAC,CAAC,CAAC;YAC3D,IAAI,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;gBAC9B,eAAM,CAAC,KAAK,CAAC,GAAG,OAAO,oBAAoB,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;gBACnE,OAAO,GAAG,IAAI,CAAC;aAChB;SACF;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAEQ,QAAQ,CACf,EAAE,OAAO,EAAE,UAAU,EAA0B,EAC/C,EAAE,kBAAkB,EAAe;QAEnC,yDAAyD;QACzD,IAAI,YAAE,CAAC,SAAS,CAAC,kBAAkB,CAAC,EAAE;YACpC,OAAO,IAAI,CAAC;SACb;QACD,IAAI,YAAE,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YACzB,OAAO,KAAK,CAAC;SACd;QAED,IAAI,OAAO,GAAG,KAAK,CAAC;QACpB,KAAK,MAAM,OAAO,IAAI,kBAAkB,EAAE;YACxC,MAAM,YAAY,GAAG,IAAA,aAAK,EAAC,IAAA,sBAAc,EAAC,OAAO,CAAC,CAAC,CAAC;YACpD,IAAI,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;gBAC9B,eAAM,CAAC,KAAK,CAAC,GAAG,OAAO,oBAAoB,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;gBACnE,OAAO,GAAG,IAAI,CAAC;aAChB;SACF;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;CACF;AA9CD,gDA8CC","sourcesContent":["import is from '@sindresorhus/is';\nimport type { PackageRule, PackageRuleInputConfig } from '../../config/types';\nimport { logger } from '../../logger';\nimport { regEx } from '../regex';\nimport { Matcher } from './base';\nimport { massagePattern } from './utils';\n\nexport class DepPatternsMatcher extends Matcher {\n  override matches(\n    { depName, updateType }: PackageRuleInputConfig,\n    { matchDepPatterns }: PackageRule\n  ): boolean | null {\n    if (is.undefined(matchDepPatterns)) {\n      return null;\n    }\n\n    if (is.undefined(depName)) {\n      return false;\n    }\n\n    let isMatch = false;\n    for (const packagePattern of matchDepPatterns) {\n      const packageRegex = regEx(massagePattern(packagePattern));\n      if (packageRegex.test(depName)) {\n        logger.trace(`${depName} matches against ${String(packageRegex)}`);\n        isMatch = true;\n      }\n    }\n    return isMatch;\n  }\n\n  override excludes(\n    { depName, updateType }: PackageRuleInputConfig,\n    { excludeDepPatterns }: PackageRule\n  ): boolean | null {\n    // ignore lockFileMaintenance for backwards compatibility\n    if (is.undefined(excludeDepPatterns)) {\n      return null;\n    }\n    if (is.undefined(depName)) {\n      return false;\n    }\n\n    let isMatch = false;\n    for (const pattern of excludeDepPatterns) {\n      const packageRegex = regEx(massagePattern(pattern));\n      if (packageRegex.test(depName)) {\n        logger.trace(`${depName} matches against ${String(packageRegex)}`);\n        isMatch = true;\n      }\n    }\n    return isMatch;\n  }\n}\n"]}