{"version":3,"file":"sourceurl-prefixes.js","sourceRoot":"","sources":["../../../lib/util/package-rules/sourceurl-prefixes.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAElC,iCAAiC;AAEjC,MAAa,wBAAyB,SAAQ,cAAO;IAC1C,OAAO,CACd,EAAE,SAAS,EAA0B,EACrC,EAAE,sBAAsB,EAAe;QAEvC,IAAI,YAAE,CAAC,SAAS,CAAC,sBAAsB,CAAC,EAAE;YACxC,OAAO,IAAI,CAAC;SACb;QACD,IAAI,YAAE,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE;YAC3B,OAAO,KAAK,CAAC;SACd;QACD,MAAM,kBAAkB,GAAG,SAAS,EAAE,WAAW,EAAE,CAAC;QAEpD,OAAO,sBAAsB,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAC5C,kBAAkB,EAAE,UAAU,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CACrD,CAAC;IACJ,CAAC;CACF;AAjBD,4DAiBC","sourcesContent":["import is from '@sindresorhus/is';\nimport type { PackageRule, PackageRuleInputConfig } from '../../config/types';\nimport { Matcher } from './base';\n\nexport class SourceUrlPrefixesMatcher extends Matcher {\n  override matches(\n    { sourceUrl }: PackageRuleInputConfig,\n    { matchSourceUrlPrefixes }: PackageRule\n  ): boolean | null {\n    if (is.undefined(matchSourceUrlPrefixes)) {\n      return null;\n    }\n    if (is.undefined(sourceUrl)) {\n      return false;\n    }\n    const upperCaseSourceUrl = sourceUrl?.toUpperCase();\n\n    return matchSourceUrlPrefixes.some((prefix) =>\n      upperCaseSourceUrl?.startsWith(prefix.toUpperCase())\n    );\n  }\n}\n"]}