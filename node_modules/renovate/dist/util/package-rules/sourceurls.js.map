{"version":3,"file":"sourceurls.js","sourceRoot":"","sources":["../../../lib/util/package-rules/sourceurls.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAElC,iCAAiC;AAEjC,MAAa,iBAAkB,SAAQ,cAAO;IACnC,OAAO,CACd,EAAE,SAAS,EAA0B,EACrC,EAAE,eAAe,EAAe;QAEhC,IAAI,YAAE,CAAC,SAAS,CAAC,eAAe,CAAC,EAAE;YACjC,OAAO,IAAI,CAAC;SACb;QACD,IAAI,YAAE,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE;YAC3B,OAAO,KAAK,CAAC;SACd;QAED,MAAM,kBAAkB,GAAG,SAAS,EAAE,WAAW,EAAE,CAAC;QACpD,OAAO,eAAe,CAAC,IAAI,CACzB,CAAC,GAAG,EAAE,EAAE,CAAC,kBAAkB,KAAK,GAAG,CAAC,WAAW,EAAE,CAClD,CAAC;IACJ,CAAC;CACF;AAjBD,8CAiBC","sourcesContent":["import is from '@sindresorhus/is';\nimport type { PackageRule, PackageRuleInputConfig } from '../../config/types';\nimport { Matcher } from './base';\n\nexport class SourceUrlsMatcher extends Matcher {\n  override matches(\n    { sourceUrl }: PackageRuleInputConfig,\n    { matchSourceUrls }: PackageRule\n  ): boolean | null {\n    if (is.undefined(matchSourceUrls)) {\n      return null;\n    }\n    if (is.undefined(sourceUrl)) {\n      return false;\n    }\n\n    const upperCaseSourceUrl = sourceUrl?.toUpperCase();\n    return matchSourceUrls.some(\n      (url) => upperCaseSourceUrl === url.toUpperCase()\n    );\n  }\n}\n"]}