{"version":3,"file":"package-prefixes.js","sourceRoot":"","sources":["../../../lib/util/package-rules/package-prefixes.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAElC,yCAAsC;AACtC,iCAAiC;AAEjC,MAAa,sBAAuB,SAAQ,cAAO;IACxC,OAAO,CACd,EAAE,OAAO,EAAE,WAAW,EAA0B,EAChD,EAAE,oBAAoB,EAAe;QAErC,IAAI,YAAE,CAAC,SAAS,CAAC,oBAAoB,CAAC,EAAE;YACtC,OAAO,IAAI,CAAC;SACb;QAED,IAAI,YAAE,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YACzB,OAAO,KAAK,CAAC;SACd;QAED,IACE,YAAE,CAAC,MAAM,CAAC,WAAW,CAAC;YACtB,oBAAoB,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EACrE;YACA,OAAO,IAAI,CAAC;SACb;QACD,IAAI,oBAAoB,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE;YACrE,eAAM,CAAC,IAAI,CAAC,IAAI,CACd,EAAE,WAAW,EAAE,OAAO,EAAE,EACxB,sDAAsD,CACvD,CAAC;YACF,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAEQ,QAAQ,CACf,EAAE,OAAO,EAA0B,EACnC,EAAE,sBAAsB,EAAe;QAEvC,IAAI,YAAE,CAAC,SAAS,CAAC,sBAAsB,CAAC,EAAE;YACxC,OAAO,IAAI,CAAC;SACb;QACD,IAAI,YAAE,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YACzB,OAAO,KAAK,CAAC;SACd;QAED,OAAO,sBAAsB,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;IAC7E,CAAC;CACF;AA3CD,wDA2CC","sourcesContent":["import is from '@sindresorhus/is';\nimport type { PackageRule, PackageRuleInputConfig } from '../../config/types';\nimport { logger } from '../../logger';\nimport { Matcher } from './base';\n\nexport class PackagePrefixesMatcher extends Matcher {\n  override matches(\n    { depName, packageName }: PackageRuleInputConfig,\n    { matchPackagePrefixes }: PackageRule\n  ): boolean | null {\n    if (is.undefined(matchPackagePrefixes)) {\n      return null;\n    }\n\n    if (is.undefined(depName)) {\n      return false;\n    }\n\n    if (\n      is.string(packageName) &&\n      matchPackagePrefixes.some((prefix) => packageName.startsWith(prefix))\n    ) {\n      return true;\n    }\n    if (matchPackagePrefixes.some((prefix) => depName.startsWith(prefix))) {\n      logger.once.info(\n        { packageName, depName },\n        'Use matchDepPatterns instead of matchPackagePrefixes'\n      );\n      return true;\n    }\n\n    return false;\n  }\n\n  override excludes(\n    { depName }: PackageRuleInputConfig,\n    { excludePackagePrefixes }: PackageRule\n  ): boolean | null {\n    if (is.undefined(excludePackagePrefixes)) {\n      return null;\n    }\n    if (is.undefined(depName)) {\n      return false;\n    }\n\n    return excludePackagePrefixes.some((prefix) => depName.startsWith(prefix));\n  }\n}\n"]}