"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_branches_1 = require("./base-branches");
const categories_1 = require("./categories");
const current_value_1 = require("./current-value");
const current_version_1 = require("./current-version");
const datasources_1 = require("./datasources");
const dep_names_1 = require("./dep-names");
const dep_patterns_1 = require("./dep-patterns");
const dep_types_1 = require("./dep-types");
const files_1 = require("./files");
const managers_1 = require("./managers");
const merge_confidence_1 = require("./merge-confidence");
const package_names_1 = require("./package-names");
const package_patterns_1 = require("./package-patterns");
const package_prefixes_1 = require("./package-prefixes");
const sourceurl_prefixes_1 = require("./sourceurl-prefixes");
const sourceurls_1 = require("./sourceurls");
const update_types_1 = require("./update-types");
const matchers = [];
exports.default = matchers;
// Each matcher under the same index will use a logical OR, if multiple matchers are applied AND will be used
// applyPackageRules evaluates matchers in the order of insertion and returns early on failure.
// Therefore, when multiple matchers are set in a single packageRule, some may not be checked.
// Since matchConfidence matcher can abort the run due to unauthenticated use, it should be evaluated first.
matchers.push([new merge_confidence_1.MergeConfidenceMatcher()]);
matchers.push([
    new dep_names_1.DepNameMatcher(),
    new dep_patterns_1.DepPatternsMatcher(),
    new package_names_1.PackageNameMatcher(),
    new package_patterns_1.PackagePatternsMatcher(),
    new package_prefixes_1.PackagePrefixesMatcher(),
]);
matchers.push([new files_1.FileNamesMatcher()]);
matchers.push([new dep_types_1.DepTypesMatcher()]);
matchers.push([new base_branches_1.BaseBranchesMatcher()]);
matchers.push([new managers_1.ManagersMatcher()]);
matchers.push([new datasources_1.DatasourcesMatcher()]);
matchers.push([new update_types_1.UpdateTypesMatcher()]);
matchers.push([new sourceurls_1.SourceUrlsMatcher(), new sourceurl_prefixes_1.SourceUrlPrefixesMatcher()]);
matchers.push([new current_value_1.CurrentValueMatcher()]);
matchers.push([new current_version_1.CurrentVersionMatcher()]);
matchers.push([new categories_1.CategoriesMatcher()]);
//# sourceMappingURL=matchers.js.map