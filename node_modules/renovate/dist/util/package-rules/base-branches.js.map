{"version":3,"file":"base-branches.js","sourceRoot":"","sources":["../../../lib/util/package-rules/base-branches.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAElC,oCAAgD;AAChD,iCAAiC;AAEjC,MAAa,mBAAoB,SAAQ,cAAO;IACrC,OAAO,CACd,EAAE,UAAU,EAA0B,EACtC,EAAE,iBAAiB,EAAe;QAElC,IAAI,YAAE,CAAC,SAAS,CAAC,iBAAiB,CAAC,EAAE;YACnC,OAAO,IAAI,CAAC;SACb;QAED,IAAI,YAAE,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE;YAC5B,OAAO,KAAK,CAAC;SACd;QAED,OAAO,iBAAiB,CAAC,IAAI,CAAC,CAAC,eAAe,EAAW,EAAE;YACzD,MAAM,aAAa,GAAG,IAAA,4BAAoB,EAAC,eAAe,CAAC,CAAC;YAC5D,IAAI,aAAa,EAAE;gBACjB,OAAO,aAAa,CAAC,UAAU,CAAC,CAAC;aAClC;YACD,OAAO,eAAe,KAAK,UAAU,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AArBD,kDAqBC","sourcesContent":["import is from '@sindresorhus/is';\nimport type { PackageRule, PackageRuleInputConfig } from '../../config/types';\nimport { configRegexPredicate } from '../regex';\nimport { Matcher } from './base';\n\nexport class BaseBranchesMatcher extends Matcher {\n  override matches(\n    { baseBranch }: PackageRuleInputConfig,\n    { matchBaseBranches }: PackageRule\n  ): boolean | null {\n    if (is.undefined(matchBaseBranches)) {\n      return null;\n    }\n\n    if (is.undefined(baseBranch)) {\n      return false;\n    }\n\n    return matchBaseBranches.some((matchBaseBranch): boolean => {\n      const isAllowedPred = configRegexPredicate(matchBaseBranch);\n      if (isAllowedPred) {\n        return isAllowedPred(baseBranch);\n      }\n      return matchBaseBranch === baseBranch;\n    });\n  }\n}\n"]}