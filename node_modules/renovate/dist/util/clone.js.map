{"version":3,"file":"clone.js","sourceRoot":"","sources":["../../lib/util/clone.ts"],"names":[],"mappings":";;;AAAA,qCAAmC;AACnC,sCAAmC;AACnC,2CAA6C;AAE7C;;;GAGG;AACH,SAAgB,KAAK,CAAc,KAAQ;IACzC,IAAI;QACF,OAAO,IAAA,YAAK,EAAC,KAAK,CAAC,CAAC;KACrB;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,sBAAsB,CAAC,CAAC;QAC7C,MAAM,GAAG,GAAG,IAAA,0BAAc,EAAC,KAAK,CAAC,CAAC;QAClC,IAAI,GAAG,EAAE;YACP,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAM,CAAC;SAC7B;QAED,4CAA4C;QAC5C,MAAM,GAAG,CAAC;KACX;AACH,CAAC;AAbD,sBAaC","sourcesContent":["import { klona } from 'klona/json';\nimport { logger } from '../logger';\nimport { quickStringify } from './stringify';\n\n/**\n * Creates a deep clone of an object.\n * @param input The object to clone.\n */\nexport function clone<T = unknown>(input: T): T {\n  try {\n    return klona(input);\n  } catch (err) {\n    logger.warn({ err }, 'error cloning object');\n    const str = quickStringify(input);\n    if (str) {\n      return JSON.parse(str) as T;\n    }\n\n    // istanbul ignore next: not easily testable\n    throw err;\n  }\n}\n"]}