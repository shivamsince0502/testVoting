{"version":3,"file":"check.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/onboarding/branch/check.ts"],"names":[],"mappings":"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","sourcesContent":["import { configFileNames } from '../../../../config/app-strings';\nimport type { RenovateConfig } from '../../../../config/types';\nimport {\n  REPOSITORY_CLOSED_ONBOARDING,\n  REPOSITORY_NO_CONFIG,\n} from '../../../../constants/error-messages';\nimport { logger } from '../../../../logger';\nimport { Pr, platform } from '../../../../modules/platform';\nimport { ensureComment } from '../../../../modules/platform/comment';\nimport { scm } from '../../../../modules/platform/scm';\nimport { getCache } from '../../../../util/cache/repository';\nimport { readLocalFile } from '../../../../util/fs';\nimport { getBranchCommit } from '../../../../util/git';\n\nasync function findFile(fileName: string): Promise<boolean> {\n  logger.debug(`findFile(${fileName})`);\n  const fileList = await scm.getFileList();\n  return fileList.includes(fileName);\n}\n\nasync function configFileExists(): Promise<boolean> {\n  for (const fileName of configFileNames) {\n    if (fileName !== 'package.json' && (await findFile(fileName))) {\n      logger.debug(`Config file exists, fileName: ${fileName}`);\n      return true;\n    }\n  }\n  return false;\n}\n\nasync function packageJsonConfigExists(): Promise<boolean> {\n  try {\n    // TODO #7154\n    const pJson = JSON.parse((await readLocalFile('package.json', 'utf8'))!);\n    if (pJson.renovate) {\n      return true;\n    }\n  } catch (err) {\n    // Do nothing\n  }\n  return false;\n}\n\nfunction closedPrExists(config: RenovateConfig): Promise<Pr | null> {\n  return platform.findPr({\n    branchName: config.onboardingBranch!,\n    prTitle: config.onboardingPrTitle,\n    state: '!open',\n  });\n}\n\nexport async function isOnboarded(config: RenovateConfig): Promise<boolean> {\n  logger.debug('isOnboarded()');\n  const title = `Action required: Add a Renovate config`;\n\n  // Repo is onboarded if global config is bypassing onboarding and does not require a\n  // configuration file.\n  // The repo is considered \"not onboarded\" if:\n  // - An onboarding cache is present, and\n  // - The current default branch SHA matches the default SHA found in the cache\n  // Also if there is a closed pr skip using cache as it is outdated\n  if (config.requireConfig === 'optional' && config.onboarding === false) {\n    // Return early and avoid checking for config files\n    return true;\n  }\n  if (config.requireConfig === 'ignored') {\n    logger.debug('Config file will be ignored');\n    return true;\n  }\n\n  const closedOnboardingPr = await closedPrExists(config);\n  const cache = getCache();\n  const onboardingBranchCache = cache?.onboardingBranchCache;\n  // if onboarding cache is present and base branch has not been updated branch is not onboarded\n  // if closed pr exists then presence of onboarding cache doesn't matter as we need to skip onboarding\n  if (\n    config.onboarding &&\n    !closedOnboardingPr &&\n    onboardingBranchCache &&\n    onboardingBranchCache.defaultBranchSha ===\n      getBranchCommit(config.defaultBranch!)\n  ) {\n    logger.debug('Onboarding cache is valid. Repo is not onboarded');\n    return false;\n  }\n\n  if (cache.configFileName) {\n    logger.debug('Checking cached config file name');\n    try {\n      const configFileContent = await platform.getJsonFile(\n        cache.configFileName\n      );\n      if (configFileContent) {\n        if (\n          cache.configFileName !== 'package.json' ||\n          configFileContent.renovate\n        ) {\n          logger.debug('Existing config file confirmed');\n          logger.debug(\n            { fileName: cache.configFileName, config: configFileContent },\n            'Repository config'\n          );\n          return true;\n        }\n      }\n    } catch (err) {\n      // probably file doesn't exist\n    }\n    logger.debug('Existing config file no longer exists');\n    delete cache.configFileName;\n  }\n  if (await configFileExists()) {\n    await platform.ensureIssueClosing(title);\n    return true;\n  }\n  logger.debug('config file not found');\n  if (await packageJsonConfigExists()) {\n    logger.debug('package.json contains config');\n    await platform.ensureIssueClosing(title);\n    return true;\n  }\n\n  // If onboarding has been disabled and config files are required then the\n  // repository has not been onboarded yet\n  if (config.requireConfig === 'required' && config.onboarding === false) {\n    throw new Error(REPOSITORY_NO_CONFIG);\n  }\n\n  if (!closedOnboardingPr) {\n    logger.debug('Found no closed onboarding PR');\n    return false;\n  }\n  logger.debug('Found closed onboarding PR');\n  if (config.requireConfig === 'optional') {\n    logger.debug('Config not mandatory so repo is considered onboarded');\n    return true;\n  }\n  logger.debug('Repo is not onboarded and no merged PRs exist');\n  if (!config.suppressNotifications!.includes('onboardingClose')) {\n    // ensure PR comment\n    await ensureComment({\n      number: closedOnboardingPr.number,\n      topic: `Renovate is disabled`,\n      content: `Renovate is disabled because there is no Renovate configuration file. To enable Renovate, you can either (a) change this PR's title to get a new onboarding PR, and merge the new onboarding PR, or (b) create a Renovate config file, and commit that file to your base branch.`,\n    });\n  }\n  throw new Error(REPOSITORY_CLOSED_ONBOARDING);\n}\n\nexport async function getOnboardingPr(\n  config: RenovateConfig\n): Promise<Pr | null> {\n  return await platform.getBranchPr(config.onboardingBranch!);\n}\n"]}