{"version":3,"file":"onboarding-branch-cache.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/onboarding/branch/onboarding-branch-cache.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../../logger';\nimport { scm } from '../../../../modules/platform/scm';\nimport { getCache } from '../../../../util/cache/repository';\nimport { getBranchCommit } from '../../../../util/git';\n\nexport function setOnboardingCache(\n  defaultBranchSha: string,\n  onboardingBranchSha: string,\n  isConflicted: boolean,\n  isModified: boolean\n): void {\n  // do not update cache if commit is null/undefined\n  if (\n    !(\n      is.nonEmptyString(defaultBranchSha) &&\n      is.nonEmptyString(onboardingBranchSha)\n    )\n  ) {\n    logger.debug('Onboarding cache not updated');\n    return;\n  }\n\n  const cache = getCache();\n  const onboardingCache = {\n    defaultBranchSha,\n    onboardingBranchSha,\n    isConflicted,\n    isModified,\n  };\n  if (cache.onboardingBranchCache) {\n    logger.debug({ onboardingCache }, 'Update Onboarding Cache');\n  } else {\n    logger.debug({ onboardingCache }, 'Create Onboarding Cache');\n  }\n  cache.onboardingBranchCache = onboardingCache;\n}\n\nexport function deleteOnboardingCache(): void {\n  const cache = getCache();\n\n  if (cache?.onboardingBranchCache) {\n    logger.debug('Delete Onboarding Cache');\n    delete cache.onboardingBranchCache;\n  }\n}\n\n// checks if onboarding branch has been modified since last run\n// return true if cache isn't present\nexport function hasOnboardingBranchChanged(onboardingBranch: string): boolean {\n  const cache = getCache();\n  const onboardingSha = getBranchCommit(onboardingBranch);\n\n  if (cache.onboardingBranchCache) {\n    return onboardingSha !== cache.onboardingBranchCache.onboardingBranchSha;\n  }\n  return true;\n}\n\n// checks if onboarding branch has been modified by user\n// once set to true it stays true as we do not rebase onboarding branches anymore (this feature will be added in future though)\nexport async function isOnboardingBranchModified(\n  onboardingBranch: string\n): Promise<boolean> {\n  const cache = getCache();\n  const onboardingCache = cache.onboardingBranchCache;\n  const onboardingSha = getBranchCommit(onboardingBranch);\n  let isModified = false;\n\n  if (\n    onboardingCache &&\n    onboardingSha === onboardingCache.onboardingBranchSha &&\n    !is.undefined(onboardingCache.isModified)\n  ) {\n    return onboardingCache.isModified;\n  } else {\n    isModified = await scm.isBranchModified(onboardingBranch);\n  }\n\n  return isModified;\n}\n\nexport function getOnboardingFileNameFromCache(): string | undefined {\n  const cache = getCache();\n  return cache.onboardingBranchCache?.configFileName;\n}\n\nexport function getOnboardingConfigFromCache(): string | undefined {\n  const cache = getCache();\n  return cache.onboardingBranchCache?.configFileParsed;\n}\n\nexport function setOnboardingConfigDetails(\n  configFileName: string,\n  configFileParsed: string\n): void {\n  const cache = getCache();\n  if (cache.onboardingBranchCache) {\n    cache.onboardingBranchCache.configFileName = configFileName;\n    cache.onboardingBranchCache.configFileParsed = configFileParsed;\n  }\n}\n\nexport async function isOnboardingBranchConflicted(\n  defaultBranch: string,\n  onboardingBranch: string\n): Promise<boolean> {\n  const cache = getCache();\n  const onboardingCache = cache.onboardingBranchCache;\n  const onboardingSha = getBranchCommit(onboardingBranch);\n  const defaultBranchSha = getBranchCommit(defaultBranch);\n  let isConflicted = false;\n\n  if (\n    onboardingCache &&\n    defaultBranchSha === onboardingCache.defaultBranchSha &&\n    onboardingSha === onboardingCache.onboardingBranchSha &&\n    !is.undefined(onboardingCache.isConflicted)\n  ) {\n    return onboardingCache.isConflicted;\n  } else {\n    isConflicted = await scm.isBranchConflicted(\n      defaultBranch,\n      onboardingBranch\n    );\n  }\n\n  return isConflicted;\n}\n"]}