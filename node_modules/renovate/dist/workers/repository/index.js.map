{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/workers/repository/index.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport { GlobalConfig } from '../../config/global';\nimport { applySecretsToConfig } from '../../config/secrets';\nimport type { RenovateConfig } from '../../config/types';\nimport {\n  REPOSITORY_DISABLED_BY_CONFIG,\n  REPOSITORY_FORKED,\n  REPOSITORY_NO_CONFIG,\n} from '../../constants/error-messages';\nimport { pkg } from '../../expose.cjs';\nimport { instrument } from '../../instrumentation';\nimport { logger, setMeta } from '../../logger';\nimport { removeDanglingContainers } from '../../util/exec/docker';\nimport { deleteLocalFile, privateCacheDir } from '../../util/fs';\nimport { isCloned } from '../../util/git';\nimport { detectSemanticCommits } from '../../util/git/semantic';\nimport { clearDnsCache, printDnsStats } from '../../util/http/dns';\nimport * as queue from '../../util/http/queue';\nimport * as throttle from '../../util/http/throttle';\nimport { addSplit, getSplits, splitInit } from '../../util/split';\nimport { setBranchCache } from './cache';\nimport { ensureDependencyDashboard } from './dependency-dashboard';\nimport handleError from './error';\nimport { finalizeRepo } from './finalize';\nimport { pruneStaleBranches } from './finalize/prune';\nimport { initRepo } from './init';\nimport { OnboardingState } from './onboarding/common';\nimport { ensureOnboardingPr } from './onboarding/pr';\nimport { extractDependencies, updateRepo } from './process';\nimport type { ExtractResult } from './process/extract-update';\nimport { ProcessResult, processResult } from './result';\nimport { printLookupStats, printRequestStats } from './stats';\n\n// istanbul ignore next\nexport async function renovateRepository(\n  repoConfig: RenovateConfig,\n  canRetry = true\n): Promise<ProcessResult | undefined> {\n  splitInit();\n  let config = GlobalConfig.set(\n    applySecretsToConfig(repoConfig, undefined, false)\n  );\n  await removeDanglingContainers();\n  setMeta({ repository: config.repository });\n  logger.info({ renovateVersion: pkg.version }, 'Repository started');\n  logger.trace({ config });\n  let repoResult: ProcessResult | undefined;\n  queue.clear();\n  throttle.clear();\n  const localDir = GlobalConfig.get('localDir')!;\n  try {\n    await fs.ensureDir(localDir);\n    logger.debug('Using localDir: ' + localDir);\n    config = await initRepo(config);\n    addSplit('init');\n    const performExtract =\n      config.repoIsOnboarded! ||\n      !OnboardingState.onboardingCacheValid ||\n      OnboardingState.prUpdateRequested;\n    const { branches, branchList, packageFiles } = performExtract\n      ? await instrument('extract', () => extractDependencies(config))\n      : emptyExtract(config);\n    if (config.semanticCommits === 'auto') {\n      config.semanticCommits = await detectSemanticCommits();\n    }\n    if (\n      GlobalConfig.get('dryRun') !== 'lookup' &&\n      GlobalConfig.get('dryRun') !== 'extract'\n    ) {\n      await instrument('onboarding', () =>\n        ensureOnboardingPr(config, packageFiles, branches)\n      );\n      addSplit('onboarding');\n\n      const res = await instrument('update', () =>\n        updateRepo(config, branches)\n      );\n      setMeta({ repository: config.repository });\n      addSplit('update');\n      if (performExtract) {\n        await setBranchCache(branches); // update branch cache if performed extraction\n      }\n      if (res === 'automerged') {\n        if (canRetry) {\n          logger.info('Renovating repository again after automerge result');\n          const recursiveRes = await renovateRepository(repoConfig, false);\n          return recursiveRes;\n        }\n        logger.debug(`Automerged but already retried once`);\n      } else {\n        await ensureDependencyDashboard(config, branches, packageFiles);\n      }\n      await finalizeRepo(config, branchList);\n      // TODO #7154\n      repoResult = processResult(config, res!);\n    }\n  } catch (err) /* istanbul ignore next */ {\n    setMeta({ repository: config.repository });\n    const errorRes = await handleError(config, err);\n    const pruneWhenErrors = [\n      REPOSITORY_DISABLED_BY_CONFIG,\n      REPOSITORY_FORKED,\n      REPOSITORY_NO_CONFIG,\n    ];\n    if (pruneWhenErrors.includes(errorRes)) {\n      await pruneStaleBranches(config, []);\n    }\n    repoResult = processResult(config, errorRes);\n  }\n  if (localDir && !repoConfig.persistRepoData) {\n    try {\n      await deleteLocalFile('.');\n    } catch (err) /* istanbul ignore if */ {\n      logger.warn({ err }, 'localDir deletion error');\n    }\n  }\n  try {\n    await fs.remove(privateCacheDir());\n  } catch (err) /* istanbul ignore if */ {\n    logger.warn({ err }, 'privateCacheDir deletion error');\n  }\n  const splits = getSplits();\n  logger.debug(splits, 'Repository timing splits (milliseconds)');\n  printRequestStats();\n  printLookupStats();\n  printDnsStats();\n  clearDnsCache();\n  const cloned = isCloned();\n  logger.info({ cloned, durationMs: splits.total }, 'Repository finished');\n  return repoResult;\n}\n\n// istanbul ignore next: renovateRepository is ignored\nfunction emptyExtract(config: RenovateConfig): ExtractResult {\n  return {\n    branches: [],\n    branchList: [config.onboardingBranch!], // to prevent auto closing\n    packageFiles: {},\n  };\n}\n"]}