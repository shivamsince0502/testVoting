{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/update/branch/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { DateTime } from 'luxon';\nimport { GlobalConfig } from '../../../../config/global';\nimport type { RenovateConfig } from '../../../../config/types';\nimport {\n  CONFIG_VALIDATION,\n  MANAGER_LOCKFILE_ERROR,\n  PLATFORM_AUTHENTICATION_ERROR,\n  PLATFORM_BAD_CREDENTIALS,\n  PLATFORM_INTEGRATION_UNAUTHORIZED,\n  PLATFORM_RATE_LIMIT_EXCEEDED,\n  REPOSITORY_CHANGED,\n  SYSTEM_INSUFFICIENT_DISK_SPACE,\n  TEMPORARY_ERROR,\n  WORKER_FILE_UPDATE_FAILED,\n} from '../../../../constants/error-messages';\nimport { logger, removeMeta } from '../../../../logger';\nimport { getAdditionalFiles } from '../../../../modules/manager/npm/post-update';\nimport { Pr, platform } from '../../../../modules/platform';\nimport {\n  ensureComment,\n  ensureCommentRemoval,\n} from '../../../../modules/platform/comment';\nimport { scm } from '../../../../modules/platform/scm';\nimport { ExternalHostError } from '../../../../types/errors/external-host-error';\nimport { getElapsedMs } from '../../../../util/date';\nimport { emojify } from '../../../../util/emoji';\nimport {\n  getMergeConfidenceLevel,\n  isActiveConfidenceLevel,\n  satisfiesConfidenceLevel,\n} from '../../../../util/merge-confidence';\nimport { toMs } from '../../../../util/pretty-time';\nimport * as template from '../../../../util/template';\nimport { isLimitReached } from '../../../global/limits';\nimport type { BranchConfig, BranchResult, PrBlockedBy } from '../../../types';\nimport { embedChangelogs } from '../../changelog';\nimport { ensurePr } from '../pr';\nimport { checkAutoMerge } from '../pr/automerge';\nimport { setArtifactErrorStatus } from './artifacts';\nimport { tryBranchAutomerge } from './automerge';\nimport { prAlreadyExisted } from './check-existing';\nimport { commitFilesToBranch } from './commit';\nimport executePostUpgradeCommands from './execute-post-upgrade-commands';\nimport { getUpdatedPackageFiles } from './get-updated';\nimport { handleClosedPr, handleModifiedPr } from './handle-existing';\nimport { shouldReuseExistingBranch } from './reuse';\nimport { isScheduledNow } from './schedule';\nimport { setConfidence, setStability } from './status-checks';\n\nasync function rebaseCheck(\n  config: RenovateConfig,\n  branchPr: Pr\n): Promise<boolean> {\n  const titleRebase = branchPr.title?.startsWith('rebase!');\n  if (titleRebase) {\n    logger.debug(\n      `Manual rebase requested via PR title for #${branchPr.number}`\n    );\n    return true;\n  }\n  const labelRebase = !!branchPr.labels?.includes(config.rebaseLabel!);\n  if (labelRebase) {\n    logger.debug(\n      `Manual rebase requested via PR labels for #${branchPr.number}`\n    );\n    // istanbul ignore if\n    if (GlobalConfig.get('dryRun')) {\n      logger.info(\n        `DRY-RUN: Would delete label ${config.rebaseLabel!} from #${\n          branchPr.number\n        }`\n      );\n    } else {\n      await platform.deleteLabel(branchPr.number, config.rebaseLabel!);\n    }\n    return true;\n  }\n  const prRebaseChecked = !!branchPr.bodyStruct?.rebaseRequested;\n  if (prRebaseChecked) {\n    logger.debug(\n      `Manual rebase requested via PR checkbox for #${branchPr.number}`\n    );\n    return true;\n  }\n\n  return false;\n}\n\nasync function deleteBranchSilently(branchName: string): Promise<void> {\n  try {\n    await scm.deleteBranch(branchName);\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ branchName, err }, 'Branch auto-remove failed');\n  }\n}\n\nfunction userChangedTargetBranch(pr: Pr): boolean {\n  const oldTargetBranch = pr.bodyStruct?.debugData?.targetBranch;\n  if (oldTargetBranch && pr.targetBranch) {\n    return pr.targetBranch !== oldTargetBranch;\n  }\n  return false;\n}\n\nexport interface ProcessBranchResult {\n  branchExists: boolean;\n  updatesVerified?: boolean;\n  prBlockedBy?: PrBlockedBy;\n  prNo?: number;\n  result: BranchResult;\n  commitSha?: string | null;\n}\n\nexport async function processBranch(\n  branchConfig: BranchConfig\n): Promise<ProcessBranchResult> {\n  let commitSha: string | null = null;\n  let config: BranchConfig = { ...branchConfig };\n  logger.trace({ config }, 'processBranch()');\n  let branchExists = await scm.branchExists(config.branchName);\n  let updatesVerified = false;\n  if (!branchExists && config.branchPrefix !== config.branchPrefixOld) {\n    const branchName = config.branchName.replace(\n      config.branchPrefix!,\n      config.branchPrefixOld!\n    );\n    branchExists = await scm.branchExists(branchName);\n    if (branchExists) {\n      config.branchName = branchName;\n      logger.debug('Found existing branch with branchPrefixOld');\n    }\n  }\n\n  let branchPr = await platform.getBranchPr(config.branchName);\n  logger.debug(`branchExists=${branchExists}`);\n  const dependencyDashboardCheck =\n    config.dependencyDashboardChecks?.[config.branchName];\n  logger.debug(`dependencyDashboardCheck=${dependencyDashboardCheck!}`);\n  if (branchPr) {\n    config.rebaseRequested = await rebaseCheck(config, branchPr);\n    logger.debug(`PR rebase requested=${config.rebaseRequested}`);\n  }\n  const artifactErrorTopic = emojify(':warning: Artifact update problem');\n  try {\n    // Check if branch already existed\n    const existingPr =\n      !branchPr || config.automerge\n        ? await prAlreadyExisted(config)\n        : undefined;\n    if (existingPr?.state === 'merged') {\n      logger.debug(`Matching PR #${existingPr.number} was merged previously`);\n      if (config.automerge) {\n        logger.debug('Disabling automerge because PR was merged previously');\n        config.automerge = false;\n        config.automergedPreviously = true;\n      }\n    } else if (!branchPr && existingPr && !dependencyDashboardCheck) {\n      logger.debug(\n        { prTitle: config.prTitle },\n        'Closed PR already exists. Skipping branch.'\n      );\n      await handleClosedPr(config, existingPr);\n      return {\n        branchExists: false,\n        prNo: existingPr.number,\n        result: 'already-existed',\n      };\n    }\n    // istanbul ignore if\n    if (!branchExists && config.dependencyDashboardApproval) {\n      if (dependencyDashboardCheck) {\n        logger.debug(`Branch ${config.branchName} is approved for creation`);\n      } else {\n        logger.debug(`Branch ${config.branchName} needs approval`);\n        return {\n          branchExists,\n          prNo: branchPr?.number,\n          result: 'needs-approval',\n        };\n      }\n    }\n    if (\n      !branchExists &&\n      isLimitReached('Branches') &&\n      !dependencyDashboardCheck &&\n      !config.isVulnerabilityAlert\n    ) {\n      logger.debug('Reached branch limit - skipping branch creation');\n      return {\n        branchExists,\n        prNo: branchPr?.number,\n        result: 'branch-limit-reached',\n      };\n    }\n    if (\n      isLimitReached('Commits') &&\n      !dependencyDashboardCheck &&\n      !config.isVulnerabilityAlert\n    ) {\n      logger.debug('Reached commits limit - skipping branch');\n      return {\n        branchExists,\n        prNo: branchPr?.number,\n        result: 'commit-limit-reached',\n      };\n    }\n    if (\n      !branchExists &&\n      branchConfig.pendingChecks &&\n      !dependencyDashboardCheck\n    ) {\n      return {\n        branchExists: false,\n        prNo: branchPr?.number,\n        result: 'pending',\n      };\n    }\n    if (branchExists) {\n      // check if branch is labelled to stop\n      config.stopUpdating = branchPr?.labels?.includes(\n        config.stopUpdatingLabel!\n      );\n\n      const prRebaseChecked = !!branchPr?.bodyStruct?.rebaseRequested;\n\n      if (branchExists && !dependencyDashboardCheck && config.stopUpdating) {\n        if (!prRebaseChecked) {\n          logger.info(\n            'Branch updating is skipped because stopUpdatingLabel is present in config'\n          );\n          return {\n            branchExists: true,\n            prNo: branchPr?.number,\n            result: 'no-work',\n          };\n        }\n      }\n\n      logger.debug('Checking if PR has been edited');\n      const branchIsModified = await scm.isBranchModified(config.branchName);\n      if (branchPr) {\n        logger.debug('Found existing branch PR');\n        if (branchPr.state !== 'open') {\n          logger.debug(\n            'PR has been closed or merged since this run started - aborting'\n          );\n          throw new Error(REPOSITORY_CHANGED);\n        }\n        if (branchIsModified || userChangedTargetBranch(branchPr)) {\n          logger.debug(`PR has been edited, PrNo:${branchPr.number}`);\n          await handleModifiedPr(config, branchPr);\n          if (!(dependencyDashboardCheck || config.rebaseRequested)) {\n            return {\n              branchExists,\n              prNo: branchPr.number,\n              result: 'pr-edited',\n            };\n          }\n        }\n      } else if (branchIsModified) {\n        const oldPr = await platform.findPr({\n          branchName: config.branchName,\n          state: '!open',\n        });\n        if (!oldPr) {\n          logger.debug('Branch has been edited but found no PR - skipping');\n          return {\n            branchExists,\n            result: 'pr-edited',\n          };\n        }\n        const branchSha = await scm.getBranchCommit(config.branchName);\n        const oldPrSha = oldPr?.sha;\n        if (!oldPrSha || oldPrSha === branchSha) {\n          logger.debug(\n            { oldPrNumber: oldPr.number, oldPrSha, branchSha },\n            'Found old PR matching this branch - will override it'\n          );\n        } else {\n          logger.debug(\n            { oldPrNumber: oldPr.number, oldPrSha, branchSha },\n            'Found old PR but the SHA is different'\n          );\n          return {\n            branchExists,\n            result: 'pr-edited',\n          };\n        }\n      }\n    }\n\n    // Check schedule\n    config.isScheduledNow = isScheduledNow(config, 'schedule');\n    if (!config.isScheduledNow && !dependencyDashboardCheck) {\n      if (!branchExists) {\n        logger.debug('Skipping branch creation as not within schedule');\n        return {\n          branchExists,\n          prNo: branchPr?.number,\n          result: 'not-scheduled',\n        };\n      }\n      if (config.updateNotScheduled === false && !config.rebaseRequested) {\n        logger.debug('Skipping branch update as not within schedule');\n        return {\n          branchExists,\n          prNo: branchPr?.number,\n          result: 'update-not-scheduled',\n        };\n      }\n      // istanbul ignore if\n      if (!branchPr) {\n        logger.debug('Skipping PR creation out of schedule');\n        return {\n          branchExists,\n          result: 'not-scheduled',\n        };\n      }\n      logger.debug(\n        'Branch + PR exists but is not scheduled -- will update if necessary'\n      );\n    }\n    //stability checks\n    if (\n      config.upgrades.some(\n        (upgrade) =>\n          (is.nonEmptyString(upgrade.minimumReleaseAge) &&\n            upgrade.releaseTimestamp) ||\n          isActiveConfidenceLevel(upgrade.minimumConfidence!)\n      )\n    ) {\n      // Only set a stability status check if one or more of the updates contain\n      // both a minimumReleaseAge setting and a releaseTimestamp\n      config.stabilityStatus = 'green';\n      // Default to 'success' but set 'pending' if any update is pending\n      for (const upgrade of config.upgrades) {\n        if (\n          is.nonEmptyString(upgrade.minimumReleaseAge) &&\n          upgrade.releaseTimestamp\n        ) {\n          const timeElapsed = getElapsedMs(upgrade.releaseTimestamp);\n          if (timeElapsed < (toMs(upgrade.minimumReleaseAge) ?? 0)) {\n            logger.debug(\n              {\n                depName: upgrade.depName,\n                timeElapsed,\n                minimumReleaseAge: upgrade.minimumReleaseAge,\n              },\n              'Update has not passed minimum release age'\n            );\n            config.stabilityStatus = 'yellow';\n            continue;\n          }\n        }\n        const datasource = upgrade.datasource!;\n        const depName = upgrade.depName!;\n        const minimumConfidence = upgrade.minimumConfidence!;\n        const updateType = upgrade.updateType!;\n        const currentVersion = upgrade.currentVersion!;\n        const newVersion = upgrade.newVersion!;\n        if (isActiveConfidenceLevel(minimumConfidence)) {\n          const confidence =\n            (await getMergeConfidenceLevel(\n              datasource,\n              depName,\n              currentVersion,\n              newVersion,\n              updateType\n            )) ?? 'neutral';\n          if (satisfiesConfidenceLevel(confidence, minimumConfidence)) {\n            config.confidenceStatus = 'green';\n          } else {\n            logger.debug(\n              { depName, confidence, minimumConfidence },\n              'Update does not meet minimum confidence scores'\n            );\n            config.confidenceStatus = 'yellow';\n            continue;\n          }\n        }\n      }\n      // Don't create a branch if we know it will be status 'pending'\n      if (\n        !dependencyDashboardCheck &&\n        !branchExists &&\n        config.stabilityStatus === 'yellow' &&\n        ['not-pending', 'status-success'].includes(config.prCreation!)\n      ) {\n        logger.debug(\n          'Skipping branch creation due to internal status checks not met'\n        );\n        return {\n          branchExists,\n          prNo: branchPr?.number,\n          result: 'pending',\n        };\n      }\n    }\n\n    const userRebaseRequested =\n      dependencyDashboardCheck === 'rebase' ||\n      !!config.dependencyDashboardRebaseAllOpen ||\n      !!config.rebaseRequested;\n    const userApproveAllPendingPR = !!config.dependencyDashboardAllPending;\n    const userOpenAllRateLimtedPR = !!config.dependencyDashboardAllRateLimited;\n    if (userRebaseRequested) {\n      logger.debug('User has requested rebase');\n      config.reuseExistingBranch = false;\n    } else if (dependencyDashboardCheck === 'global-config') {\n      logger.debug(`Manual create/rebase requested via checkedBranches`);\n      config.reuseExistingBranch = false;\n    } else if (userApproveAllPendingPR) {\n      logger.debug(\n        'A user manually approved all pending PRs via the Dependency Dashboard.'\n      );\n    } else if (userOpenAllRateLimtedPR) {\n      logger.debug(\n        'A user manually approved all rate-limited PRs via the Dependency Dashboard.'\n      );\n    } else if (\n      branchExists &&\n      config.rebaseWhen === 'never' &&\n      !dependencyDashboardCheck\n    ) {\n      logger.debug('rebaseWhen=never so skipping branch update check');\n      return {\n        branchExists,\n        prNo: branchPr?.number,\n        result: 'no-work',\n      };\n    }\n    // if the base branch has been changed by user in renovate config, rebase onto the new baseBranch\n    // we have already confirmed earlier that branch isn't modified, so its safe to use targetBranch here\n    else if (\n      branchPr?.targetBranch &&\n      branchPr.targetBranch !== config.baseBranch\n    ) {\n      logger.debug(\n        'Base branch changed by user, rebasing the branch onto new base'\n      );\n      config.reuseExistingBranch = false;\n    } else {\n      config = { ...config, ...(await shouldReuseExistingBranch(config)) };\n    }\n    // TODO: types (#7154)\n    logger.debug(`Using reuseExistingBranch: ${config.reuseExistingBranch!}`);\n    if (!(config.reuseExistingBranch && config.skipBranchUpdate)) {\n      await scm.checkoutBranch(config.baseBranch);\n      const res = await getUpdatedPackageFiles(config);\n      // istanbul ignore if\n      if (res.artifactErrors && config.artifactErrors) {\n        res.artifactErrors = config.artifactErrors.concat(res.artifactErrors);\n      }\n      config = { ...config, ...res };\n      if (config.updatedPackageFiles?.length) {\n        logger.debug(\n          `Updated ${config.updatedPackageFiles.length} package files`\n        );\n      } else {\n        logger.debug('No package files need updating');\n      }\n      const additionalFiles = await getAdditionalFiles(\n        config,\n        branchConfig.packageFiles!\n      );\n      config.artifactErrors = (config.artifactErrors ?? []).concat(\n        additionalFiles.artifactErrors\n      );\n      config.updatedArtifacts = (config.updatedArtifacts ?? []).concat(\n        additionalFiles.updatedArtifacts\n      );\n      if (config.updatedArtifacts?.length) {\n        logger.debug(\n          {\n            updatedArtifacts: config.updatedArtifacts.map((f) =>\n              f.type === 'deletion' ? `${f.path} (delete)` : f.path\n            ),\n          },\n          `Updated ${config.updatedArtifacts.length} lock files`\n        );\n      } else {\n        logger.debug('No updated lock files in branch');\n      }\n      if (config.fetchReleaseNotes === 'branch') {\n        await embedChangelogs(config.upgrades);\n      }\n\n      const postUpgradeCommandResults = await executePostUpgradeCommands(\n        config\n      );\n\n      if (postUpgradeCommandResults !== null) {\n        const { updatedArtifacts, artifactErrors } = postUpgradeCommandResults;\n        config.updatedArtifacts = updatedArtifacts;\n        config.artifactErrors = artifactErrors;\n      }\n\n      removeMeta(['dep']);\n\n      if (config.artifactErrors?.length) {\n        if (config.releaseTimestamp) {\n          logger.debug(`Branch timestamp: ` + config.releaseTimestamp);\n          const releaseTimestamp = DateTime.fromISO(config.releaseTimestamp);\n          if (releaseTimestamp.plus({ hours: 2 }) < DateTime.local()) {\n            logger.debug(\n              'PR is older than 2 hours, raise PR with lock file errors'\n            );\n          } else if (branchExists) {\n            logger.debug(\n              'PR is less than 2 hours old but branchExists so updating anyway'\n            );\n          } else {\n            logger.debug(\n              'PR is less than 2 hours old - raise error instead of PR'\n            );\n            throw new Error(MANAGER_LOCKFILE_ERROR);\n          }\n        } else {\n          logger.debug('PR has no releaseTimestamp');\n        }\n      } else if (config.updatedArtifacts?.length && branchPr) {\n        // If there are artifacts, no errors, and an existing PR then ensure any artifacts error comment is removed\n        // istanbul ignore if\n        if (GlobalConfig.get('dryRun')) {\n          logger.info(\n            `DRY-RUN: Would ensure comment removal in PR #${branchPr.number}`\n          );\n        } else {\n          // Remove artifacts error comment only if this run has successfully updated artifacts\n          await ensureCommentRemoval({\n            type: 'by-topic',\n            number: branchPr.number,\n            topic: artifactErrorTopic,\n          });\n        }\n      }\n      const forcedManually = userRebaseRequested || !branchExists;\n\n      config.isConflicted ??=\n        branchExists &&\n        (await scm.isBranchConflicted(config.baseBranch, config.branchName));\n      config.forceCommit = forcedManually || config.isConflicted;\n\n      // compile commit message with body, which maybe needs changelogs\n      if (config.commitBody) {\n        // changelog is on first upgrade\n        config.commitMessage = `${config.commitMessage!}\\n\\n${template.compile(\n          config.commitBody,\n          {\n            ...config,\n            logJSON: config.upgrades[0].logJSON,\n            releases: config.upgrades[0].releases,\n          }\n        )}`;\n\n        logger.trace(`commitMessage: ` + JSON.stringify(config.commitMessage));\n      }\n\n      commitSha = await commitFilesToBranch(config);\n      // Checkout to base branch to ensure that the next branch processing always starts with git being on the baseBranch\n      // baseBranch is not checked out at the start of processBranch() due to pull/16246\n      await scm.checkoutBranch(config.baseBranch);\n      updatesVerified = true;\n    }\n    // istanbul ignore if\n    if (branchPr && platform.refreshPr) {\n      await platform.refreshPr(branchPr.number);\n    }\n    if (!commitSha && !branchExists) {\n      return {\n        branchExists,\n        prNo: branchPr?.number,\n        result: 'no-work',\n      };\n    }\n    if (commitSha) {\n      const action = branchExists ? 'updated' : 'created';\n      logger.info({ commitSha }, `Branch ${action}`);\n    }\n    // Set branch statuses\n    await setArtifactErrorStatus(config);\n    await setStability(config);\n    await setConfidence(config);\n\n    // new commit means status check are pretty sure pending but maybe not reported yet\n    // if PR has not been created + new commit + prCreation !== immediate skip\n    // but do not break when there are artifact errors\n    if (\n      !branchPr &&\n      !config.artifactErrors?.length &&\n      !userRebaseRequested &&\n      commitSha &&\n      config.prCreation !== 'immediate'\n    ) {\n      logger.debug(`Branch status pending, current sha: ${commitSha}`);\n      return {\n        branchExists: true,\n        updatesVerified,\n        result: 'pending',\n        commitSha,\n      };\n    }\n\n    // Try to automerge branch and finish if successful, but only if branch already existed before this run\n    // skip if we have a non-immediate pr and there is an existing PR,\n    // we want to update the PR and skip the Auto merge since status checks aren't done yet\n    if (!config.artifactErrors?.length && (!commitSha || config.ignoreTests)) {\n      const mergeStatus = await tryBranchAutomerge(config);\n      logger.debug(`mergeStatus=${mergeStatus}`);\n      if (mergeStatus === 'automerged') {\n        if (GlobalConfig.get('dryRun')) {\n          logger.info('DRY-RUN: Would delete branch' + config.branchName);\n        } else {\n          await deleteBranchSilently(config.branchName);\n        }\n        logger.debug('Branch is automerged - returning');\n        return { branchExists: false, result: 'automerged' };\n      }\n      if (mergeStatus === 'off schedule') {\n        logger.debug(\n          'Branch cannot automerge now because automergeSchedule is off schedule - skipping'\n        );\n        return {\n          branchExists,\n          result: 'not-scheduled',\n          commitSha,\n        };\n      }\n      if (\n        mergeStatus === 'stale' &&\n        ['conflicted', 'never'].includes(config.rebaseWhen!)\n      ) {\n        logger.warn(\n          'Branch cannot automerge because it is behind base branch and rebaseWhen setting disallows rebasing - raising a PR instead'\n        );\n        config.forcePr = true;\n        config.branchAutomergeFailureMessage = mergeStatus;\n      }\n      if (\n        mergeStatus === 'automerge aborted - PR exists' ||\n        mergeStatus === 'branch status error' ||\n        mergeStatus === 'failed'\n      ) {\n        logger.debug(\n          `Branch automerge not possible, mergeStatus:${mergeStatus}`\n        );\n        config.forcePr = true;\n        config.branchAutomergeFailureMessage = mergeStatus;\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.statusCode === 404) {\n      logger.debug({ err }, 'Received a 404 error - aborting run');\n      throw new Error(REPOSITORY_CHANGED);\n    }\n    if (err.message === PLATFORM_RATE_LIMIT_EXCEEDED) {\n      logger.debug('Passing rate-limit-exceeded error up');\n      throw err;\n    }\n    if (err.message === REPOSITORY_CHANGED) {\n      logger.debug('Passing repository-changed error up');\n      throw err;\n    }\n    if (err.message?.startsWith('remote: Invalid username or password')) {\n      logger.debug('Throwing bad credentials');\n      throw new Error(PLATFORM_BAD_CREDENTIALS);\n    }\n    if (\n      err.message?.startsWith(\n        'ssh_exchange_identification: Connection closed by remote host'\n      )\n    ) {\n      logger.debug('Throwing bad credentials');\n      throw new Error(PLATFORM_BAD_CREDENTIALS);\n    }\n    if (err.message === PLATFORM_BAD_CREDENTIALS) {\n      logger.debug('Passing bad-credentials error up');\n      throw err;\n    }\n    if (err.message === PLATFORM_INTEGRATION_UNAUTHORIZED) {\n      logger.debug('Passing integration-unauthorized error up');\n      throw err;\n    }\n    if (err.message === MANAGER_LOCKFILE_ERROR) {\n      logger.debug('Passing lockfile-error up');\n      throw err;\n    }\n    if (err.message?.includes('space left on device')) {\n      throw new Error(SYSTEM_INSUFFICIENT_DISK_SPACE);\n    }\n    if (err.message === SYSTEM_INSUFFICIENT_DISK_SPACE) {\n      logger.debug('Passing disk-space error up');\n      throw err;\n    }\n    if (err.message.startsWith('Resource not accessible by integration')) {\n      logger.debug('Passing 403 error up');\n      throw err;\n    }\n    if (err.message === WORKER_FILE_UPDATE_FAILED) {\n      logger.warn('Error updating branch: update failure');\n    } else if (err.message.startsWith('bundler-')) {\n      // we have already warned inside the bundler artifacts error handling, so just return\n      return {\n        branchExists: true,\n        updatesVerified,\n        prNo: branchPr?.number,\n        result: 'error',\n        commitSha,\n      };\n    } else if (\n      err.messagee &&\n      err.message.includes('fatal: Authentication failed')\n    ) {\n      throw new Error(PLATFORM_AUTHENTICATION_ERROR);\n    } else if (err.message?.includes('fatal: bad revision')) {\n      logger.debug({ err }, 'Aborting job due to bad revision error');\n      throw new Error(REPOSITORY_CHANGED);\n    } else if (err.message === CONFIG_VALIDATION) {\n      logger.debug('Passing config validation error up');\n      throw err;\n    } else if (err.message === TEMPORARY_ERROR) {\n      logger.debug('Passing TEMPORARY_ERROR error up');\n      throw err;\n    } else if (!(err instanceof ExternalHostError)) {\n      logger.warn({ err }, `Error updating branch`);\n    }\n    // Don't throw here - we don't want to stop the other renovations\n    return {\n      branchExists,\n      prNo: branchPr?.number,\n      result: 'error',\n      commitSha,\n    };\n  }\n  try {\n    logger.debug('Ensuring PR');\n    logger.debug(\n      `There are ${config.errors!.length} errors and ${\n        config.warnings!.length\n      } warnings`\n    );\n    const ensurePrResult = await ensurePr(config);\n    if (ensurePrResult.type === 'without-pr') {\n      const { prBlockedBy } = ensurePrResult;\n      branchPr = null;\n      if (prBlockedBy === 'RateLimited' && !config.isVulnerabilityAlert) {\n        logger.debug('Reached PR limit - skipping PR creation');\n        return {\n          branchExists,\n          prBlockedBy,\n          result: 'pr-limit-reached',\n          commitSha,\n        };\n      }\n      // TODO: ensurePr should check for automerge itself (#9719)\n      if (prBlockedBy === 'NeedsApproval') {\n        return {\n          branchExists,\n          prBlockedBy,\n          result: 'needs-pr-approval',\n          commitSha,\n        };\n      }\n      if (prBlockedBy === 'AwaitingTests') {\n        return {\n          branchExists,\n          prBlockedBy,\n          result: 'pending',\n          commitSha,\n        };\n      }\n      if (prBlockedBy === 'BranchAutomerge') {\n        return {\n          branchExists,\n          prBlockedBy,\n          result: 'done',\n          commitSha,\n        };\n      }\n      if (prBlockedBy === 'Error') {\n        return {\n          branchExists,\n          prBlockedBy,\n          result: 'error',\n          commitSha,\n        };\n      }\n      logger.warn({ prBlockedBy }, 'Unknown PrBlockedBy result');\n      return {\n        branchExists,\n        prBlockedBy,\n        result: 'error',\n        commitSha,\n      };\n    }\n    if (ensurePrResult.type === 'with-pr') {\n      const { pr } = ensurePrResult;\n      branchPr = pr;\n      if (config.artifactErrors?.length) {\n        logger.warn(\n          { artifactErrors: config.artifactErrors },\n          'artifactErrors'\n        );\n        let content = `Renovate failed to update `;\n        content +=\n          config.artifactErrors.length > 1 ? 'artifacts' : 'an artifact';\n        content +=\n          ' related to this branch. You probably do not want to merge this PR as-is.';\n        content += emojify(\n          `\\n\\n:recycle: Renovate will retry this branch, including artifacts, only when one of the following happens:\\n\\n`\n        );\n        content +=\n          ' - any of the package files in this branch needs updating, or \\n';\n        content += ' - the branch becomes conflicted, or\\n';\n        content +=\n          ' - you click the rebase/retry checkbox if found above, or\\n';\n        content +=\n          ' - you rename this PR\\'s title to start with \"rebase!\" to trigger it manually';\n        content += '\\n\\nThe artifact failure details are included below:\\n\\n';\n        // TODO: types (#7154)\n        config.artifactErrors.forEach((error) => {\n          content += `##### File name: ${error.lockFile!}\\n\\n`;\n          content += `\\`\\`\\`\\n${error.stderr!}\\n\\`\\`\\`\\n\\n`;\n        });\n        content = platform.massageMarkdown(content);\n        if (\n          !(\n            config.suppressNotifications!.includes('artifactErrors') ||\n            config.suppressNotifications!.includes('lockFileErrors')\n          )\n        ) {\n          if (GlobalConfig.get('dryRun')) {\n            logger.info(\n              `DRY-RUN: Would ensure lock file error comment in PR #${pr.number}`\n            );\n          } else {\n            await ensureComment({\n              number: pr.number,\n              topic: artifactErrorTopic,\n              content,\n            });\n          }\n        }\n      } else if (config.automerge) {\n        logger.debug('PR is configured for automerge');\n        // skip automerge if there is a new commit since status checks aren't done yet\n        if (!commitSha || config.ignoreTests) {\n          logger.debug('checking auto-merge');\n          const prAutomergeResult = await checkAutoMerge(pr, config);\n          if (prAutomergeResult?.automerged) {\n            return {\n              branchExists,\n              result: 'automerged',\n              commitSha,\n            };\n          }\n        }\n      } else {\n        logger.debug('PR is not configured for automerge');\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (\n      err instanceof ExternalHostError ||\n      [PLATFORM_RATE_LIMIT_EXCEEDED, REPOSITORY_CHANGED].includes(err.message)\n    ) {\n      logger.debug('Passing PR error up');\n      throw err;\n    }\n    // Otherwise don't throw here - we don't want to stop the other renovations\n    logger.error({ err }, `Error ensuring PR`);\n  }\n  if (!branchExists) {\n    return {\n      branchExists: true,\n      updatesVerified,\n      prNo: branchPr?.number,\n      result: 'pr-created',\n      commitSha,\n    };\n  }\n  return {\n    branchExists,\n    updatesVerified,\n    prNo: branchPr?.number,\n    result: 'done',\n    commitSha,\n  };\n}\n"]}