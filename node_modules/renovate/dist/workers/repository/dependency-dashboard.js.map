{"version":3,"file":"dependency-dashboard.js","sourceRoot":"","sources":["../../../lib/workers/repository/dependency-dashboard.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { nameFromLevel } from 'bunyan';\nimport { GlobalConfig } from '../../config/global';\nimport type { RenovateConfig } from '../../config/types';\nimport { getProblems, logger } from '../../logger';\nimport type { PackageFile } from '../../modules/manager/types';\nimport { platform } from '../../modules/platform';\nimport { GitHubMaxPrBodyLen } from '../../modules/platform/github';\nimport { regEx } from '../../util/regex';\nimport * as template from '../../util/template';\nimport type { BranchConfig, SelectAllConfig } from '../types';\nimport { getDepWarningsDashboard } from './errors-warnings';\nimport { PackageFiles } from './package-files';\nimport type { Vulnerability } from './process/types';\nimport { Vulnerabilities } from './process/vulnerabilities';\n\ninterface DependencyDashboard {\n  dependencyDashboardChecks: Record<string, string>;\n  dependencyDashboardRebaseAllOpen: boolean;\n  dependencyDashboardAllPending: boolean;\n  dependencyDashboardAllRateLimited: boolean;\n}\n\nconst rateLimitedRe = regEx(\n  ' - \\\\[ \\\\] <!-- unlimit-branch=([^\\\\s]+) -->',\n  'g'\n);\nconst pendingApprovalRe = regEx(\n  ' - \\\\[ \\\\] <!-- approve-branch=([^\\\\s]+) -->',\n  'g'\n);\nconst generalBranchRe = regEx(' <!-- ([a-zA-Z]+)-branch=([^\\\\s]+) -->');\nconst markedBranchesRe = regEx(\n  ' - \\\\[x\\\\] <!-- ([a-zA-Z]+)-branch=([^\\\\s]+) -->',\n  'g'\n);\n\nfunction checkOpenAllRateLimitedPR(issueBody: string): boolean {\n  return issueBody.includes(' - [x] <!-- create-all-rate-limited-prs -->');\n}\n\nfunction checkApproveAllPendingPR(issueBody: string): boolean {\n  return issueBody.includes(' - [x] <!-- approve-all-pending-prs -->');\n}\n\nfunction checkRebaseAll(issueBody: string): boolean {\n  return issueBody.includes(' - [x] <!-- rebase-all-open-prs -->');\n}\n\nfunction selectAllRelevantBranches(issueBody: string): string[] {\n  const checkedBranches = [];\n  if (checkOpenAllRateLimitedPR(issueBody)) {\n    for (const match of issueBody.matchAll(rateLimitedRe)) {\n      checkedBranches.push(match[0]);\n    }\n  }\n  if (checkApproveAllPendingPR(issueBody)) {\n    for (const match of issueBody.matchAll(pendingApprovalRe)) {\n      checkedBranches.push(match[0]);\n    }\n  }\n  return checkedBranches;\n}\n\nfunction getAllSelectedBranches(\n  issueBody: string,\n  dependencyDashboardChecks: Record<string, string>\n): Record<string, string> {\n  const allRelevantBranches = selectAllRelevantBranches(issueBody);\n  for (const branch of allRelevantBranches) {\n    const [, type, branchName] = generalBranchRe.exec(branch)!;\n    dependencyDashboardChecks[branchName] = type;\n  }\n  return dependencyDashboardChecks;\n}\n\nfunction getCheckedBranches(issueBody: string): Record<string, string> {\n  let dependencyDashboardChecks: Record<string, string> = {};\n  for (const [, type, branchName] of issueBody?.matchAll(markedBranchesRe) ??\n    []) {\n    dependencyDashboardChecks[branchName] = type;\n  }\n  dependencyDashboardChecks = getAllSelectedBranches(\n    issueBody,\n    dependencyDashboardChecks\n  );\n  return dependencyDashboardChecks;\n}\n\nfunction parseDashboardIssue(issueBody: string): DependencyDashboard {\n  const dependencyDashboardChecks = getCheckedBranches(issueBody);\n  const dependencyDashboardRebaseAllOpen = checkRebaseAll(issueBody);\n  const dependencyDashboardAllPending = checkApproveAllPendingPR(issueBody);\n  const dependencyDashboardAllRateLimited =\n    checkOpenAllRateLimitedPR(issueBody);\n  return {\n    dependencyDashboardChecks,\n    dependencyDashboardRebaseAllOpen,\n    dependencyDashboardAllPending,\n    dependencyDashboardAllRateLimited,\n  };\n}\n\nexport async function readDashboardBody(\n  config: SelectAllConfig\n): Promise<void> {\n  config.dependencyDashboardChecks = {};\n  const stringifiedConfig = JSON.stringify(config);\n  if (\n    config.dependencyDashboard ||\n    stringifiedConfig.includes('\"dependencyDashboardApproval\":true') ||\n    stringifiedConfig.includes('\"prCreation\":\"approval\"')\n  ) {\n    config.dependencyDashboardTitle =\n      config.dependencyDashboardTitle ?? `Dependency Dashboard`;\n    const issue = await platform.findIssue(config.dependencyDashboardTitle);\n    if (issue) {\n      config.dependencyDashboardIssue = issue.number;\n      const dashboardChecks = parseDashboardIssue(issue.body ?? '');\n\n      if (config.checkedBranches) {\n        const checkedBranchesRec: Record<string, string> = Object.fromEntries(\n          config.checkedBranches.map((branchName) => [\n            branchName,\n            'global-config',\n          ])\n        );\n        dashboardChecks.dependencyDashboardChecks = {\n          ...dashboardChecks.dependencyDashboardChecks,\n          ...checkedBranchesRec,\n        };\n      }\n\n      Object.assign(config, dashboardChecks);\n    }\n  }\n}\n\nfunction getListItem(branch: BranchConfig, type: string): string {\n  let item = ' - [ ] ';\n  item += `<!-- ${type}-branch=${branch.branchName} -->`;\n  if (branch.prNo) {\n    // TODO: types (#7154)\n    item += `[${branch.prTitle!}](../pull/${branch.prNo})`;\n  } else {\n    item += branch.prTitle;\n  }\n  const uniquePackages = [\n    // TODO: types (#7154)\n    ...new Set(branch.upgrades.map((upgrade) => `\\`${upgrade.depName!}\\``)),\n  ];\n  if (uniquePackages.length < 2) {\n    return item + '\\n';\n  }\n  return item + ' (' + uniquePackages.join(', ') + ')\\n';\n}\n\nfunction appendRepoProblems(config: RenovateConfig, issueBody: string): string {\n  let newIssueBody = issueBody;\n  const repoProblems = new Set(\n    getProblems()\n      .filter(\n        (problem) =>\n          problem.repository === config.repository && !problem.artifactErrors\n      )\n      .map(\n        (problem) =>\n          `${nameFromLevel[problem.level].toUpperCase()}: ${problem.msg}`\n      )\n  );\n  if (repoProblems.size) {\n    logger.debug(\n      { repoProblems: Array.from(repoProblems) },\n      'repository problems'\n    );\n    newIssueBody += '## Repository problems\\n\\n';\n    newIssueBody +=\n      'These problems occurred while renovating this repository.\\n\\n';\n    for (const repoProblem of repoProblems) {\n      newIssueBody += ` - ${repoProblem}\\n`;\n    }\n    newIssueBody += '\\n';\n  }\n  return newIssueBody;\n}\n\nexport async function ensureDependencyDashboard(\n  config: SelectAllConfig,\n  allBranches: BranchConfig[],\n  packageFiles: Record<string, PackageFile[]> = {}\n): Promise<void> {\n  logger.debug('ensureDependencyDashboard()');\n  // legacy/migrated issue\n  const reuseTitle = 'Update Dependencies (Renovate Bot)';\n  const branches = allBranches.filter(\n    (branch) =>\n      branch.result !== 'automerged' &&\n      !branch.upgrades?.every((upgrade) => upgrade.remediationNotPossible)\n  );\n  if (\n    !(\n      config.dependencyDashboard ||\n      config.dependencyDashboardApproval ||\n      config.packageRules?.some((rule) => rule.dependencyDashboardApproval) ||\n      branches.some(\n        (branch) =>\n          !!branch.dependencyDashboardApproval ||\n          !!branch.dependencyDashboardPrApproval\n      )\n    )\n  ) {\n    if (GlobalConfig.get('dryRun')) {\n      logger.info(\n        { title: config.dependencyDashboardTitle },\n        'DRY-RUN: Would close Dependency Dashboard'\n      );\n    } else {\n      logger.debug('Closing Dependency Dashboard');\n      await platform.ensureIssueClosing(config.dependencyDashboardTitle!);\n    }\n    return;\n  }\n  // istanbul ignore if\n  if (config.repoIsOnboarded === false) {\n    logger.debug('Repo is onboarding - skipping dependency dashboard');\n    return;\n  }\n  logger.debug('Ensuring Dependency Dashboard');\n  const hasBranches = is.nonEmptyArray(branches);\n  if (config.dependencyDashboardAutoclose && !hasBranches) {\n    if (GlobalConfig.get('dryRun')) {\n      logger.info(\n        { title: config.dependencyDashboardTitle },\n        'DRY-RUN: Would close Dependency Dashboard'\n      );\n    } else {\n      logger.debug('Closing Dependency Dashboard');\n      await platform.ensureIssueClosing(config.dependencyDashboardTitle!);\n    }\n    return;\n  }\n  let issueBody = '';\n  if (config.dependencyDashboardHeader?.length) {\n    issueBody +=\n      template.compile(config.dependencyDashboardHeader, config) + '\\n\\n';\n  }\n\n  issueBody = appendRepoProblems(config, issueBody);\n\n  const pendingApprovals = branches.filter(\n    (branch) => branch.result === 'needs-approval'\n  );\n  if (pendingApprovals.length) {\n    issueBody += '## Pending Approval\\n\\n';\n    issueBody += `These branches will be created by Renovate only once you click their checkbox below.\\n\\n`;\n    for (const branch of pendingApprovals) {\n      issueBody += getListItem(branch, 'approve');\n    }\n    if (pendingApprovals.length > 1) {\n      issueBody += ' - [ ] ';\n      issueBody += '<!-- approve-all-pending-prs -->';\n      issueBody += '🔐 **Create all pending approval PRs at once** 🔐\\n';\n    }\n    issueBody += '\\n';\n  }\n  const awaitingSchedule = branches.filter(\n    (branch) => branch.result === 'not-scheduled'\n  );\n  if (awaitingSchedule.length) {\n    issueBody += '## Awaiting Schedule\\n\\n';\n    issueBody +=\n      'These updates are awaiting their schedule. Click on a checkbox to get an update now.\\n\\n';\n    for (const branch of awaitingSchedule) {\n      issueBody += getListItem(branch, 'unschedule');\n    }\n    issueBody += '\\n';\n  }\n  const rateLimited = branches.filter(\n    (branch) =>\n      branch.result === 'branch-limit-reached' ||\n      branch.result === 'pr-limit-reached' ||\n      branch.result === 'commit-limit-reached'\n  );\n  if (rateLimited.length) {\n    issueBody += '## Rate-Limited\\n\\n';\n    issueBody +=\n      'These updates are currently rate-limited. Click on a checkbox below to force their creation now.\\n\\n';\n    for (const branch of rateLimited) {\n      issueBody += getListItem(branch, 'unlimit');\n    }\n    if (rateLimited.length > 1) {\n      issueBody += ' - [ ] ';\n      issueBody += '<!-- create-all-rate-limited-prs -->';\n      issueBody += '🔐 **Create all rate-limited PRs at once** 🔐\\n';\n    }\n    issueBody += '\\n';\n  }\n  const errorList = branches.filter((branch) => branch.result === 'error');\n  if (errorList.length) {\n    issueBody += '## Errored\\n\\n';\n    issueBody +=\n      'These updates encountered an error and will be retried. Click on a checkbox below to force a retry now.\\n\\n';\n    for (const branch of errorList) {\n      issueBody += getListItem(branch, 'retry');\n    }\n    issueBody += '\\n';\n  }\n  const awaitingPr = branches.filter(\n    (branch) => branch.result === 'needs-pr-approval'\n  );\n  if (awaitingPr.length) {\n    issueBody += '## PR Creation Approval Required\\n\\n';\n    issueBody +=\n      \"These branches exist but PRs won't be created until you approve them by clicking on a checkbox.\\n\\n\";\n    for (const branch of awaitingPr) {\n      issueBody += getListItem(branch, 'approvePr');\n    }\n    issueBody += '\\n';\n  }\n  const prEdited = branches.filter((branch) => branch.result === 'pr-edited');\n  if (prEdited.length) {\n    issueBody += '## Edited/Blocked\\n\\n';\n    issueBody += `These updates have been manually edited so Renovate will no longer make changes. To discard all commits and start over, click on a checkbox.\\n\\n`;\n    for (const branch of prEdited) {\n      issueBody += getListItem(branch, 'rebase');\n    }\n    issueBody += '\\n';\n  }\n  const prPending = branches.filter((branch) => branch.result === 'pending');\n  if (prPending.length) {\n    issueBody += '## Pending Status Checks\\n\\n';\n    issueBody += `These updates await pending status checks. To force their creation now, click the checkbox below.\\n\\n`;\n    for (const branch of prPending) {\n      issueBody += getListItem(branch, 'approvePr');\n    }\n    issueBody += '\\n';\n  }\n  const prPendingBranchAutomerge = branches.filter(\n    (branch) => branch.prBlockedBy === 'BranchAutomerge'\n  );\n  if (prPendingBranchAutomerge.length) {\n    issueBody += '## Pending Branch Automerge\\n\\n';\n    issueBody += `These updates await pending status checks before automerging. Click on a checkbox to abort the branch automerge, and create a PR instead.\\n\\n`;\n    for (const branch of prPendingBranchAutomerge) {\n      issueBody += getListItem(branch, 'approvePr');\n    }\n    issueBody += '\\n';\n  }\n\n  const warn = getDepWarningsDashboard(packageFiles, config);\n  if (warn) {\n    issueBody += warn;\n    issueBody += '\\n';\n  }\n\n  const otherRes = [\n    'pending',\n    'needs-approval',\n    'needs-pr-approval',\n    'not-scheduled',\n    'pr-limit-reached',\n    'commit-limit-reached',\n    'branch-limit-reached',\n    'already-existed',\n    'error',\n    'automerged',\n    'pr-edited',\n  ];\n  let inProgress = branches.filter(\n    (branch) =>\n      !otherRes.includes(branch.result!) &&\n      branch.prBlockedBy !== 'BranchAutomerge'\n  );\n  const otherBranches = inProgress.filter(\n    (branch) => !!branch.prBlockedBy || !branch.prNo\n  );\n  // istanbul ignore if\n  if (otherBranches.length) {\n    issueBody += '## Other Branches\\n\\n';\n    issueBody += `These updates are pending. To force PRs open, click the checkbox below.\\n\\n`;\n    for (const branch of otherBranches) {\n      issueBody += getListItem(branch, 'other');\n    }\n    issueBody += '\\n';\n  }\n  inProgress = inProgress.filter(\n    (branch) => branch.prNo && !branch.prBlockedBy\n  );\n  if (inProgress.length) {\n    issueBody += '## Open\\n\\n';\n    issueBody +=\n      'These updates have all been created already. Click a checkbox below to force a retry/rebase of any.\\n\\n';\n    for (const branch of inProgress) {\n      issueBody += getListItem(branch, 'rebase');\n    }\n    if (inProgress.length > 2) {\n      issueBody += ' - [ ] ';\n      issueBody += '<!-- rebase-all-open-prs -->';\n      issueBody += '**Click on this checkbox to rebase all open PRs at once**';\n      issueBody += '\\n';\n    }\n    issueBody += '\\n';\n  }\n  const alreadyExisted = branches.filter(\n    (branch) => branch.result === 'already-existed'\n  );\n  if (alreadyExisted.length) {\n    issueBody += '## Ignored or Blocked\\n\\n';\n    issueBody +=\n      'These are blocked by an existing closed PR and will not be recreated unless you click a checkbox below.\\n\\n';\n    for (const branch of alreadyExisted) {\n      issueBody += getListItem(branch, 'recreate');\n    }\n    issueBody += '\\n';\n  }\n\n  if (!hasBranches) {\n    issueBody +=\n      'This repository currently has no open or pending branches.\\n\\n';\n  }\n\n  // add CVE section\n  issueBody += await getDashboardMarkdownVulnerabilities(config, packageFiles);\n\n  // fit the detected dependencies section\n  const footer = getFooter(config);\n  issueBody += PackageFiles.getDashboardMarkdown(\n    GitHubMaxPrBodyLen - issueBody.length - footer.length\n  );\n\n  issueBody += footer;\n\n  if (config.dependencyDashboardIssue) {\n    const updatedIssue = await platform.getIssue?.(\n      config.dependencyDashboardIssue,\n      false\n    );\n    if (updatedIssue) {\n      const { dependencyDashboardChecks } = parseDashboardIssue(\n        updatedIssue.body ?? ''\n      );\n      for (const branchName of Object.keys(config.dependencyDashboardChecks!)) {\n        delete dependencyDashboardChecks[branchName];\n      }\n      for (const branchName of Object.keys(dependencyDashboardChecks)) {\n        const checkText = `- [ ] <!-- ${dependencyDashboardChecks[branchName]}-branch=${branchName} -->`;\n        issueBody = issueBody.replace(\n          checkText,\n          checkText.replace('[ ]', '[x]')\n        );\n      }\n    }\n  }\n\n  if (GlobalConfig.get('dryRun')) {\n    logger.info(\n      { title: config.dependencyDashboardTitle },\n      'DRY-RUN: Would ensure Dependency Dashboard'\n    );\n  } else {\n    await platform.ensureIssue({\n      title: config.dependencyDashboardTitle!,\n      reuseTitle,\n      body: platform.massageMarkdown(issueBody),\n      labels: config.dependencyDashboardLabels,\n      confidential: config.confidential,\n    });\n  }\n}\n\nfunction getFooter(config: RenovateConfig): string {\n  let footer = '';\n  if (config.dependencyDashboardFooter?.length) {\n    footer +=\n      '---\\n' +\n      template.compile(config.dependencyDashboardFooter, config) +\n      '\\n';\n  }\n\n  return footer;\n}\n\nexport async function getDashboardMarkdownVulnerabilities(\n  config: RenovateConfig,\n  packageFiles: Record<string, PackageFile[]>\n): Promise<string> {\n  let result = '';\n\n  if (\n    is.nullOrUndefined(config.dependencyDashboardOSVVulnerabilitySummary) ||\n    config.dependencyDashboardOSVVulnerabilitySummary === 'none'\n  ) {\n    return result;\n  }\n\n  result += '## Vulnerabilities\\n\\n';\n\n  const vulnerabilityFetcher = await Vulnerabilities.create();\n  const vulnerabilities = await vulnerabilityFetcher.fetchVulnerabilities(\n    config,\n    packageFiles\n  );\n\n  if (vulnerabilities.length === 0) {\n    result +=\n      'Renovate has not found any CVEs on [osv.dev](https://osv.dev).\\n\\n';\n    return result;\n  }\n\n  const unresolvedVulnerabilities = vulnerabilities.filter((value) =>\n    is.nullOrUndefined(value.fixedVersion)\n  );\n  const resolvedVulnerabilitiesLength =\n    vulnerabilities.length - unresolvedVulnerabilities.length;\n\n  result += `\\`${resolvedVulnerabilitiesLength}\\`/\\`${vulnerabilities.length}\\``;\n  if (is.truthy(config.osvVulnerabilityAlerts)) {\n    result += ' CVEs have Renovate fixes.\\n';\n  } else {\n    result +=\n      ' CVEs have possible Renovate fixes.\\nSee [`osvVulnerabilityAlerts`](https://docs.renovatebot.com/configuration-options/#osvvulnerabilityalerts) to allow Renovate to supply fixes.\\n';\n  }\n\n  let renderedVulnerabilities: Vulnerability[];\n  switch (config.dependencyDashboardOSVVulnerabilitySummary) {\n    // filter vulnerabilities to display based on configuration\n    case 'unresolved':\n      renderedVulnerabilities = unresolvedVulnerabilities;\n      break;\n    default:\n      renderedVulnerabilities = vulnerabilities;\n  }\n\n  const managerRecords: Record<\n    string,\n    Record<string, Record<string, Vulnerability[]>>\n  > = {};\n  for (const vulnerability of renderedVulnerabilities) {\n    const { manager, packageFile } = vulnerability.packageFileConfig;\n    if (is.nullOrUndefined(managerRecords[manager!])) {\n      managerRecords[manager!] = {};\n    }\n    if (is.nullOrUndefined(managerRecords[manager!][packageFile])) {\n      managerRecords[manager!][packageFile] = {};\n    }\n    if (\n      is.nullOrUndefined(\n        managerRecords[manager!][packageFile][vulnerability.packageName]\n      )\n    ) {\n      managerRecords[manager!][packageFile][vulnerability.packageName] = [];\n    }\n    managerRecords[manager!][packageFile][vulnerability.packageName].push(\n      vulnerability\n    );\n  }\n\n  for (const [manager, packageFileRecords] of Object.entries(managerRecords)) {\n    result += `<details><summary>${manager}</summary>\\n<blockquote>\\n\\n`;\n    for (const [packageFile, packageNameRecords] of Object.entries(\n      packageFileRecords\n    )) {\n      result += `<details><summary>${packageFile}</summary>\\n<blockquote>\\n\\n`;\n      for (const [packageName, cves] of Object.entries(packageNameRecords)) {\n        result += `<details><summary>${packageName}</summary>\\n<blockquote>\\n\\n`;\n        for (const vul of cves) {\n          const id = vul.vulnerability.id;\n          const suffix = is.nonEmptyString(vul.fixedVersion)\n            ? ` (fixed in ${vul.fixedVersion})`\n            : '';\n          result += `- [${id}](https://osv.dev/vulnerability/${id})${suffix}\\n`;\n        }\n        result += `</blockquote>\\n</details>\\n\\n`;\n      }\n      result += `</blockquote>\\n</details>\\n\\n`;\n    }\n    result += `</blockquote>\\n</details>\\n\\n`;\n  }\n\n  return result;\n}\n"]}