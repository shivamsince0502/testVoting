{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/workers/repository/process/index.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO #7154\nimport { mergeChildConfig } from '../../../config';\nimport { GlobalConfig } from '../../../config/global';\nimport { resolveConfigPresets } from '../../../config/presets';\nimport type { RenovateConfig } from '../../../config/types';\nimport { CONFIG_VALIDATION } from '../../../constants/error-messages';\nimport { addMeta, logger, removeMeta } from '../../../logger';\nimport type { PackageFile } from '../../../modules/manager/types';\nimport { platform } from '../../../modules/platform';\nimport { scm } from '../../../modules/platform/scm';\nimport { getCache } from '../../../util/cache/repository';\nimport { clone } from '../../../util/clone';\nimport { getBranchList } from '../../../util/git';\nimport { configRegexPredicate } from '../../../util/regex';\nimport { addSplit } from '../../../util/split';\nimport type { BranchConfig } from '../../types';\nimport { readDashboardBody } from '../dependency-dashboard';\nimport { ExtractResult, extract, lookup, update } from './extract-update';\nimport type { WriteUpdateResult } from './write';\n\nasync function getBaseBranchConfig(\n  baseBranch: string,\n  config: RenovateConfig\n): Promise<RenovateConfig> {\n  logger.debug(`baseBranch: ${baseBranch}`);\n\n  let baseBranchConfig: RenovateConfig = clone(config);\n\n  if (\n    config.useBaseBranchConfig === 'merge' &&\n    baseBranch !== config.defaultBranch\n  ) {\n    logger.debug(\n      { baseBranch },\n      `Merging config from base branch because useBaseBranchConfig=merge`\n    );\n\n    // Retrieve config file name autodetected for this repo\n    const cache = getCache();\n    // TODO: types (#7154)\n    const configFileName = cache.configFileName!;\n\n    try {\n      baseBranchConfig = await platform.getJsonFile(\n        configFileName,\n        config.repository,\n        baseBranch\n      );\n      logger.debug({ config: baseBranchConfig }, 'Base branch config raw');\n    } catch (err) {\n      logger.error(\n        { configFileName, baseBranch },\n        `Error fetching config file from base branch - possible config name mismatch between branches?`\n      );\n\n      const error = new Error(CONFIG_VALIDATION);\n      error.validationSource = 'config';\n      error.validationError = 'Error fetching config file';\n      error.validationMessage = `Error fetching config file ${configFileName} from branch ${baseBranch}`;\n      throw error;\n    }\n\n    baseBranchConfig = await resolveConfigPresets(baseBranchConfig, config);\n    baseBranchConfig = mergeChildConfig(config, baseBranchConfig);\n\n    // istanbul ignore if\n    if (config.printConfig) {\n      logger.info(\n        { config: baseBranchConfig },\n        'Base branch config after merge'\n      );\n    }\n\n    // baseBranches value should be based off the default branch\n    baseBranchConfig.baseBranches = config.baseBranches;\n  }\n\n  if (config.baseBranches!.length > 1) {\n    baseBranchConfig.branchPrefix += `${baseBranch}-`;\n    baseBranchConfig.hasBaseBranches = true;\n  }\n\n  baseBranchConfig = mergeChildConfig(baseBranchConfig, { baseBranch });\n\n  return baseBranchConfig;\n}\n\nfunction unfoldBaseBranches(\n  defaultBranch: string,\n  baseBranches: string[]\n): string[] {\n  const unfoldedList: string[] = [];\n\n  const allBranches = getBranchList();\n  for (const baseBranch of baseBranches) {\n    const isAllowedPred = configRegexPredicate(baseBranch);\n    if (isAllowedPred) {\n      const matchingBranches = allBranches.filter(isAllowedPred);\n      logger.debug(\n        `baseBranches regex \"${baseBranch}\" matches [${matchingBranches.join()}]`\n      );\n      unfoldedList.push(...matchingBranches);\n    } else if (baseBranch === '$default') {\n      logger.debug(`baseBranches \"$default\" matches \"${defaultBranch}\"`);\n      unfoldedList.push(defaultBranch);\n    } else {\n      unfoldedList.push(baseBranch);\n    }\n  }\n\n  return [...new Set(unfoldedList)];\n}\n\nexport async function extractDependencies(\n  config: RenovateConfig\n): Promise<ExtractResult> {\n  await readDashboardBody(config);\n  let res: ExtractResult = {\n    branches: [],\n    branchList: [],\n    packageFiles: null!,\n  };\n  if (GlobalConfig.get('platform') !== 'local' && config.baseBranches?.length) {\n    config.baseBranches = unfoldBaseBranches(\n      config.defaultBranch!,\n      config.baseBranches\n    );\n    logger.debug({ baseBranches: config.baseBranches }, 'baseBranches');\n    const extracted: Record<string, Record<string, PackageFile[]>> = {};\n    for (const baseBranch of config.baseBranches) {\n      addMeta({ baseBranch });\n      if (await scm.branchExists(baseBranch)) {\n        const baseBranchConfig = await getBaseBranchConfig(baseBranch, config);\n        extracted[baseBranch] = await extract(baseBranchConfig);\n      } else {\n        logger.warn({ baseBranch }, 'Base branch does not exist - skipping');\n      }\n    }\n    addSplit('extract');\n    for (const baseBranch of config.baseBranches) {\n      if (await scm.branchExists(baseBranch)) {\n        addMeta({ baseBranch });\n        const baseBranchConfig = await getBaseBranchConfig(baseBranch, config);\n        const packageFiles = extracted[baseBranch];\n        const baseBranchRes = await lookup(baseBranchConfig, packageFiles);\n        res.branches = res.branches.concat(baseBranchRes?.branches);\n        res.branchList = res.branchList.concat(baseBranchRes?.branchList);\n        res.packageFiles = res.packageFiles || baseBranchRes?.packageFiles; // Use the first branch\n      }\n    }\n    removeMeta(['baseBranch']);\n  } else {\n    logger.debug('No baseBranches');\n    const packageFiles = await extract(config);\n    addSplit('extract');\n    if (GlobalConfig.get('dryRun') === 'extract') {\n      res.packageFiles = packageFiles;\n      logger.info({ packageFiles }, 'Extracted dependencies');\n      return res;\n    }\n    res = await lookup(config, packageFiles);\n  }\n  addSplit('lookup');\n  return res;\n}\n\nexport function updateRepo(\n  config: RenovateConfig,\n  branches: BranchConfig[]\n): Promise<WriteUpdateResult | undefined> {\n  logger.debug('processRepo()');\n\n  return update(config, branches);\n}\n"]}