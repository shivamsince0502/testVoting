{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/process/lookup/utils.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAElC,yDAA+D;AAE/D,sFAAgE;AAChE,4EAAsD;AAGtD,SAAgB,2BAA2B,CACzC,OAAuB,EACvB,MAA0B;IAE1B,MAAM,kBAAkB,GAAG,2BAA2B,CAAC,MAAM,CAAC,CAAC;IAC/D,MAAM,mBAAmB,GAAG,4BAA4B,CAAC,MAAM,CAAC,CAAC;IAEjE,IACE,MAAM,CAAC,WAAW,KAAK,kBAAkB;QACzC,MAAM,CAAC,YAAY,KAAK,mBAAmB,EAC3C;QACA,OAAO,CAAC,IAAI,CAAC;YACX,UAAU,EAAE,aAAa;YACzB,OAAO,EAAE,kBAAkB;YAC3B,QAAQ,EAAE,mBAAoB;SAC/B,CAAC,CAAC;KACJ;AACH,CAAC;AAjBD,kEAiBC;AAED,SAAgB,4BAA4B,CAC1C,MAA0B;IAE1B,OAAO,CACL,YAAE,CAAC,cAAc,CAAC,MAAM,CAAC,eAAe,CAAC;QACzC,YAAE,CAAC,cAAc,CAAC,MAAM,CAAC,uBAAuB,CAAC;QACjD,YAAE,CAAC,cAAc,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAC7C,CAAC;AACJ,CAAC;AARD,oEAQC;AAED,SAAgB,2BAA2B,CACzC,MAA0B;IAE1B,OAAO,CACL,MAAM,CAAC,eAAe;QACtB,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,uBAAwB,EAAE,MAAM,EAAE,IAAI,CAAC,CAChE,CAAC;AACJ,CAAC;AAPD,kEAOC;AAED,SAAgB,4BAA4B,CAC1C,MAA0B;IAE1B,MAAM,UAAU,GAAG,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IACxD,MAAM,aAAa,GAAG,IAAA,0BAAgB,EAAC,MAAM,CAAC,CAAC;IAE/C,IAAI,CAAC,YAAE,CAAC,eAAe,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAE;QAClD,OAAO,UAAU,CAAC,WAAW,CAAC;YAC5B,aAAa;YACb,YAAY,EAAE,MAAM,CAAC,YAAa;YAClC,UAAU,EAAE,MAAM,CAAC,kBAAkB;YACrC,aAAa,EAAE,aAAc;YAC7B,aAAa,EAAE,IAAI;SACpB,CAAC,CAAC;KACJ;IAED,OAAO,MAAM,CAAC,YAAY,CAAC;AAC7B,CAAC;AAjBD,oEAiBC","sourcesContent":["import is from '@sindresorhus/is';\n\nimport { getRangeStrategy } from '../../../../modules/manager';\nimport type { LookupUpdate } from '../../../../modules/manager/types';\nimport * as allVersioning from '../../../../modules/versioning';\nimport * as template from '../../../../util/template';\nimport type { LookupUpdateConfig } from './types';\n\nexport function addReplacementUpdateIfValid(\n  updates: LookupUpdate[],\n  config: LookupUpdateConfig\n): void {\n  const replacementNewName = determineNewReplacementName(config);\n  const replacementNewValue = determineNewReplacementValue(config);\n\n  if (\n    config.packageName !== replacementNewName ||\n    config.currentValue !== replacementNewValue\n  ) {\n    updates.push({\n      updateType: 'replacement',\n      newName: replacementNewName,\n      newValue: replacementNewValue!,\n    });\n  }\n}\n\nexport function isReplacementRulesConfigured(\n  config: LookupUpdateConfig\n): boolean {\n  return (\n    is.nonEmptyString(config.replacementName) ||\n    is.nonEmptyString(config.replacementNameTemplate) ||\n    is.nonEmptyString(config.replacementVersion)\n  );\n}\n\nexport function determineNewReplacementName(\n  config: LookupUpdateConfig\n): string {\n  return (\n    config.replacementName ??\n    template.compile(config.replacementNameTemplate!, config, true)\n  );\n}\n\nexport function determineNewReplacementValue(\n  config: LookupUpdateConfig\n): string | undefined | null {\n  const versioning = allVersioning.get(config.versioning);\n  const rangeStrategy = getRangeStrategy(config);\n\n  if (!is.nullOrUndefined(config.replacementVersion)) {\n    return versioning.getNewValue({\n      // TODO #7154\n      currentValue: config.currentValue!,\n      newVersion: config.replacementVersion,\n      rangeStrategy: rangeStrategy!,\n      isReplacement: true,\n    });\n  }\n\n  return config.currentValue;\n}\n"]}