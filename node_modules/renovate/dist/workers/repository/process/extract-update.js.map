{"version":3,"file":"extract-update.js","sourceRoot":"","sources":["../../../../lib/workers/repository/process/extract-update.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport type { RenovateConfig } from '../../../config/types';\nimport { logger } from '../../../logger';\nimport { hashMap } from '../../../modules/manager';\nimport type { PackageFile } from '../../../modules/manager/types';\nimport { scm } from '../../../modules/platform/scm';\nimport { getCache } from '../../../util/cache/repository';\nimport type { BaseBranchCache } from '../../../util/cache/repository/types';\nimport { checkGithubToken as ensureGithubToken } from '../../../util/check-token';\nimport { fingerprint } from '../../../util/fingerprint';\nimport type { BranchConfig } from '../../types';\nimport { extractAllDependencies } from '../extract';\nimport { generateFingerprintConfig } from '../extract/extract-fingerprint-config';\nimport { branchifyUpgrades } from '../updates/branchify';\nimport { raiseDeprecationWarnings } from './deprecated';\nimport { fetchUpdates } from './fetch';\nimport { sortBranches } from './sort';\nimport { Vulnerabilities } from './vulnerabilities';\nimport { WriteUpdateResult, writeUpdates } from './write';\n\nexport interface ExtractResult {\n  branches: BranchConfig[];\n  branchList: string[];\n  packageFiles: Record<string, PackageFile[]>;\n}\n\nexport interface StatsResult {\n  fileCount: number;\n  depCount: number;\n}\n\nexport interface Stats {\n  managers: Record<string, StatsResult>;\n  total: StatsResult;\n}\n\n// istanbul ignore next\nfunction extractStats(\n  packageFiles: Record<string, PackageFile[]>\n): Stats | null {\n  if (!packageFiles) {\n    return null;\n  }\n  const stats: Stats = {\n    managers: {},\n    total: {\n      fileCount: 0,\n      depCount: 0,\n    },\n  };\n  for (const [manager, managerPackageFiles] of Object.entries(packageFiles)) {\n    const fileCount = managerPackageFiles.length;\n    let depCount = 0;\n    for (const file of managerPackageFiles) {\n      depCount += file.deps.length;\n    }\n    stats.managers[manager] = {\n      fileCount,\n      depCount,\n    };\n    stats.total.fileCount += fileCount;\n    stats.total.depCount += depCount;\n  }\n  return stats;\n}\n\nexport function isCacheExtractValid(\n  baseBranchSha: string,\n  configHash: string,\n  cachedExtract?: BaseBranchCache\n): boolean {\n  if (!(cachedExtract?.sha && cachedExtract.configHash)) {\n    return false;\n  }\n  if (cachedExtract.sha !== baseBranchSha) {\n    logger.debug(\n      `Cached extract result cannot be used due to base branch SHA change (old=${cachedExtract.sha}, new=${baseBranchSha})`\n    );\n    return false;\n  }\n  if (cachedExtract.configHash !== configHash) {\n    logger.debug('Cached extract result cannot be used due to config change');\n    return false;\n  }\n  if (!cachedExtract.extractionFingerprints) {\n    logger.debug(\n      'Cached extract is missing extractionFingerprints, so cannot be used'\n    );\n    return false;\n  }\n  const changedManagers = new Set();\n  for (const [manager, fingerprint] of Object.entries(\n    cachedExtract.extractionFingerprints\n  )) {\n    if (fingerprint !== hashMap.get(manager)) {\n      changedManagers.add(manager);\n    }\n  }\n  if (changedManagers.size > 0) {\n    logger.debug(\n      { changedManagers: [...changedManagers] },\n      'Manager fingerprint(s) have changed, extract cache cannot be reused'\n    );\n    return false;\n  }\n  logger.debug(\n    `Cached extract for sha=${baseBranchSha} is valid and can be used`\n  );\n  return true;\n}\n\nexport async function extract(\n  config: RenovateConfig\n): Promise<Record<string, PackageFile[]>> {\n  logger.debug('extract()');\n  const { baseBranch } = config;\n  const baseBranchSha = await scm.getBranchCommit(baseBranch!);\n  let packageFiles: Record<string, PackageFile[]>;\n  const cache = getCache();\n  cache.scan ||= {};\n  const cachedExtract = cache.scan[baseBranch!];\n  const configHash = fingerprint(generateFingerprintConfig(config));\n  // istanbul ignore if\n  if (isCacheExtractValid(baseBranchSha!, configHash, cachedExtract)) {\n    packageFiles = cachedExtract.packageFiles;\n    try {\n      for (const files of Object.values(packageFiles)) {\n        for (const file of files) {\n          for (const dep of file.deps) {\n            delete dep.updates;\n          }\n        }\n      }\n      logger.debug('Deleted cached dep updates');\n    } catch (err) {\n      logger.info({ err }, 'Error deleting cached dep updates');\n    }\n  } else {\n    await scm.checkoutBranch(baseBranch!);\n    const extractResult = (await extractAllDependencies(config)) || {};\n    packageFiles = extractResult.packageFiles;\n    const { extractionFingerprints } = extractResult;\n    // TODO: fix types (#7154)\n    cache.scan[baseBranch!] = {\n      sha: baseBranchSha!,\n      configHash,\n      extractionFingerprints,\n      packageFiles,\n    };\n    // Clean up cached branch extracts\n    const baseBranches = is.nonEmptyArray(config.baseBranches)\n      ? config.baseBranches\n      : [baseBranch];\n    Object.keys(cache.scan).forEach((branchName) => {\n      if (!baseBranches.includes(branchName)) {\n        delete cache.scan![branchName];\n      }\n    });\n  }\n  const stats = extractStats(packageFiles);\n  logger.info(\n    { baseBranch: config.baseBranch, stats },\n    `Dependency extraction complete`\n  );\n  logger.trace({ config: packageFiles }, 'packageFiles');\n  ensureGithubToken(packageFiles);\n  return packageFiles;\n}\n\nasync function fetchVulnerabilities(\n  config: RenovateConfig,\n  packageFiles: Record<string, PackageFile[]>\n): Promise<void> {\n  if (config.osvVulnerabilityAlerts) {\n    logger.debug('fetchVulnerabilities() - osvVulnerabilityAlerts=true');\n    try {\n      const vulnerabilities = await Vulnerabilities.create();\n      await vulnerabilities.appendVulnerabilityPackageRules(\n        config,\n        packageFiles\n      );\n    } catch (err) {\n      logger.warn({ err }, 'Unable to read vulnerability information');\n    }\n  }\n}\n\nexport async function lookup(\n  config: RenovateConfig,\n  packageFiles: Record<string, PackageFile[]>\n): Promise<ExtractResult> {\n  await fetchVulnerabilities(config, packageFiles);\n  await fetchUpdates(config, packageFiles);\n  await raiseDeprecationWarnings(config, packageFiles);\n  const { branches, branchList } = await branchifyUpgrades(\n    config,\n    packageFiles\n  );\n  logger.debug(\n    { baseBranch: config.baseBranch, config: packageFiles },\n    'packageFiles with updates'\n  );\n  sortBranches(branches);\n  return { branches, branchList, packageFiles };\n}\n\nexport async function update(\n  config: RenovateConfig,\n  branches: BranchConfig[]\n): Promise<WriteUpdateResult | undefined> {\n  let res: WriteUpdateResult | undefined;\n  // istanbul ignore else\n  if (config.repoIsOnboarded) {\n    res = await writeUpdates(config, branches);\n  }\n\n  return res;\n}\n"]}