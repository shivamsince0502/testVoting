{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/config-migration/branch/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { GlobalConfig } from '../../../../config/global';\nimport type { RenovateConfig } from '../../../../config/types';\nimport { logger } from '../../../../logger';\nimport { FindPRConfig, Pr, platform } from '../../../../modules/platform';\nimport { ensureComment } from '../../../../modules/platform/comment';\nimport { scm } from '../../../../modules/platform/scm';\nimport { getMigrationBranchName } from '../common';\nimport { ConfigMigrationCommitMessageFactory } from './commit-message';\nimport { createConfigMigrationBranch } from './create';\nimport type { MigratedData } from './migrated-data';\nimport { rebaseMigrationBranch } from './rebase';\n\nexport async function checkConfigMigrationBranch(\n  config: RenovateConfig,\n  migratedConfigData: MigratedData | null\n): Promise<string | null> {\n  logger.debug('checkConfigMigrationBranch()');\n  if (!migratedConfigData) {\n    logger.debug('checkConfigMigrationBranch() Config does not need migration');\n    return null;\n  }\n  const configMigrationBranch = getMigrationBranchName(config);\n\n  const branchPr = await migrationPrExists(configMigrationBranch); // handles open/autoClosed PRs\n\n  if (!branchPr) {\n    const commitMessageFactory = new ConfigMigrationCommitMessageFactory(\n      config,\n      migratedConfigData.filename\n    );\n    const prTitle = commitMessageFactory.getPrTitle();\n    const closedPrConfig: FindPRConfig = {\n      branchName: configMigrationBranch,\n      prTitle,\n      state: 'closed',\n    };\n\n    // handles closed PR\n    const closedPr = await platform.findPr(closedPrConfig);\n\n    // found closed migration PR\n    if (closedPr) {\n      logger.debug(\n        { prTitle: closedPr.title },\n        'Closed PR already exists. Skipping branch.'\n      );\n      await handlePr(config, closedPr);\n      return null;\n    }\n  }\n\n  if (branchPr) {\n    logger.debug('Config Migration PR already exists');\n    await rebaseMigrationBranch(config, migratedConfigData);\n    if (platform.refreshPr) {\n      const configMigrationPr = await platform.getBranchPr(\n        configMigrationBranch\n      );\n      if (configMigrationPr) {\n        await platform.refreshPr(configMigrationPr.number);\n      }\n    }\n  } else {\n    logger.debug('Config Migration PR does not exist');\n    logger.debug('Need to create migration PR');\n    await createConfigMigrationBranch(config, migratedConfigData);\n  }\n  if (!GlobalConfig.get('dryRun')) {\n    await scm.checkoutBranch(configMigrationBranch);\n  }\n  return configMigrationBranch;\n}\n\nexport async function migrationPrExists(branchName: string): Promise<boolean> {\n  return !!(await platform.getBranchPr(branchName));\n}\n\nasync function handlePr(config: RenovateConfig, pr: Pr): Promise<void> {\n  if (\n    pr.state === 'closed' &&\n    !config.suppressNotifications!.includes('prIgnoreNotification')\n  ) {\n    if (GlobalConfig.get('dryRun')) {\n      logger.info(\n        `DRY-RUN: Would ensure closed PR comment in PR #${pr.number}`\n      );\n    } else {\n      const content =\n        '\\n\\nIf you accidentally closed this PR, or if you changed your mind: rename this PR to get a fresh replacement PR.';\n      await ensureComment({\n        number: pr.number,\n        topic: 'Renovate Ignore Notification',\n        content,\n      });\n    }\n    if (await scm.branchExists(pr.sourceBranch)) {\n      if (GlobalConfig.get('dryRun')) {\n        logger.info('DRY-RUN: Would delete branch ' + pr.sourceBranch);\n      } else {\n        await scm.deleteBranch(pr.sourceBranch);\n      }\n    }\n  }\n}\n"]}