{"version":3,"file":"migrated-data.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/config-migration/branch/migrated-data.ts"],"names":[],"mappings":"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","sourcesContent":["import detectIndent from 'detect-indent';\nimport JSON5 from 'json5';\nimport type { BuiltInParserName } from 'prettier';\nimport upath from 'upath';\nimport { migrateConfig } from '../../../../config/migration';\nimport { prettier } from '../../../../expose.cjs';\nimport { logger } from '../../../../logger';\nimport { scm } from '../../../../modules/platform/scm';\nimport { readLocalFile } from '../../../../util/fs';\nimport { detectRepoFileConfig } from '../../init/merge';\n\nexport interface MigratedData {\n  content: string;\n  filename: string;\n  indent: Indent;\n}\n\ninterface Indent {\n  amount: number;\n  indent: string;\n  type?: string;\n}\n\nconst prettierConfigFilenames = new Set([\n  '.prettierrc',\n  '.prettierrc.json',\n  '.prettierrc.yml',\n  '.prettierrc.yaml',\n  '.prettierrc.json5',\n  '.prettierrc.js',\n  '.prettierrc.cjs',\n  'prettier.config.js',\n  'prettier.config.cjs',\n  '.prettierrc.toml',\n]);\n\nexport type PrettierParser = BuiltInParserName;\n\nexport async function applyPrettierFormatting(\n  content: string,\n  parser: PrettierParser,\n  indent?: Indent\n): Promise<string> {\n  try {\n    logger.trace('applyPrettierFormatting - START');\n    const fileList = await scm.getFileList();\n    let prettierExists = fileList.some((file) =>\n      prettierConfigFilenames.has(file)\n    );\n\n    if (!prettierExists) {\n      try {\n        const packageJsonContent = await readLocalFile('package.json', 'utf8');\n        prettierExists =\n          packageJsonContent && JSON.parse(packageJsonContent).prettier;\n      } catch {\n        logger.warn(\n          'applyPrettierFormatting - Error processing package.json file'\n        );\n      }\n    }\n\n    if (!prettierExists) {\n      return content;\n    }\n    const options = {\n      parser,\n      tabWidth: indent?.amount === 0 ? 2 : indent?.amount,\n      useTabs: indent?.type === 'tab',\n    };\n\n    return prettier().format(content, options);\n  } finally {\n    logger.trace('applyPrettierFormatting - END');\n  }\n}\n\nexport class MigratedDataFactory {\n  // singleton\n  private static data: MigratedData | null;\n\n  static async getAsync(): Promise<MigratedData | null> {\n    if (this.data) {\n      return this.data;\n    }\n    const migrated = await this.build();\n\n    if (!migrated) {\n      return null;\n    }\n\n    this.data = migrated;\n    return this.data;\n  }\n\n  static reset(): void {\n    this.data = null;\n  }\n\n  static applyPrettierFormatting({\n    content,\n    filename,\n    indent,\n  }: MigratedData): Promise<string> {\n    const parser = upath.extname(filename).replace('.', '') as PrettierParser;\n    return applyPrettierFormatting(content, parser, indent);\n  }\n\n  private static async build(): Promise<MigratedData | null> {\n    let res: MigratedData | null = null;\n    try {\n      const {\n        configFileName,\n        configFileRaw: raw,\n        configFileParsed = {},\n      } = await detectRepoFileConfig();\n\n      // get migrated config\n      const { isMigrated, migratedConfig } = migrateConfig(configFileParsed);\n      if (!isMigrated) {\n        return null;\n      }\n\n      delete migratedConfig.errors;\n      delete migratedConfig.warnings;\n\n      // indent defaults to 2 spaces\n      // TODO #7154\n      const indent = detectIndent(raw!);\n      const indentSpace = indent.indent ?? '  ';\n      const filename = configFileName!;\n      let content: string;\n\n      if (filename.endsWith('.json5')) {\n        content = JSON5.stringify(migratedConfig, undefined, indentSpace);\n      } else {\n        content = JSON.stringify(migratedConfig, undefined, indentSpace);\n      }\n\n      if (!content.endsWith('\\n')) {\n        content += '\\n';\n      }\n\n      res = { content, filename, indent };\n    } catch (err) {\n      logger.debug(\n        { err },\n        'MigratedDataFactory.getAsync() Error initializing renovate MigratedData'\n      );\n    }\n    return res;\n  }\n}\n"]}