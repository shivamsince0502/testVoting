{"version":3,"file":"extract-fingerprint-config.js","sourceRoot":"","sources":["../../../../lib/workers/repository/extract/extract-fingerprint-config.ts"],"names":[],"mappings":";;;AAAA,4CAAqE;AAKrE,sDAA0D;AAC1D,gEAAwE;AASxE,SAAS,qBAAqB,CAC5B,MAA2B;IAE3B,MAAM,WAAW,GAAG,EAAyB,CAAC;IAC9C,KAAK,MAAM,KAAK,IAAI,wBAAgB,CAAC,GAAG,CACtC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,UAAyC,CACrD,EAAE;QACD,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;YACjB,WAAW,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;SACpC;KACF;IAED,OAAO;QACL,yBAAyB,EAAE,MAAM,CAAC,yBAAyB;QAC3D,YAAY,EAAE,MAAM,CAAC,YAAY;QACjC,oBAAoB,EAAE,MAAM,CAAC,oBAAoB;QACjD,GAAG,WAAW;KACf,CAAC;AACJ,CAAC;AAED,SAAS,wBAAwB,CAC/B,MAA2B;IAE3B,OAAO;QACL,GAAG,CAAC,MAAM,CAAC,OAAO,KAAK,OAAO,IAAI,qBAAqB,CAAC,MAAM,CAAC,CAAC;QAChE,OAAO,EAAE,MAAM,CAAC,OAAO;QACvB,SAAS,EAAE,MAAM,CAAC,SAAS;QAC3B,KAAK,EAAE,MAAM,CAAC,KAAK;QACnB,UAAU,EAAE,MAAM,CAAC,UAAU;QAC7B,OAAO,EAAE,MAAM,CAAC,OAAO;QACvB,WAAW,EAAE,MAAM,CAAC,WAAW,IAAI,EAAE;QACrC,YAAY,EAAE,MAAM,CAAC,YAAY,IAAI,EAAE;QACvC,YAAY,EAAE,MAAM,CAAC,YAAY;QACjC,eAAe,EAAE,MAAM,CAAC,eAAe;QACvC,QAAQ,EAAE,EAAE;KACb,CAAC;AACJ,CAAC;AAED,SAAgB,yBAAyB,CACvC,MAAsB;IAEtB,MAAM,qBAAqB,GAA0B,EAAE,CAAC;IACxD,IAAI,WAAwB,CAAC;IAC7B,MAAM,EAAE,eAAe,EAAE,GAAG,MAAM,CAAC;IACnC,IAAI,eAAe,EAAE,MAAM,EAAE;QAC3B,WAAW,GAAG,IAAI,GAAG,CAAC,eAAe,CAAC,CAAC;KACxC;SAAM;QACL,WAAW,GAAG,IAAI,GAAG,CAAC,IAAA,wBAAc,GAAE,CAAC,CAAC;KACzC;IAED,KAAK,MAAM,OAAO,IAAI,WAAW,EAAE;QACjC,MAAM,aAAa,GAAG,IAAA,yBAAgB,EAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACxD,IAAI,OAAO,KAAK,OAAO,EAAE;YACvB,KAAK,MAAM,YAAY,IAAI,MAAM,CAAC,aAAa,IAAI,EAAE,EAAE;gBACrD,qBAAqB,CAAC,IAAI,CAAC;oBACzB,GAAG,IAAA,yBAAgB,EAAC,aAAa,EAAE,YAAY,CAAC;oBAChD,QAAQ,EAAE,EAAE;iBACb,CAAC,CAAC;aACJ;SACF;aAAM;YACL,qBAAqB,CAAC,IAAI,CAAC,EAAE,GAAG,aAAa,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;SAChE;KACF;IAED,OAAO;QACL,WAAW;QACX,QAAQ,EAAE,qBAAqB,CAAC,GAAG,CAAC,wBAAwB,CAAC;KAC9D,CAAC;AACJ,CAAC;AA9BD,8DA8BC","sourcesContent":["import { getManagerConfig, mergeChildConfig } from '../../../config';\nimport type {\n  RegexManagerTemplates,\n  RenovateConfig,\n} from '../../../config/types';\nimport { getManagerList } from '../../../modules/manager';\nimport { validMatchFields } from '../../../modules/manager/regex/utils';\nimport type { CustomExtractConfig } from '../../../modules/manager/types';\nimport type { WorkerExtractConfig } from '../../types';\n\nexport interface FingerprintExtractConfig {\n  managerList: Set<string>;\n  managers: WorkerExtractConfig[];\n}\n\nfunction getRegexManagerFields(\n  config: WorkerExtractConfig\n): CustomExtractConfig {\n  const regexFields = {} as CustomExtractConfig;\n  for (const field of validMatchFields.map(\n    (f) => `${f}Template` as keyof RegexManagerTemplates\n  )) {\n    if (config[field]) {\n      regexFields[field] = config[field];\n    }\n  }\n\n  return {\n    autoReplaceStringTemplate: config.autoReplaceStringTemplate,\n    matchStrings: config.matchStrings,\n    matchStringsStrategy: config.matchStringsStrategy,\n    ...regexFields,\n  };\n}\n\nfunction getFilteredManagerConfig(\n  config: WorkerExtractConfig\n): WorkerExtractConfig {\n  return {\n    ...(config.manager === 'regex' && getRegexManagerFields(config)),\n    manager: config.manager,\n    fileMatch: config.fileMatch,\n    npmrc: config.npmrc,\n    npmrcMerge: config.npmrcMerge,\n    enabled: config.enabled,\n    ignorePaths: config.ignorePaths ?? [],\n    includePaths: config.includePaths ?? [],\n    skipInstalls: config.skipInstalls,\n    registryAliases: config.registryAliases,\n    fileList: [],\n  };\n}\n\nexport function generateFingerprintConfig(\n  config: RenovateConfig\n): FingerprintExtractConfig {\n  const managerExtractConfigs: WorkerExtractConfig[] = [];\n  let managerList: Set<string>;\n  const { enabledManagers } = config;\n  if (enabledManagers?.length) {\n    managerList = new Set(enabledManagers);\n  } else {\n    managerList = new Set(getManagerList());\n  }\n\n  for (const manager of managerList) {\n    const managerConfig = getManagerConfig(config, manager);\n    if (manager === 'regex') {\n      for (const regexManager of config.regexManagers ?? []) {\n        managerExtractConfigs.push({\n          ...mergeChildConfig(managerConfig, regexManager),\n          fileList: [],\n        });\n      }\n    } else {\n      managerExtractConfigs.push({ ...managerConfig, fileList: [] });\n    }\n  }\n\n  return {\n    managerList,\n    managers: managerExtractConfigs.map(getFilteredManagerConfig),\n  };\n}\n"]}