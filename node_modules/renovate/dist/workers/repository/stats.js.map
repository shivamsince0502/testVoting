{"version":3,"file":"stats.js","sourceRoot":"","sources":["../../../lib/workers/repository/stats.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'node:url';\nimport { logger } from '../../logger';\nimport { sortNumeric } from '../../util/array';\nimport * as memCache from '../../util/cache/memory';\nimport type { LookupStats } from '../../util/cache/memory/types';\nimport type { RequestStats } from '../../util/http/types';\n\ninterface CacheStats {\n  count: number;\n  avgMs?: number;\n  medianMs?: number;\n  maxMs?: number;\n}\n\nexport function printLookupStats(): void {\n  const lookups = memCache.get<LookupStats[]>('lookup-stats') ?? [];\n  const datasourceDurations: Record<string, number[]> = {};\n  for (const lookup of lookups) {\n    datasourceDurations[lookup.datasource] ??= [];\n    datasourceDurations[lookup.datasource].push(lookup.duration);\n  }\n  const data: Record<string, unknown> = {};\n  for (const [datasource, durations] of Object.entries(datasourceDurations)) {\n    const count = durations.length;\n    const totalMs = durations.reduce((a, c) => a + c, 0);\n    const averageMs = Math.round(totalMs / count);\n    const maximumMs = Math.max(...durations);\n    data[datasource] = { count, averageMs, totalMs, maximumMs };\n  }\n  logger.debug(data, 'Package lookup durations');\n}\n\nexport function printRequestStats(): void {\n  const packageCacheGets = (\n    memCache.get<number[]>('package-cache-gets') ?? []\n  ).sort(sortNumeric);\n  const packageCacheSets = (\n    memCache.get<number[]>('package-cache-sets') ?? []\n  ).sort(sortNumeric);\n  const packageCacheStats: Record<string, CacheStats> = {\n    get: {\n      count: packageCacheGets.length,\n    },\n    set: {\n      count: packageCacheSets.length,\n    },\n  };\n  if (packageCacheGets.length) {\n    packageCacheStats.get.avgMs = Math.round(\n      packageCacheGets.reduce((a, b) => a + b, 0) / packageCacheGets.length\n    );\n    if (packageCacheGets.length > 1) {\n      packageCacheStats.get.medianMs =\n        packageCacheGets[Math.round(packageCacheGets.length / 2) - 1];\n      packageCacheStats.get.maxMs =\n        packageCacheGets[packageCacheGets.length - 1];\n    }\n  }\n  if (packageCacheSets.length) {\n    packageCacheStats.set.avgMs = Math.round(\n      packageCacheSets.reduce((a, b) => a + b, 0) / packageCacheSets.length\n    );\n    if (packageCacheSets.length > 1) {\n      packageCacheStats.set.medianMs =\n        packageCacheSets[Math.round(packageCacheSets.length / 2) - 1];\n      packageCacheStats.set.maxMs =\n        packageCacheSets[packageCacheSets.length - 1];\n    }\n  }\n  logger.debug(packageCacheStats, 'Package cache statistics');\n  const httpRequests = memCache.get<RequestStats[]>('http-requests');\n  // istanbul ignore next\n  if (!httpRequests) {\n    return;\n  }\n  httpRequests.sort((a, b) => {\n    if (a.url === b.url) {\n      return 0;\n    }\n    if (a.url < b.url) {\n      return -1;\n    }\n    return 1;\n  });\n  const allRequests: string[] = [];\n  const requestHosts: Record<string, RequestStats[]> = {};\n  const rawUrls: Record<string, number> = {};\n  for (const httpRequest of httpRequests) {\n    const { method, url, duration, queueDuration, statusCode } = httpRequest;\n    const [baseUrl] = url.split('?');\n    // put method last for better sorting\n    const urlKey = `${baseUrl} (${method.toUpperCase()},${statusCode})`;\n    if (rawUrls[urlKey]) {\n      rawUrls[urlKey] += 1;\n    } else {\n      rawUrls[urlKey] = 1;\n    }\n    allRequests.push(\n      `${method.toUpperCase()} ${url} ${statusCode} ${duration} ${queueDuration}`\n    );\n    const { hostname } = URL.parse(url);\n\n    // istanbul ignore if: TODO: fix types (#9610)\n    if (!hostname) {\n      return;\n    }\n    requestHosts[hostname] = requestHosts[hostname] || [];\n    requestHosts[hostname].push(httpRequest);\n  }\n  const urls: Record<string, number> = {};\n  // Sort urls for easier reading\n  for (const url of Object.keys(rawUrls).sort()) {\n    urls[url] = rawUrls[url];\n  }\n  logger.trace({ allRequests, requestHosts }, 'full stats');\n  type HostStats = {\n    requestCount: number;\n    requestAvgMs: number;\n    queueAvgMs: number;\n  };\n  const hostStats: Record<string, HostStats> = {};\n  let totalRequests = 0;\n  for (const [hostname, requests] of Object.entries(requestHosts)) {\n    const requestCount = requests.length;\n    totalRequests += requestCount;\n    const requestSum = requests\n      .map(({ duration }) => duration)\n      .reduce((a, b) => a + b, 0);\n    const requestAvgMs = Math.round(requestSum / requestCount);\n\n    const queueSum = requests\n      .map(({ queueDuration }) => queueDuration)\n      .reduce((a, b) => a + b, 0);\n    const queueAvgMs = Math.round(queueSum / requestCount);\n    hostStats[hostname] = { requestCount, requestAvgMs, queueAvgMs };\n  }\n  logger.debug({ urls, hostStats, totalRequests }, 'http statistics');\n}\n"]}