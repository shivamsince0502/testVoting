"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlobIdRequiredException = exports.BlobIdDoesNotExistException = exports.BeforeCommitIdAndAfterCommitIdAreSameException = exports.CommitIdsListRequiredException = exports.CommitIdsLimitExceededException = exports.TipsDivergenceExceededException = exports.MergeOptionRequiredException = exports.MaximumItemsToCompareExceededException = exports.MaximumFileContentToLoadExceededException = exports.InvalidMergeOptionException = exports.InvalidMaxMergeHunksException = exports.InvalidMaxConflictFilesException = exports.InvalidContinuationTokenException = exports.InvalidConflictResolutionStrategyException = exports.InvalidConflictDetailLevelException = exports.InvalidCommitException = exports.CommitRequiredException = exports.CommitDoesNotExistException = exports.ObjectTypeEnum = exports.ChangeTypeEnum = exports.FileModeTypeEnum = exports.MergeOptionTypeEnum = exports.ConflictResolutionStrategyTypeEnum = exports.ConflictDetailLevelTypeEnum = exports.RepositoryNamesRequiredException = exports.MaximumRepositoryNamesExceededException = exports.AuthorDoesNotExistException = exports.RepositoryNameRequiredException = exports.RepositoryDoesNotExistException = exports.MaximumRuleTemplatesAssociatedWithRepositoryException = exports.InvalidRepositoryNameException = exports.InvalidApprovalRuleTemplateNameException = exports.EncryptionKeyUnavailableException = exports.EncryptionKeyNotFoundException = exports.EncryptionKeyDisabledException = exports.EncryptionKeyAccessDeniedException = exports.EncryptionIntegrityChecksFailedException = exports.ApprovalStateRequiredException = exports.ApprovalRuleTemplateNameRequiredException = exports.ApprovalRuleTemplateNameAlreadyExistsException = exports.ApprovalRuleTemplateInUseException = exports.ApprovalRuleTemplateDoesNotExistException = exports.ApprovalRuleTemplateContentRequiredException = exports.OverrideStatus = exports.ApprovalRuleNameRequiredException = exports.ApprovalRuleNameAlreadyExistsException = exports.ApprovalRuleDoesNotExistException = exports.ApprovalRuleContentRequiredException = exports.ApprovalState = exports.ActorDoesNotExistException = void 0;
exports.ReferenceDoesNotExistException = exports.MultipleRepositoriesInPullRequestException = exports.MaximumOpenPullRequestsExceededException = exports.InvalidTitleException = exports.InvalidTargetsException = exports.InvalidTargetException = exports.InvalidReferenceNameException = exports.InvalidDescriptionException = exports.InvalidClientRequestTokenException = exports.IdempotencyParameterMismatchException = exports.PullRequestStatusEnum = exports.SourceFileOrContentRequiredException = exports.SamePathRequestException = exports.RestrictedSourceFileException = exports.PutFileEntryConflictException = exports.PathRequiredException = exports.ParentCommitIdRequiredException = exports.ParentCommitIdOutdatedException = exports.ParentCommitDoesNotExistException = exports.NoChangeException = exports.NameLengthExceededException = exports.MaximumFileEntriesExceededException = exports.InvalidPathException = exports.InvalidParentCommitIdException = exports.InvalidFileModeException = exports.InvalidEmailException = exports.InvalidDeletionParameterException = exports.FolderContentSizeLimitExceededException = exports.FilePathConflictsWithSubmodulePathException = exports.FileNameConflictsWithDirectoryNameException = exports.FileModeRequiredException = exports.FileEntryRequiredException = exports.FileDoesNotExistException = exports.FileContentSizeLimitExceededException = exports.FileContentAndSourceFileSpecifiedException = exports.DirectoryNameConflictsWithFileNameException = exports.CommitMessageLengthExceededException = exports.InvalidCommitIdException = exports.InvalidBranchNameException = exports.CommitIdRequiredException = exports.NumberOfRuleTemplatesExceededException = exports.InvalidApprovalRuleTemplateDescriptionException = exports.InvalidApprovalRuleTemplateContentException = exports.ClientRequestTokenRequiredException = exports.CannotModifyApprovalRuleFromTemplateException = exports.CannotDeleteApprovalRuleFromTemplateException = exports.BranchNameRequiredException = exports.BranchNameIsTagNameException = exports.BranchNameExistsException = exports.BranchDoesNotExistException = void 0;
exports.FolderDoesNotExistException = exports.PathDoesNotExistException = exports.CommitIdDoesNotExistException = exports.RepositoryNotAssociatedWithPullRequestException = exports.RelativeFileVersionEnum = exports.InvalidReactionUserArnException = exports.InvalidBlobIdException = exports.FileTooLargeException = exports.RevisionNotCurrentException = exports.RevisionIdRequiredException = exports.InvalidRevisionIdException = exports.InvalidPullRequestEventTypeException = exports.InvalidMaxResultsException = exports.InvalidActorArnException = exports.PullRequestEventType = exports.InvalidCommentIdException = exports.CommentIdRequiredException = exports.CommentDoesNotExistException = exports.CommentDeletedException = exports.DefaultBranchCannotBeDeletedException = exports.ReplacementTypeRequiredException = exports.ReplacementContentRequiredException = exports.MultipleConflictResolutionEntriesException = exports.MaximumConflictResolutionEntriesExceededException = exports.ManualMergeRequiredException = exports.InvalidReplacementTypeException = exports.InvalidReplacementContentException = exports.InvalidConflictResolutionException = exports.ReplacementTypeEnum = exports.ConcurrentReferenceUpdateException = exports.TooManyTagsException = exports.TagPolicyException = exports.RepositoryNameExistsException = exports.RepositoryLimitExceededException = exports.InvalidTagsMapException = exports.InvalidSystemTagUsageException = exports.InvalidRepositoryDescriptionException = exports.PullRequestIdRequiredException = exports.PullRequestDoesNotExistException = exports.PullRequestAlreadyClosedException = exports.NumberOfRulesExceededException = exports.InvalidPullRequestIdException = exports.InvalidApprovalRuleNameException = exports.InvalidApprovalRuleContentException = exports.TitleRequiredException = exports.TargetsRequiredException = exports.TargetRequiredException = exports.SourceAndDestinationAreSameException = exports.ReferenceTypeNotSupportedException = exports.ReferenceNameRequiredException = void 0;
exports.InvalidSortByException = exports.InvalidOrderException = exports.InvalidPullRequestStatusException = exports.InvalidAuthorArnException = exports.RepositoryTriggerEventEnum = exports.InvalidSourceCommitSpecifierException = exports.InvalidDestinationCommitSpecifierException = void 0;
const CodeCommitServiceException_1 = require("./CodeCommitServiceException");
class ActorDoesNotExistException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ActorDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "ActorDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ActorDoesNotExistException.prototype);
    }
}
exports.ActorDoesNotExistException = ActorDoesNotExistException;
exports.ApprovalState = {
    APPROVE: "APPROVE",
    REVOKE: "REVOKE",
};
class ApprovalRuleContentRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ApprovalRuleContentRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "ApprovalRuleContentRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApprovalRuleContentRequiredException.prototype);
    }
}
exports.ApprovalRuleContentRequiredException = ApprovalRuleContentRequiredException;
class ApprovalRuleDoesNotExistException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ApprovalRuleDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "ApprovalRuleDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApprovalRuleDoesNotExistException.prototype);
    }
}
exports.ApprovalRuleDoesNotExistException = ApprovalRuleDoesNotExistException;
class ApprovalRuleNameAlreadyExistsException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ApprovalRuleNameAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ApprovalRuleNameAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApprovalRuleNameAlreadyExistsException.prototype);
    }
}
exports.ApprovalRuleNameAlreadyExistsException = ApprovalRuleNameAlreadyExistsException;
class ApprovalRuleNameRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ApprovalRuleNameRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "ApprovalRuleNameRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApprovalRuleNameRequiredException.prototype);
    }
}
exports.ApprovalRuleNameRequiredException = ApprovalRuleNameRequiredException;
exports.OverrideStatus = {
    OVERRIDE: "OVERRIDE",
    REVOKE: "REVOKE",
};
class ApprovalRuleTemplateContentRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ApprovalRuleTemplateContentRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "ApprovalRuleTemplateContentRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApprovalRuleTemplateContentRequiredException.prototype);
    }
}
exports.ApprovalRuleTemplateContentRequiredException = ApprovalRuleTemplateContentRequiredException;
class ApprovalRuleTemplateDoesNotExistException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ApprovalRuleTemplateDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "ApprovalRuleTemplateDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApprovalRuleTemplateDoesNotExistException.prototype);
    }
}
exports.ApprovalRuleTemplateDoesNotExistException = ApprovalRuleTemplateDoesNotExistException;
class ApprovalRuleTemplateInUseException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ApprovalRuleTemplateInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ApprovalRuleTemplateInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApprovalRuleTemplateInUseException.prototype);
    }
}
exports.ApprovalRuleTemplateInUseException = ApprovalRuleTemplateInUseException;
class ApprovalRuleTemplateNameAlreadyExistsException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ApprovalRuleTemplateNameAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ApprovalRuleTemplateNameAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApprovalRuleTemplateNameAlreadyExistsException.prototype);
    }
}
exports.ApprovalRuleTemplateNameAlreadyExistsException = ApprovalRuleTemplateNameAlreadyExistsException;
class ApprovalRuleTemplateNameRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ApprovalRuleTemplateNameRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "ApprovalRuleTemplateNameRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApprovalRuleTemplateNameRequiredException.prototype);
    }
}
exports.ApprovalRuleTemplateNameRequiredException = ApprovalRuleTemplateNameRequiredException;
class ApprovalStateRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ApprovalStateRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "ApprovalStateRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApprovalStateRequiredException.prototype);
    }
}
exports.ApprovalStateRequiredException = ApprovalStateRequiredException;
class EncryptionIntegrityChecksFailedException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "EncryptionIntegrityChecksFailedException",
            $fault: "server",
            ...opts,
        });
        this.name = "EncryptionIntegrityChecksFailedException";
        this.$fault = "server";
        Object.setPrototypeOf(this, EncryptionIntegrityChecksFailedException.prototype);
    }
}
exports.EncryptionIntegrityChecksFailedException = EncryptionIntegrityChecksFailedException;
class EncryptionKeyAccessDeniedException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "EncryptionKeyAccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "EncryptionKeyAccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EncryptionKeyAccessDeniedException.prototype);
    }
}
exports.EncryptionKeyAccessDeniedException = EncryptionKeyAccessDeniedException;
class EncryptionKeyDisabledException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "EncryptionKeyDisabledException",
            $fault: "client",
            ...opts,
        });
        this.name = "EncryptionKeyDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EncryptionKeyDisabledException.prototype);
    }
}
exports.EncryptionKeyDisabledException = EncryptionKeyDisabledException;
class EncryptionKeyNotFoundException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "EncryptionKeyNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "EncryptionKeyNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EncryptionKeyNotFoundException.prototype);
    }
}
exports.EncryptionKeyNotFoundException = EncryptionKeyNotFoundException;
class EncryptionKeyUnavailableException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "EncryptionKeyUnavailableException",
            $fault: "client",
            ...opts,
        });
        this.name = "EncryptionKeyUnavailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EncryptionKeyUnavailableException.prototype);
    }
}
exports.EncryptionKeyUnavailableException = EncryptionKeyUnavailableException;
class InvalidApprovalRuleTemplateNameException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidApprovalRuleTemplateNameException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidApprovalRuleTemplateNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidApprovalRuleTemplateNameException.prototype);
    }
}
exports.InvalidApprovalRuleTemplateNameException = InvalidApprovalRuleTemplateNameException;
class InvalidRepositoryNameException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidRepositoryNameException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRepositoryNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRepositoryNameException.prototype);
    }
}
exports.InvalidRepositoryNameException = InvalidRepositoryNameException;
class MaximumRuleTemplatesAssociatedWithRepositoryException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "MaximumRuleTemplatesAssociatedWithRepositoryException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaximumRuleTemplatesAssociatedWithRepositoryException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaximumRuleTemplatesAssociatedWithRepositoryException.prototype);
    }
}
exports.MaximumRuleTemplatesAssociatedWithRepositoryException = MaximumRuleTemplatesAssociatedWithRepositoryException;
class RepositoryDoesNotExistException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "RepositoryDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryDoesNotExistException.prototype);
    }
}
exports.RepositoryDoesNotExistException = RepositoryDoesNotExistException;
class RepositoryNameRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "RepositoryNameRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryNameRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryNameRequiredException.prototype);
    }
}
exports.RepositoryNameRequiredException = RepositoryNameRequiredException;
class AuthorDoesNotExistException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "AuthorDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "AuthorDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AuthorDoesNotExistException.prototype);
    }
}
exports.AuthorDoesNotExistException = AuthorDoesNotExistException;
class MaximumRepositoryNamesExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "MaximumRepositoryNamesExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaximumRepositoryNamesExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaximumRepositoryNamesExceededException.prototype);
    }
}
exports.MaximumRepositoryNamesExceededException = MaximumRepositoryNamesExceededException;
class RepositoryNamesRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "RepositoryNamesRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryNamesRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryNamesRequiredException.prototype);
    }
}
exports.RepositoryNamesRequiredException = RepositoryNamesRequiredException;
exports.ConflictDetailLevelTypeEnum = {
    FILE_LEVEL: "FILE_LEVEL",
    LINE_LEVEL: "LINE_LEVEL",
};
exports.ConflictResolutionStrategyTypeEnum = {
    ACCEPT_DESTINATION: "ACCEPT_DESTINATION",
    ACCEPT_SOURCE: "ACCEPT_SOURCE",
    AUTOMERGE: "AUTOMERGE",
    NONE: "NONE",
};
exports.MergeOptionTypeEnum = {
    FAST_FORWARD_MERGE: "FAST_FORWARD_MERGE",
    SQUASH_MERGE: "SQUASH_MERGE",
    THREE_WAY_MERGE: "THREE_WAY_MERGE",
};
exports.FileModeTypeEnum = {
    EXECUTABLE: "EXECUTABLE",
    NORMAL: "NORMAL",
    SYMLINK: "SYMLINK",
};
exports.ChangeTypeEnum = {
    ADDED: "A",
    DELETED: "D",
    MODIFIED: "M",
};
exports.ObjectTypeEnum = {
    DIRECTORY: "DIRECTORY",
    FILE: "FILE",
    GIT_LINK: "GIT_LINK",
    SYMBOLIC_LINK: "SYMBOLIC_LINK",
};
class CommitDoesNotExistException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "CommitDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "CommitDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CommitDoesNotExistException.prototype);
    }
}
exports.CommitDoesNotExistException = CommitDoesNotExistException;
class CommitRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "CommitRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "CommitRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CommitRequiredException.prototype);
    }
}
exports.CommitRequiredException = CommitRequiredException;
class InvalidCommitException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidCommitException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidCommitException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidCommitException.prototype);
    }
}
exports.InvalidCommitException = InvalidCommitException;
class InvalidConflictDetailLevelException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidConflictDetailLevelException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidConflictDetailLevelException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidConflictDetailLevelException.prototype);
    }
}
exports.InvalidConflictDetailLevelException = InvalidConflictDetailLevelException;
class InvalidConflictResolutionStrategyException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidConflictResolutionStrategyException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidConflictResolutionStrategyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidConflictResolutionStrategyException.prototype);
    }
}
exports.InvalidConflictResolutionStrategyException = InvalidConflictResolutionStrategyException;
class InvalidContinuationTokenException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidContinuationTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidContinuationTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidContinuationTokenException.prototype);
    }
}
exports.InvalidContinuationTokenException = InvalidContinuationTokenException;
class InvalidMaxConflictFilesException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidMaxConflictFilesException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidMaxConflictFilesException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidMaxConflictFilesException.prototype);
    }
}
exports.InvalidMaxConflictFilesException = InvalidMaxConflictFilesException;
class InvalidMaxMergeHunksException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidMaxMergeHunksException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidMaxMergeHunksException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidMaxMergeHunksException.prototype);
    }
}
exports.InvalidMaxMergeHunksException = InvalidMaxMergeHunksException;
class InvalidMergeOptionException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidMergeOptionException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidMergeOptionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidMergeOptionException.prototype);
    }
}
exports.InvalidMergeOptionException = InvalidMergeOptionException;
class MaximumFileContentToLoadExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "MaximumFileContentToLoadExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaximumFileContentToLoadExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaximumFileContentToLoadExceededException.prototype);
    }
}
exports.MaximumFileContentToLoadExceededException = MaximumFileContentToLoadExceededException;
class MaximumItemsToCompareExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "MaximumItemsToCompareExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaximumItemsToCompareExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaximumItemsToCompareExceededException.prototype);
    }
}
exports.MaximumItemsToCompareExceededException = MaximumItemsToCompareExceededException;
class MergeOptionRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "MergeOptionRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "MergeOptionRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MergeOptionRequiredException.prototype);
    }
}
exports.MergeOptionRequiredException = MergeOptionRequiredException;
class TipsDivergenceExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "TipsDivergenceExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "TipsDivergenceExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TipsDivergenceExceededException.prototype);
    }
}
exports.TipsDivergenceExceededException = TipsDivergenceExceededException;
class CommitIdsLimitExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "CommitIdsLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "CommitIdsLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CommitIdsLimitExceededException.prototype);
    }
}
exports.CommitIdsLimitExceededException = CommitIdsLimitExceededException;
class CommitIdsListRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "CommitIdsListRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "CommitIdsListRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CommitIdsListRequiredException.prototype);
    }
}
exports.CommitIdsListRequiredException = CommitIdsListRequiredException;
class BeforeCommitIdAndAfterCommitIdAreSameException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "BeforeCommitIdAndAfterCommitIdAreSameException",
            $fault: "client",
            ...opts,
        });
        this.name = "BeforeCommitIdAndAfterCommitIdAreSameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BeforeCommitIdAndAfterCommitIdAreSameException.prototype);
    }
}
exports.BeforeCommitIdAndAfterCommitIdAreSameException = BeforeCommitIdAndAfterCommitIdAreSameException;
class BlobIdDoesNotExistException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "BlobIdDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "BlobIdDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BlobIdDoesNotExistException.prototype);
    }
}
exports.BlobIdDoesNotExistException = BlobIdDoesNotExistException;
class BlobIdRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "BlobIdRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "BlobIdRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BlobIdRequiredException.prototype);
    }
}
exports.BlobIdRequiredException = BlobIdRequiredException;
class BranchDoesNotExistException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "BranchDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "BranchDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BranchDoesNotExistException.prototype);
    }
}
exports.BranchDoesNotExistException = BranchDoesNotExistException;
class BranchNameExistsException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "BranchNameExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "BranchNameExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BranchNameExistsException.prototype);
    }
}
exports.BranchNameExistsException = BranchNameExistsException;
class BranchNameIsTagNameException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "BranchNameIsTagNameException",
            $fault: "client",
            ...opts,
        });
        this.name = "BranchNameIsTagNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BranchNameIsTagNameException.prototype);
    }
}
exports.BranchNameIsTagNameException = BranchNameIsTagNameException;
class BranchNameRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "BranchNameRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "BranchNameRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BranchNameRequiredException.prototype);
    }
}
exports.BranchNameRequiredException = BranchNameRequiredException;
class CannotDeleteApprovalRuleFromTemplateException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "CannotDeleteApprovalRuleFromTemplateException",
            $fault: "client",
            ...opts,
        });
        this.name = "CannotDeleteApprovalRuleFromTemplateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CannotDeleteApprovalRuleFromTemplateException.prototype);
    }
}
exports.CannotDeleteApprovalRuleFromTemplateException = CannotDeleteApprovalRuleFromTemplateException;
class CannotModifyApprovalRuleFromTemplateException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "CannotModifyApprovalRuleFromTemplateException",
            $fault: "client",
            ...opts,
        });
        this.name = "CannotModifyApprovalRuleFromTemplateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CannotModifyApprovalRuleFromTemplateException.prototype);
    }
}
exports.CannotModifyApprovalRuleFromTemplateException = CannotModifyApprovalRuleFromTemplateException;
class ClientRequestTokenRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ClientRequestTokenRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "ClientRequestTokenRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ClientRequestTokenRequiredException.prototype);
    }
}
exports.ClientRequestTokenRequiredException = ClientRequestTokenRequiredException;
class InvalidApprovalRuleTemplateContentException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidApprovalRuleTemplateContentException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidApprovalRuleTemplateContentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidApprovalRuleTemplateContentException.prototype);
    }
}
exports.InvalidApprovalRuleTemplateContentException = InvalidApprovalRuleTemplateContentException;
class InvalidApprovalRuleTemplateDescriptionException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidApprovalRuleTemplateDescriptionException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidApprovalRuleTemplateDescriptionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidApprovalRuleTemplateDescriptionException.prototype);
    }
}
exports.InvalidApprovalRuleTemplateDescriptionException = InvalidApprovalRuleTemplateDescriptionException;
class NumberOfRuleTemplatesExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "NumberOfRuleTemplatesExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "NumberOfRuleTemplatesExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NumberOfRuleTemplatesExceededException.prototype);
    }
}
exports.NumberOfRuleTemplatesExceededException = NumberOfRuleTemplatesExceededException;
class CommitIdRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "CommitIdRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "CommitIdRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CommitIdRequiredException.prototype);
    }
}
exports.CommitIdRequiredException = CommitIdRequiredException;
class InvalidBranchNameException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidBranchNameException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidBranchNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidBranchNameException.prototype);
    }
}
exports.InvalidBranchNameException = InvalidBranchNameException;
class InvalidCommitIdException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidCommitIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidCommitIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidCommitIdException.prototype);
    }
}
exports.InvalidCommitIdException = InvalidCommitIdException;
class CommitMessageLengthExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "CommitMessageLengthExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "CommitMessageLengthExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CommitMessageLengthExceededException.prototype);
    }
}
exports.CommitMessageLengthExceededException = CommitMessageLengthExceededException;
class DirectoryNameConflictsWithFileNameException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "DirectoryNameConflictsWithFileNameException",
            $fault: "client",
            ...opts,
        });
        this.name = "DirectoryNameConflictsWithFileNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DirectoryNameConflictsWithFileNameException.prototype);
    }
}
exports.DirectoryNameConflictsWithFileNameException = DirectoryNameConflictsWithFileNameException;
class FileContentAndSourceFileSpecifiedException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "FileContentAndSourceFileSpecifiedException",
            $fault: "client",
            ...opts,
        });
        this.name = "FileContentAndSourceFileSpecifiedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FileContentAndSourceFileSpecifiedException.prototype);
    }
}
exports.FileContentAndSourceFileSpecifiedException = FileContentAndSourceFileSpecifiedException;
class FileContentSizeLimitExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "FileContentSizeLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "FileContentSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FileContentSizeLimitExceededException.prototype);
    }
}
exports.FileContentSizeLimitExceededException = FileContentSizeLimitExceededException;
class FileDoesNotExistException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "FileDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "FileDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FileDoesNotExistException.prototype);
    }
}
exports.FileDoesNotExistException = FileDoesNotExistException;
class FileEntryRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "FileEntryRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "FileEntryRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FileEntryRequiredException.prototype);
    }
}
exports.FileEntryRequiredException = FileEntryRequiredException;
class FileModeRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "FileModeRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "FileModeRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FileModeRequiredException.prototype);
    }
}
exports.FileModeRequiredException = FileModeRequiredException;
class FileNameConflictsWithDirectoryNameException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "FileNameConflictsWithDirectoryNameException",
            $fault: "client",
            ...opts,
        });
        this.name = "FileNameConflictsWithDirectoryNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FileNameConflictsWithDirectoryNameException.prototype);
    }
}
exports.FileNameConflictsWithDirectoryNameException = FileNameConflictsWithDirectoryNameException;
class FilePathConflictsWithSubmodulePathException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "FilePathConflictsWithSubmodulePathException",
            $fault: "client",
            ...opts,
        });
        this.name = "FilePathConflictsWithSubmodulePathException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FilePathConflictsWithSubmodulePathException.prototype);
    }
}
exports.FilePathConflictsWithSubmodulePathException = FilePathConflictsWithSubmodulePathException;
class FolderContentSizeLimitExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "FolderContentSizeLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "FolderContentSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FolderContentSizeLimitExceededException.prototype);
    }
}
exports.FolderContentSizeLimitExceededException = FolderContentSizeLimitExceededException;
class InvalidDeletionParameterException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidDeletionParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDeletionParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeletionParameterException.prototype);
    }
}
exports.InvalidDeletionParameterException = InvalidDeletionParameterException;
class InvalidEmailException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidEmailException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidEmailException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidEmailException.prototype);
    }
}
exports.InvalidEmailException = InvalidEmailException;
class InvalidFileModeException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidFileModeException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidFileModeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFileModeException.prototype);
    }
}
exports.InvalidFileModeException = InvalidFileModeException;
class InvalidParentCommitIdException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidParentCommitIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParentCommitIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParentCommitIdException.prototype);
    }
}
exports.InvalidParentCommitIdException = InvalidParentCommitIdException;
class InvalidPathException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidPathException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidPathException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPathException.prototype);
    }
}
exports.InvalidPathException = InvalidPathException;
class MaximumFileEntriesExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "MaximumFileEntriesExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaximumFileEntriesExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaximumFileEntriesExceededException.prototype);
    }
}
exports.MaximumFileEntriesExceededException = MaximumFileEntriesExceededException;
class NameLengthExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "NameLengthExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "NameLengthExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NameLengthExceededException.prototype);
    }
}
exports.NameLengthExceededException = NameLengthExceededException;
class NoChangeException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "NoChangeException",
            $fault: "client",
            ...opts,
        });
        this.name = "NoChangeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoChangeException.prototype);
    }
}
exports.NoChangeException = NoChangeException;
class ParentCommitDoesNotExistException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ParentCommitDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "ParentCommitDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParentCommitDoesNotExistException.prototype);
    }
}
exports.ParentCommitDoesNotExistException = ParentCommitDoesNotExistException;
class ParentCommitIdOutdatedException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ParentCommitIdOutdatedException",
            $fault: "client",
            ...opts,
        });
        this.name = "ParentCommitIdOutdatedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParentCommitIdOutdatedException.prototype);
    }
}
exports.ParentCommitIdOutdatedException = ParentCommitIdOutdatedException;
class ParentCommitIdRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ParentCommitIdRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "ParentCommitIdRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParentCommitIdRequiredException.prototype);
    }
}
exports.ParentCommitIdRequiredException = ParentCommitIdRequiredException;
class PathRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "PathRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "PathRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PathRequiredException.prototype);
    }
}
exports.PathRequiredException = PathRequiredException;
class PutFileEntryConflictException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "PutFileEntryConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "PutFileEntryConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PutFileEntryConflictException.prototype);
    }
}
exports.PutFileEntryConflictException = PutFileEntryConflictException;
class RestrictedSourceFileException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "RestrictedSourceFileException",
            $fault: "client",
            ...opts,
        });
        this.name = "RestrictedSourceFileException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RestrictedSourceFileException.prototype);
    }
}
exports.RestrictedSourceFileException = RestrictedSourceFileException;
class SamePathRequestException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "SamePathRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "SamePathRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SamePathRequestException.prototype);
    }
}
exports.SamePathRequestException = SamePathRequestException;
class SourceFileOrContentRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "SourceFileOrContentRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "SourceFileOrContentRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SourceFileOrContentRequiredException.prototype);
    }
}
exports.SourceFileOrContentRequiredException = SourceFileOrContentRequiredException;
exports.PullRequestStatusEnum = {
    CLOSED: "CLOSED",
    OPEN: "OPEN",
};
class IdempotencyParameterMismatchException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "IdempotencyParameterMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "IdempotencyParameterMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotencyParameterMismatchException.prototype);
    }
}
exports.IdempotencyParameterMismatchException = IdempotencyParameterMismatchException;
class InvalidClientRequestTokenException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidClientRequestTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidClientRequestTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidClientRequestTokenException.prototype);
    }
}
exports.InvalidClientRequestTokenException = InvalidClientRequestTokenException;
class InvalidDescriptionException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidDescriptionException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDescriptionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDescriptionException.prototype);
    }
}
exports.InvalidDescriptionException = InvalidDescriptionException;
class InvalidReferenceNameException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidReferenceNameException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidReferenceNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidReferenceNameException.prototype);
    }
}
exports.InvalidReferenceNameException = InvalidReferenceNameException;
class InvalidTargetException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidTargetException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTargetException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTargetException.prototype);
    }
}
exports.InvalidTargetException = InvalidTargetException;
class InvalidTargetsException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidTargetsException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTargetsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTargetsException.prototype);
    }
}
exports.InvalidTargetsException = InvalidTargetsException;
class InvalidTitleException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidTitleException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTitleException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTitleException.prototype);
    }
}
exports.InvalidTitleException = InvalidTitleException;
class MaximumOpenPullRequestsExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "MaximumOpenPullRequestsExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaximumOpenPullRequestsExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaximumOpenPullRequestsExceededException.prototype);
    }
}
exports.MaximumOpenPullRequestsExceededException = MaximumOpenPullRequestsExceededException;
class MultipleRepositoriesInPullRequestException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "MultipleRepositoriesInPullRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "MultipleRepositoriesInPullRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MultipleRepositoriesInPullRequestException.prototype);
    }
}
exports.MultipleRepositoriesInPullRequestException = MultipleRepositoriesInPullRequestException;
class ReferenceDoesNotExistException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ReferenceDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "ReferenceDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReferenceDoesNotExistException.prototype);
    }
}
exports.ReferenceDoesNotExistException = ReferenceDoesNotExistException;
class ReferenceNameRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ReferenceNameRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "ReferenceNameRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReferenceNameRequiredException.prototype);
    }
}
exports.ReferenceNameRequiredException = ReferenceNameRequiredException;
class ReferenceTypeNotSupportedException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ReferenceTypeNotSupportedException",
            $fault: "client",
            ...opts,
        });
        this.name = "ReferenceTypeNotSupportedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReferenceTypeNotSupportedException.prototype);
    }
}
exports.ReferenceTypeNotSupportedException = ReferenceTypeNotSupportedException;
class SourceAndDestinationAreSameException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "SourceAndDestinationAreSameException",
            $fault: "client",
            ...opts,
        });
        this.name = "SourceAndDestinationAreSameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SourceAndDestinationAreSameException.prototype);
    }
}
exports.SourceAndDestinationAreSameException = SourceAndDestinationAreSameException;
class TargetRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "TargetRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "TargetRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TargetRequiredException.prototype);
    }
}
exports.TargetRequiredException = TargetRequiredException;
class TargetsRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "TargetsRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "TargetsRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TargetsRequiredException.prototype);
    }
}
exports.TargetsRequiredException = TargetsRequiredException;
class TitleRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "TitleRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "TitleRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TitleRequiredException.prototype);
    }
}
exports.TitleRequiredException = TitleRequiredException;
class InvalidApprovalRuleContentException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidApprovalRuleContentException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidApprovalRuleContentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidApprovalRuleContentException.prototype);
    }
}
exports.InvalidApprovalRuleContentException = InvalidApprovalRuleContentException;
class InvalidApprovalRuleNameException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidApprovalRuleNameException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidApprovalRuleNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidApprovalRuleNameException.prototype);
    }
}
exports.InvalidApprovalRuleNameException = InvalidApprovalRuleNameException;
class InvalidPullRequestIdException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidPullRequestIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidPullRequestIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPullRequestIdException.prototype);
    }
}
exports.InvalidPullRequestIdException = InvalidPullRequestIdException;
class NumberOfRulesExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "NumberOfRulesExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "NumberOfRulesExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NumberOfRulesExceededException.prototype);
    }
}
exports.NumberOfRulesExceededException = NumberOfRulesExceededException;
class PullRequestAlreadyClosedException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "PullRequestAlreadyClosedException",
            $fault: "client",
            ...opts,
        });
        this.name = "PullRequestAlreadyClosedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PullRequestAlreadyClosedException.prototype);
    }
}
exports.PullRequestAlreadyClosedException = PullRequestAlreadyClosedException;
class PullRequestDoesNotExistException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "PullRequestDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "PullRequestDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PullRequestDoesNotExistException.prototype);
    }
}
exports.PullRequestDoesNotExistException = PullRequestDoesNotExistException;
class PullRequestIdRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "PullRequestIdRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "PullRequestIdRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PullRequestIdRequiredException.prototype);
    }
}
exports.PullRequestIdRequiredException = PullRequestIdRequiredException;
class InvalidRepositoryDescriptionException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidRepositoryDescriptionException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRepositoryDescriptionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRepositoryDescriptionException.prototype);
    }
}
exports.InvalidRepositoryDescriptionException = InvalidRepositoryDescriptionException;
class InvalidSystemTagUsageException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidSystemTagUsageException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSystemTagUsageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSystemTagUsageException.prototype);
    }
}
exports.InvalidSystemTagUsageException = InvalidSystemTagUsageException;
class InvalidTagsMapException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidTagsMapException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTagsMapException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTagsMapException.prototype);
    }
}
exports.InvalidTagsMapException = InvalidTagsMapException;
class RepositoryLimitExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "RepositoryLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryLimitExceededException.prototype);
    }
}
exports.RepositoryLimitExceededException = RepositoryLimitExceededException;
class RepositoryNameExistsException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "RepositoryNameExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryNameExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryNameExistsException.prototype);
    }
}
exports.RepositoryNameExistsException = RepositoryNameExistsException;
class TagPolicyException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "TagPolicyException",
            $fault: "client",
            ...opts,
        });
        this.name = "TagPolicyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TagPolicyException.prototype);
    }
}
exports.TagPolicyException = TagPolicyException;
class TooManyTagsException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
    }
}
exports.TooManyTagsException = TooManyTagsException;
class ConcurrentReferenceUpdateException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ConcurrentReferenceUpdateException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentReferenceUpdateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentReferenceUpdateException.prototype);
    }
}
exports.ConcurrentReferenceUpdateException = ConcurrentReferenceUpdateException;
exports.ReplacementTypeEnum = {
    KEEP_BASE: "KEEP_BASE",
    KEEP_DESTINATION: "KEEP_DESTINATION",
    KEEP_SOURCE: "KEEP_SOURCE",
    USE_NEW_CONTENT: "USE_NEW_CONTENT",
};
class InvalidConflictResolutionException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidConflictResolutionException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidConflictResolutionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidConflictResolutionException.prototype);
    }
}
exports.InvalidConflictResolutionException = InvalidConflictResolutionException;
class InvalidReplacementContentException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidReplacementContentException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidReplacementContentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidReplacementContentException.prototype);
    }
}
exports.InvalidReplacementContentException = InvalidReplacementContentException;
class InvalidReplacementTypeException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidReplacementTypeException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidReplacementTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidReplacementTypeException.prototype);
    }
}
exports.InvalidReplacementTypeException = InvalidReplacementTypeException;
class ManualMergeRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ManualMergeRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "ManualMergeRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ManualMergeRequiredException.prototype);
    }
}
exports.ManualMergeRequiredException = ManualMergeRequiredException;
class MaximumConflictResolutionEntriesExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "MaximumConflictResolutionEntriesExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaximumConflictResolutionEntriesExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaximumConflictResolutionEntriesExceededException.prototype);
    }
}
exports.MaximumConflictResolutionEntriesExceededException = MaximumConflictResolutionEntriesExceededException;
class MultipleConflictResolutionEntriesException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "MultipleConflictResolutionEntriesException",
            $fault: "client",
            ...opts,
        });
        this.name = "MultipleConflictResolutionEntriesException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MultipleConflictResolutionEntriesException.prototype);
    }
}
exports.MultipleConflictResolutionEntriesException = MultipleConflictResolutionEntriesException;
class ReplacementContentRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ReplacementContentRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "ReplacementContentRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReplacementContentRequiredException.prototype);
    }
}
exports.ReplacementContentRequiredException = ReplacementContentRequiredException;
class ReplacementTypeRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ReplacementTypeRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "ReplacementTypeRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReplacementTypeRequiredException.prototype);
    }
}
exports.ReplacementTypeRequiredException = ReplacementTypeRequiredException;
class DefaultBranchCannotBeDeletedException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "DefaultBranchCannotBeDeletedException",
            $fault: "client",
            ...opts,
        });
        this.name = "DefaultBranchCannotBeDeletedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DefaultBranchCannotBeDeletedException.prototype);
    }
}
exports.DefaultBranchCannotBeDeletedException = DefaultBranchCannotBeDeletedException;
class CommentDeletedException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "CommentDeletedException",
            $fault: "client",
            ...opts,
        });
        this.name = "CommentDeletedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CommentDeletedException.prototype);
    }
}
exports.CommentDeletedException = CommentDeletedException;
class CommentDoesNotExistException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "CommentDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "CommentDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CommentDoesNotExistException.prototype);
    }
}
exports.CommentDoesNotExistException = CommentDoesNotExistException;
class CommentIdRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "CommentIdRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "CommentIdRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CommentIdRequiredException.prototype);
    }
}
exports.CommentIdRequiredException = CommentIdRequiredException;
class InvalidCommentIdException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidCommentIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidCommentIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidCommentIdException.prototype);
    }
}
exports.InvalidCommentIdException = InvalidCommentIdException;
exports.PullRequestEventType = {
    PULL_REQUEST_APPROVAL_RULE_CREATED: "PULL_REQUEST_APPROVAL_RULE_CREATED",
    PULL_REQUEST_APPROVAL_RULE_DELETED: "PULL_REQUEST_APPROVAL_RULE_DELETED",
    PULL_REQUEST_APPROVAL_RULE_OVERRIDDEN: "PULL_REQUEST_APPROVAL_RULE_OVERRIDDEN",
    PULL_REQUEST_APPROVAL_RULE_UPDATED: "PULL_REQUEST_APPROVAL_RULE_UPDATED",
    PULL_REQUEST_APPROVAL_STATE_CHANGED: "PULL_REQUEST_APPROVAL_STATE_CHANGED",
    PULL_REQUEST_CREATED: "PULL_REQUEST_CREATED",
    PULL_REQUEST_MERGE_STATE_CHANGED: "PULL_REQUEST_MERGE_STATE_CHANGED",
    PULL_REQUEST_SOURCE_REFERENCE_UPDATED: "PULL_REQUEST_SOURCE_REFERENCE_UPDATED",
    PULL_REQUEST_STATUS_CHANGED: "PULL_REQUEST_STATUS_CHANGED",
};
class InvalidActorArnException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidActorArnException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidActorArnException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidActorArnException.prototype);
    }
}
exports.InvalidActorArnException = InvalidActorArnException;
class InvalidMaxResultsException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidMaxResultsException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidMaxResultsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidMaxResultsException.prototype);
    }
}
exports.InvalidMaxResultsException = InvalidMaxResultsException;
class InvalidPullRequestEventTypeException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidPullRequestEventTypeException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidPullRequestEventTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPullRequestEventTypeException.prototype);
    }
}
exports.InvalidPullRequestEventTypeException = InvalidPullRequestEventTypeException;
class InvalidRevisionIdException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidRevisionIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRevisionIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRevisionIdException.prototype);
    }
}
exports.InvalidRevisionIdException = InvalidRevisionIdException;
class RevisionIdRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "RevisionIdRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "RevisionIdRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RevisionIdRequiredException.prototype);
    }
}
exports.RevisionIdRequiredException = RevisionIdRequiredException;
class RevisionNotCurrentException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "RevisionNotCurrentException",
            $fault: "client",
            ...opts,
        });
        this.name = "RevisionNotCurrentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RevisionNotCurrentException.prototype);
    }
}
exports.RevisionNotCurrentException = RevisionNotCurrentException;
class FileTooLargeException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "FileTooLargeException",
            $fault: "client",
            ...opts,
        });
        this.name = "FileTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FileTooLargeException.prototype);
    }
}
exports.FileTooLargeException = FileTooLargeException;
class InvalidBlobIdException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidBlobIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidBlobIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidBlobIdException.prototype);
    }
}
exports.InvalidBlobIdException = InvalidBlobIdException;
class InvalidReactionUserArnException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidReactionUserArnException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidReactionUserArnException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidReactionUserArnException.prototype);
    }
}
exports.InvalidReactionUserArnException = InvalidReactionUserArnException;
exports.RelativeFileVersionEnum = {
    AFTER: "AFTER",
    BEFORE: "BEFORE",
};
class RepositoryNotAssociatedWithPullRequestException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "RepositoryNotAssociatedWithPullRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryNotAssociatedWithPullRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryNotAssociatedWithPullRequestException.prototype);
    }
}
exports.RepositoryNotAssociatedWithPullRequestException = RepositoryNotAssociatedWithPullRequestException;
class CommitIdDoesNotExistException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "CommitIdDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "CommitIdDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CommitIdDoesNotExistException.prototype);
    }
}
exports.CommitIdDoesNotExistException = CommitIdDoesNotExistException;
class PathDoesNotExistException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "PathDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "PathDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PathDoesNotExistException.prototype);
    }
}
exports.PathDoesNotExistException = PathDoesNotExistException;
class FolderDoesNotExistException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "FolderDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "FolderDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FolderDoesNotExistException.prototype);
    }
}
exports.FolderDoesNotExistException = FolderDoesNotExistException;
class InvalidDestinationCommitSpecifierException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidDestinationCommitSpecifierException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDestinationCommitSpecifierException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDestinationCommitSpecifierException.prototype);
    }
}
exports.InvalidDestinationCommitSpecifierException = InvalidDestinationCommitSpecifierException;
class InvalidSourceCommitSpecifierException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidSourceCommitSpecifierException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSourceCommitSpecifierException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSourceCommitSpecifierException.prototype);
    }
}
exports.InvalidSourceCommitSpecifierException = InvalidSourceCommitSpecifierException;
exports.RepositoryTriggerEventEnum = {
    ALL: "all",
    CREATE_REFERENCE: "createReference",
    DELETE_REFERENCE: "deleteReference",
    UPDATE_REFERENCE: "updateReference",
};
class InvalidAuthorArnException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidAuthorArnException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidAuthorArnException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAuthorArnException.prototype);
    }
}
exports.InvalidAuthorArnException = InvalidAuthorArnException;
class InvalidPullRequestStatusException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidPullRequestStatusException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidPullRequestStatusException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPullRequestStatusException.prototype);
    }
}
exports.InvalidPullRequestStatusException = InvalidPullRequestStatusException;
class InvalidOrderException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidOrderException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidOrderException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOrderException.prototype);
    }
}
exports.InvalidOrderException = InvalidOrderException;
class InvalidSortByException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidSortByException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSortByException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSortByException.prototype);
    }
}
exports.InvalidSortByException = InvalidSortByException;
