"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PullRequestStatusRequiredException = exports.InvalidPullRequestStatusUpdateException = exports.PullRequestCannotBeApprovedByAuthorException = exports.MaximumNumberOfApprovalsExceededException = exports.InvalidApprovalStateException = exports.CommentNotCreatedByCallerException = exports.InvalidRuleContentSha256Exception = exports.TagKeysListRequiredException = exports.InvalidTagKeysListException = exports.TagsMapRequiredException = exports.RepositoryTriggersListRequiredException = exports.RepositoryTriggerNameRequiredException = exports.RepositoryTriggerEventsListRequiredException = exports.RepositoryTriggerDestinationArnRequiredException = exports.RepositoryTriggerBranchNameListRequiredException = exports.MaximumRepositoryTriggersExceededException = exports.MaximumBranchesExceededException = exports.InvalidRepositoryTriggerRegionException = exports.InvalidRepositoryTriggerNameException = exports.InvalidRepositoryTriggerEventsException = exports.InvalidRepositoryTriggerDestinationArnException = exports.InvalidRepositoryTriggerCustomDataException = exports.InvalidRepositoryTriggerBranchNameException = exports.SameFileContentException = exports.FileContentRequiredException = exports.ReactionValueRequiredException = exports.ReactionLimitExceededException = exports.InvalidReactionValueException = exports.InvalidRelativeFileVersionEnumException = exports.InvalidFilePositionException = exports.InvalidFileLocationException = exports.CommentContentSizeLimitExceededException = exports.CommentContentRequiredException = exports.OverrideStatusRequiredException = exports.OverrideAlreadySetException = exports.InvalidOverrideStatusException = exports.TipOfSourceReferenceIsDifferentException = exports.PullRequestApprovalRulesNotSatisfiedException = exports.InvalidTargetBranchException = exports.ResourceArnRequiredException = exports.InvalidResourceArnException = exports.SortByEnum = exports.OrderEnum = void 0;
const CodeCommitServiceException_1 = require("./CodeCommitServiceException");
exports.OrderEnum = {
    ASCENDING: "ascending",
    DESCENDING: "descending",
};
exports.SortByEnum = {
    MODIFIED_DATE: "lastModifiedDate",
    REPOSITORY_NAME: "repositoryName",
};
class InvalidResourceArnException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidResourceArnException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidResourceArnException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidResourceArnException.prototype);
    }
}
exports.InvalidResourceArnException = InvalidResourceArnException;
class ResourceArnRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ResourceArnRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceArnRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceArnRequiredException.prototype);
    }
}
exports.ResourceArnRequiredException = ResourceArnRequiredException;
class InvalidTargetBranchException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidTargetBranchException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTargetBranchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTargetBranchException.prototype);
    }
}
exports.InvalidTargetBranchException = InvalidTargetBranchException;
class PullRequestApprovalRulesNotSatisfiedException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "PullRequestApprovalRulesNotSatisfiedException",
            $fault: "client",
            ...opts,
        });
        this.name = "PullRequestApprovalRulesNotSatisfiedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PullRequestApprovalRulesNotSatisfiedException.prototype);
    }
}
exports.PullRequestApprovalRulesNotSatisfiedException = PullRequestApprovalRulesNotSatisfiedException;
class TipOfSourceReferenceIsDifferentException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "TipOfSourceReferenceIsDifferentException",
            $fault: "client",
            ...opts,
        });
        this.name = "TipOfSourceReferenceIsDifferentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TipOfSourceReferenceIsDifferentException.prototype);
    }
}
exports.TipOfSourceReferenceIsDifferentException = TipOfSourceReferenceIsDifferentException;
class InvalidOverrideStatusException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidOverrideStatusException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidOverrideStatusException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOverrideStatusException.prototype);
    }
}
exports.InvalidOverrideStatusException = InvalidOverrideStatusException;
class OverrideAlreadySetException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "OverrideAlreadySetException",
            $fault: "client",
            ...opts,
        });
        this.name = "OverrideAlreadySetException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OverrideAlreadySetException.prototype);
    }
}
exports.OverrideAlreadySetException = OverrideAlreadySetException;
class OverrideStatusRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "OverrideStatusRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "OverrideStatusRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OverrideStatusRequiredException.prototype);
    }
}
exports.OverrideStatusRequiredException = OverrideStatusRequiredException;
class CommentContentRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "CommentContentRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "CommentContentRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CommentContentRequiredException.prototype);
    }
}
exports.CommentContentRequiredException = CommentContentRequiredException;
class CommentContentSizeLimitExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "CommentContentSizeLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "CommentContentSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CommentContentSizeLimitExceededException.prototype);
    }
}
exports.CommentContentSizeLimitExceededException = CommentContentSizeLimitExceededException;
class InvalidFileLocationException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidFileLocationException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidFileLocationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFileLocationException.prototype);
    }
}
exports.InvalidFileLocationException = InvalidFileLocationException;
class InvalidFilePositionException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidFilePositionException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidFilePositionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilePositionException.prototype);
    }
}
exports.InvalidFilePositionException = InvalidFilePositionException;
class InvalidRelativeFileVersionEnumException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidRelativeFileVersionEnumException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRelativeFileVersionEnumException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRelativeFileVersionEnumException.prototype);
    }
}
exports.InvalidRelativeFileVersionEnumException = InvalidRelativeFileVersionEnumException;
class InvalidReactionValueException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidReactionValueException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidReactionValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidReactionValueException.prototype);
    }
}
exports.InvalidReactionValueException = InvalidReactionValueException;
class ReactionLimitExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ReactionLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ReactionLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReactionLimitExceededException.prototype);
    }
}
exports.ReactionLimitExceededException = ReactionLimitExceededException;
class ReactionValueRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "ReactionValueRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "ReactionValueRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReactionValueRequiredException.prototype);
    }
}
exports.ReactionValueRequiredException = ReactionValueRequiredException;
class FileContentRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "FileContentRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "FileContentRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FileContentRequiredException.prototype);
    }
}
exports.FileContentRequiredException = FileContentRequiredException;
class SameFileContentException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "SameFileContentException",
            $fault: "client",
            ...opts,
        });
        this.name = "SameFileContentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SameFileContentException.prototype);
    }
}
exports.SameFileContentException = SameFileContentException;
class InvalidRepositoryTriggerBranchNameException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidRepositoryTriggerBranchNameException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRepositoryTriggerBranchNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRepositoryTriggerBranchNameException.prototype);
    }
}
exports.InvalidRepositoryTriggerBranchNameException = InvalidRepositoryTriggerBranchNameException;
class InvalidRepositoryTriggerCustomDataException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidRepositoryTriggerCustomDataException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRepositoryTriggerCustomDataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRepositoryTriggerCustomDataException.prototype);
    }
}
exports.InvalidRepositoryTriggerCustomDataException = InvalidRepositoryTriggerCustomDataException;
class InvalidRepositoryTriggerDestinationArnException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidRepositoryTriggerDestinationArnException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRepositoryTriggerDestinationArnException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRepositoryTriggerDestinationArnException.prototype);
    }
}
exports.InvalidRepositoryTriggerDestinationArnException = InvalidRepositoryTriggerDestinationArnException;
class InvalidRepositoryTriggerEventsException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidRepositoryTriggerEventsException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRepositoryTriggerEventsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRepositoryTriggerEventsException.prototype);
    }
}
exports.InvalidRepositoryTriggerEventsException = InvalidRepositoryTriggerEventsException;
class InvalidRepositoryTriggerNameException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidRepositoryTriggerNameException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRepositoryTriggerNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRepositoryTriggerNameException.prototype);
    }
}
exports.InvalidRepositoryTriggerNameException = InvalidRepositoryTriggerNameException;
class InvalidRepositoryTriggerRegionException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidRepositoryTriggerRegionException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRepositoryTriggerRegionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRepositoryTriggerRegionException.prototype);
    }
}
exports.InvalidRepositoryTriggerRegionException = InvalidRepositoryTriggerRegionException;
class MaximumBranchesExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "MaximumBranchesExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaximumBranchesExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaximumBranchesExceededException.prototype);
    }
}
exports.MaximumBranchesExceededException = MaximumBranchesExceededException;
class MaximumRepositoryTriggersExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "MaximumRepositoryTriggersExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaximumRepositoryTriggersExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaximumRepositoryTriggersExceededException.prototype);
    }
}
exports.MaximumRepositoryTriggersExceededException = MaximumRepositoryTriggersExceededException;
class RepositoryTriggerBranchNameListRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "RepositoryTriggerBranchNameListRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryTriggerBranchNameListRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryTriggerBranchNameListRequiredException.prototype);
    }
}
exports.RepositoryTriggerBranchNameListRequiredException = RepositoryTriggerBranchNameListRequiredException;
class RepositoryTriggerDestinationArnRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "RepositoryTriggerDestinationArnRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryTriggerDestinationArnRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryTriggerDestinationArnRequiredException.prototype);
    }
}
exports.RepositoryTriggerDestinationArnRequiredException = RepositoryTriggerDestinationArnRequiredException;
class RepositoryTriggerEventsListRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "RepositoryTriggerEventsListRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryTriggerEventsListRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryTriggerEventsListRequiredException.prototype);
    }
}
exports.RepositoryTriggerEventsListRequiredException = RepositoryTriggerEventsListRequiredException;
class RepositoryTriggerNameRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "RepositoryTriggerNameRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryTriggerNameRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryTriggerNameRequiredException.prototype);
    }
}
exports.RepositoryTriggerNameRequiredException = RepositoryTriggerNameRequiredException;
class RepositoryTriggersListRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "RepositoryTriggersListRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryTriggersListRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryTriggersListRequiredException.prototype);
    }
}
exports.RepositoryTriggersListRequiredException = RepositoryTriggersListRequiredException;
class TagsMapRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "TagsMapRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "TagsMapRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TagsMapRequiredException.prototype);
    }
}
exports.TagsMapRequiredException = TagsMapRequiredException;
class InvalidTagKeysListException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidTagKeysListException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTagKeysListException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTagKeysListException.prototype);
    }
}
exports.InvalidTagKeysListException = InvalidTagKeysListException;
class TagKeysListRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "TagKeysListRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "TagKeysListRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TagKeysListRequiredException.prototype);
    }
}
exports.TagKeysListRequiredException = TagKeysListRequiredException;
class InvalidRuleContentSha256Exception extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidRuleContentSha256Exception",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRuleContentSha256Exception";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRuleContentSha256Exception.prototype);
    }
}
exports.InvalidRuleContentSha256Exception = InvalidRuleContentSha256Exception;
class CommentNotCreatedByCallerException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "CommentNotCreatedByCallerException",
            $fault: "client",
            ...opts,
        });
        this.name = "CommentNotCreatedByCallerException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CommentNotCreatedByCallerException.prototype);
    }
}
exports.CommentNotCreatedByCallerException = CommentNotCreatedByCallerException;
class InvalidApprovalStateException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidApprovalStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidApprovalStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidApprovalStateException.prototype);
    }
}
exports.InvalidApprovalStateException = InvalidApprovalStateException;
class MaximumNumberOfApprovalsExceededException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "MaximumNumberOfApprovalsExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaximumNumberOfApprovalsExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaximumNumberOfApprovalsExceededException.prototype);
    }
}
exports.MaximumNumberOfApprovalsExceededException = MaximumNumberOfApprovalsExceededException;
class PullRequestCannotBeApprovedByAuthorException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "PullRequestCannotBeApprovedByAuthorException",
            $fault: "client",
            ...opts,
        });
        this.name = "PullRequestCannotBeApprovedByAuthorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PullRequestCannotBeApprovedByAuthorException.prototype);
    }
}
exports.PullRequestCannotBeApprovedByAuthorException = PullRequestCannotBeApprovedByAuthorException;
class InvalidPullRequestStatusUpdateException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "InvalidPullRequestStatusUpdateException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidPullRequestStatusUpdateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPullRequestStatusUpdateException.prototype);
    }
}
exports.InvalidPullRequestStatusUpdateException = InvalidPullRequestStatusUpdateException;
class PullRequestStatusRequiredException extends CodeCommitServiceException_1.CodeCommitServiceException {
    constructor(opts) {
        super({
            name: "PullRequestStatusRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "PullRequestStatusRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PullRequestStatusRequiredException.prototype);
    }
}
exports.PullRequestStatusRequiredException = PullRequestStatusRequiredException;
