"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getChildWithValue = exports.isIndexTraversalPart = exports.isNameTraversalPart = exports.isObjectExpression = exports.isTupleExpression = exports.isBinaryOpExpression = exports.isUnaryOpExpression = exports.isConditionalExpression = exports.isSplatExpression = exports.isIndexExpression = exports.isLiteralValueExpression = exports.isRelativeTraversalExpression = exports.isScopeTraversalExpression = exports.isFunctionCallExpression = exports.isTemplateExpression = exports.isTemplateWrapExpression = exports.isForExpression = void 0;
function isForExpression(ast) {
    return ast.type === "for";
}
exports.isForExpression = isForExpression;
function isTemplateWrapExpression(ast) {
    return ast.type === "templateWrap";
}
exports.isTemplateWrapExpression = isTemplateWrapExpression;
function isTemplateExpression(ast) {
    return ast.type === "template";
}
exports.isTemplateExpression = isTemplateExpression;
function isFunctionCallExpression(ast) {
    return ast.type === "function";
}
exports.isFunctionCallExpression = isFunctionCallExpression;
function isScopeTraversalExpression(ast) {
    return ast.type === "scopeTraversal";
}
exports.isScopeTraversalExpression = isScopeTraversalExpression;
function isRelativeTraversalExpression(ast) {
    return ast.type === "relativeTraversal";
}
exports.isRelativeTraversalExpression = isRelativeTraversalExpression;
function isLiteralValueExpression(ast) {
    return ast.type === "literalValue";
}
exports.isLiteralValueExpression = isLiteralValueExpression;
function isIndexExpression(ast) {
    return ast.type === "index";
}
exports.isIndexExpression = isIndexExpression;
function isSplatExpression(ast) {
    return ast.type === "splat";
}
exports.isSplatExpression = isSplatExpression;
function isConditionalExpression(ast) {
    return ast.type === "conditional";
}
exports.isConditionalExpression = isConditionalExpression;
function isUnaryOpExpression(ast) {
    return ast.type === "unaryOp";
}
exports.isUnaryOpExpression = isUnaryOpExpression;
function isBinaryOpExpression(ast) {
    return ast.type === "binaryOp";
}
exports.isBinaryOpExpression = isBinaryOpExpression;
function isTupleExpression(ast) {
    return ast.type === "tuple";
}
exports.isTupleExpression = isTupleExpression;
function isObjectExpression(part) {
    return part.type === "object";
}
exports.isObjectExpression = isObjectExpression;
function isNameTraversalPart(part) {
    return part.type === "nameTraversal";
}
exports.isNameTraversalPart = isNameTraversalPart;
function isIndexTraversalPart(part) {
    return part.type === "indexTraversal";
}
exports.isIndexTraversalPart = isIndexTraversalPart;
function getChildWithValue(node, value) {
    if (!node.children) {
        return null;
    }
    return node.children.find((child) => {
        if (!child.meta)
            return false;
        return child.meta.value === value;
    });
}
exports.getChildWithValue = getChildWithValue;
//# sourceMappingURL=data:application/json;base64,